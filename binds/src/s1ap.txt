use std::env;
use std::fs;
use std::path::PathBuf;

use bindgen;

pub fn build_s1ap_binds() {
    let cargo_manifest_dir = env!("CARGO_MANIFEST_DIR").to_string();

    let out_dir = PathBuf::from(&cargo_manifest_dir).join("src/s1ap/rs");

    // Ensure the output directory exists
    fs::create_dir_all(&out_dir).expect("Failed to create rs directory");

    // Directory containing the C header files
    let header_dir = PathBuf::from(&cargo_manifest_dir).join("src/s1ap/c");

    // Iterate over all header files in the directory
    for entry in fs::read_dir(&header_dir).expect("Failed to read header directory") {
        let entry = entry.expect("Failed to read directory entry");
        let path = entry.path();

        // Skip non-header files
        if path.extension().and_then(|ext| ext.to_str()) != Some("h") {
            continue;
        }

        // Generate bindings for the current header file
        let header_name = path.file_stem().unwrap().to_str().unwrap();
        let bindings_path = out_dir.join(format!("{}.rs", header_name));

        bindgen::Builder::default()
            .header(path.to_str().unwrap())
            .clang_arg(format!("-I{}/src/common", &cargo_manifest_dir))
            // Include folder for additional headers
            .generate()
            .expect(&format!("Unable to generate bindings for {:?}", path))
            .write_to_file(&bindings_path)
            .expect(&format!("Couldn't write bindings for {:?}", path));

        // Tell Cargo to rerun this script if the header file changes
        println!("cargo:rerun-if-changed={}", path.display());
    }

    // Also watch the include directory for changes
    println!("cargo:rerun-if-changed=src/s1ap/c/include");
}
