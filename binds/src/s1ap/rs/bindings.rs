/* automatically generated by rust-bindgen 0.71.1 */

#[repr(C)]
#[derive(Default)]
pub struct __IncompleteArrayField<T>(::std::marker::PhantomData<T>, [T; 0]);
impl<T> __IncompleteArrayField<T> {
    #[inline]
    pub const fn new() -> Self {
        __IncompleteArrayField(::std::marker::PhantomData, [])
    }
    #[inline]
    pub fn as_ptr(&self) -> *const T {
        self as *const _ as *const T
    }
    #[inline]
    pub fn as_mut_ptr(&mut self) -> *mut T {
        self as *mut _ as *mut T
    }
    #[inline]
    pub unsafe fn as_slice(&self, len: usize) -> &[T] {
        ::std::slice::from_raw_parts(self.as_ptr(), len)
    }
    #[inline]
    pub unsafe fn as_mut_slice(&mut self, len: usize) -> &mut [T] {
        ::std::slice::from_raw_parts_mut(self.as_mut_ptr(), len)
    }
}
impl<T> ::std::fmt::Debug for __IncompleteArrayField<T> {
    fn fmt(&self, fmt: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        fmt.write_str("__IncompleteArrayField")
    }
}
pub const _SYS_TYPES_H: u32 = 1;
pub const _FEATURES_H: u32 = 1;
pub const _DEFAULT_SOURCE: u32 = 1;
pub const __GLIBC_USE_ISOC2X: u32 = 0;
pub const __USE_ISOC11: u32 = 1;
pub const __USE_ISOC99: u32 = 1;
pub const __USE_ISOC95: u32 = 1;
pub const __USE_POSIX_IMPLICITLY: u32 = 1;
pub const _POSIX_SOURCE: u32 = 1;
pub const _POSIX_C_SOURCE: u32 = 200809;
pub const __USE_POSIX: u32 = 1;
pub const __USE_POSIX2: u32 = 1;
pub const __USE_POSIX199309: u32 = 1;
pub const __USE_POSIX199506: u32 = 1;
pub const __USE_XOPEN2K: u32 = 1;
pub const __USE_XOPEN2K8: u32 = 1;
pub const _ATFILE_SOURCE: u32 = 1;
pub const __WORDSIZE: u32 = 64;
pub const __WORDSIZE_TIME64_COMPAT32: u32 = 1;
pub const __SYSCALL_WORDSIZE: u32 = 64;
pub const __TIMESIZE: u32 = 64;
pub const __USE_MISC: u32 = 1;
pub const __USE_ATFILE: u32 = 1;
pub const __USE_FORTIFY_LEVEL: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_GETS: u32 = 0;
pub const __GLIBC_USE_DEPRECATED_SCANF: u32 = 0;
pub const _STDC_PREDEF_H: u32 = 1;
pub const __STDC_IEC_559__: u32 = 1;
pub const __STDC_IEC_60559_BFP__: u32 = 201404;
pub const __STDC_IEC_559_COMPLEX__: u32 = 1;
pub const __STDC_IEC_60559_COMPLEX__: u32 = 201404;
pub const __STDC_ISO_10646__: u32 = 201706;
pub const __GNU_LIBRARY__: u32 = 6;
pub const __GLIBC__: u32 = 2;
pub const __GLIBC_MINOR__: u32 = 35;
pub const _SYS_CDEFS_H: u32 = 1;
pub const __glibc_c99_flexarr_available: u32 = 1;
pub const __LDOUBLE_REDIRECTS_TO_FLOAT128_ABI: u32 = 0;
pub const __HAVE_GENERIC_SELECTION: u32 = 1;
pub const _BITS_TYPES_H: u32 = 1;
pub const _BITS_TYPESIZES_H: u32 = 1;
pub const __OFF_T_MATCHES_OFF64_T: u32 = 1;
pub const __INO_T_MATCHES_INO64_T: u32 = 1;
pub const __RLIM_T_MATCHES_RLIM64_T: u32 = 1;
pub const __STATFS_MATCHES_STATFS64: u32 = 1;
pub const __KERNEL_OLD_TIMEVAL_MATCHES_TIMEVAL64: u32 = 1;
pub const __FD_SETSIZE: u32 = 1024;
pub const _BITS_TIME64_H: u32 = 1;
pub const __clock_t_defined: u32 = 1;
pub const __clockid_t_defined: u32 = 1;
pub const __time_t_defined: u32 = 1;
pub const __timer_t_defined: u32 = 1;
pub const _BITS_STDINT_INTN_H: u32 = 1;
pub const __BIT_TYPES_DEFINED__: u32 = 1;
pub const _ENDIAN_H: u32 = 1;
pub const _BITS_ENDIAN_H: u32 = 1;
pub const __LITTLE_ENDIAN: u32 = 1234;
pub const __BIG_ENDIAN: u32 = 4321;
pub const __PDP_ENDIAN: u32 = 3412;
pub const _BITS_ENDIANNESS_H: u32 = 1;
pub const __BYTE_ORDER: u32 = 1234;
pub const __FLOAT_WORD_ORDER: u32 = 1234;
pub const LITTLE_ENDIAN: u32 = 1234;
pub const BIG_ENDIAN: u32 = 4321;
pub const PDP_ENDIAN: u32 = 3412;
pub const BYTE_ORDER: u32 = 1234;
pub const _BITS_BYTESWAP_H: u32 = 1;
pub const _BITS_UINTN_IDENTITY_H: u32 = 1;
pub const _SYS_SELECT_H: u32 = 1;
pub const __sigset_t_defined: u32 = 1;
pub const __timeval_defined: u32 = 1;
pub const _STRUCT_TIMESPEC: u32 = 1;
pub const FD_SETSIZE: u32 = 1024;
pub const _BITS_PTHREADTYPES_COMMON_H: u32 = 1;
pub const _THREAD_SHARED_TYPES_H: u32 = 1;
pub const _BITS_PTHREADTYPES_ARCH_H: u32 = 1;
pub const __SIZEOF_PTHREAD_MUTEX_T: u32 = 40;
pub const __SIZEOF_PTHREAD_ATTR_T: u32 = 56;
pub const __SIZEOF_PTHREAD_RWLOCK_T: u32 = 56;
pub const __SIZEOF_PTHREAD_BARRIER_T: u32 = 32;
pub const __SIZEOF_PTHREAD_MUTEXATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_COND_T: u32 = 48;
pub const __SIZEOF_PTHREAD_CONDATTR_T: u32 = 4;
pub const __SIZEOF_PTHREAD_RWLOCKATTR_T: u32 = 8;
pub const __SIZEOF_PTHREAD_BARRIERATTR_T: u32 = 4;
pub const _THREAD_MUTEX_INTERNAL_H: u32 = 1;
pub const __PTHREAD_MUTEX_HAVE_PREV: u32 = 1;
pub const __have_pthread_attr_t: u32 = 1;
pub const _STDIO_H: u32 = 1;
pub const __GLIBC_USE_LIB_EXT2: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_BFP_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT: u32 = 0;
pub const __GLIBC_USE_IEC_60559_FUNCS_EXT_C2X: u32 = 0;
pub const __GLIBC_USE_IEC_60559_TYPES_EXT: u32 = 0;
pub const __GNUC_VA_LIST: u32 = 1;
pub const _____fpos_t_defined: u32 = 1;
pub const ____mbstate_t_defined: u32 = 1;
pub const _____fpos64_t_defined: u32 = 1;
pub const ____FILE_defined: u32 = 1;
pub const __FILE_defined: u32 = 1;
pub const __struct_FILE_defined: u32 = 1;
pub const _IO_EOF_SEEN: u32 = 16;
pub const _IO_ERR_SEEN: u32 = 32;
pub const _IO_USER_LOCK: u32 = 32768;
pub const _IOFBF: u32 = 0;
pub const _IOLBF: u32 = 1;
pub const _IONBF: u32 = 2;
pub const BUFSIZ: u32 = 8192;
pub const EOF: i32 = -1;
pub const SEEK_SET: u32 = 0;
pub const SEEK_CUR: u32 = 1;
pub const SEEK_END: u32 = 2;
pub const P_tmpdir: &[u8; 5] = b"/tmp\0";
pub const _BITS_STDIO_LIM_H: u32 = 1;
pub const L_tmpnam: u32 = 20;
pub const TMP_MAX: u32 = 238328;
pub const FILENAME_MAX: u32 = 4096;
pub const L_ctermid: u32 = 9;
pub const FOPEN_MAX: u32 = 16;
pub const __HAVE_FLOAT128: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128: u32 = 0;
pub const __HAVE_FLOAT64X: u32 = 1;
pub const __HAVE_FLOAT64X_LONG_DOUBLE: u32 = 1;
pub const __HAVE_FLOAT16: u32 = 0;
pub const __HAVE_FLOAT32: u32 = 1;
pub const __HAVE_FLOAT64: u32 = 1;
pub const __HAVE_FLOAT32X: u32 = 1;
pub const __HAVE_FLOAT128X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT16: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT32X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT64X: u32 = 0;
pub const __HAVE_DISTINCT_FLOAT128X: u32 = 0;
pub const __HAVE_FLOATN_NOT_TYPEDEF: u32 = 0;
pub const _STDLIB_H: u32 = 1;
pub const WNOHANG: u32 = 1;
pub const WUNTRACED: u32 = 2;
pub const WSTOPPED: u32 = 2;
pub const WEXITED: u32 = 4;
pub const WCONTINUED: u32 = 8;
pub const WNOWAIT: u32 = 16777216;
pub const __WNOTHREAD: u32 = 536870912;
pub const __WALL: u32 = 1073741824;
pub const __WCLONE: u32 = 2147483648;
pub const __W_CONTINUED: u32 = 65535;
pub const __WCOREFLAG: u32 = 128;
pub const __ldiv_t_defined: u32 = 1;
pub const __lldiv_t_defined: u32 = 1;
pub const RAND_MAX: u32 = 2147483647;
pub const EXIT_FAILURE: u32 = 1;
pub const EXIT_SUCCESS: u32 = 0;
pub const _ALLOCA_H: u32 = 1;
pub const _STRING_H: u32 = 1;
pub const _BITS_TYPES_LOCALE_T_H: u32 = 1;
pub const _BITS_TYPES___LOCALE_T_H: u32 = 1;
pub const _STRINGS_H: u32 = 1;
pub const _LIBC_LIMITS_H_: u32 = 1;
pub const MB_LEN_MAX: u32 = 16;
pub const _BITS_POSIX1_LIM_H: u32 = 1;
pub const _POSIX_AIO_LISTIO_MAX: u32 = 2;
pub const _POSIX_AIO_MAX: u32 = 1;
pub const _POSIX_ARG_MAX: u32 = 4096;
pub const _POSIX_CHILD_MAX: u32 = 25;
pub const _POSIX_DELAYTIMER_MAX: u32 = 32;
pub const _POSIX_HOST_NAME_MAX: u32 = 255;
pub const _POSIX_LINK_MAX: u32 = 8;
pub const _POSIX_LOGIN_NAME_MAX: u32 = 9;
pub const _POSIX_MAX_CANON: u32 = 255;
pub const _POSIX_MAX_INPUT: u32 = 255;
pub const _POSIX_MQ_OPEN_MAX: u32 = 8;
pub const _POSIX_MQ_PRIO_MAX: u32 = 32;
pub const _POSIX_NAME_MAX: u32 = 14;
pub const _POSIX_NGROUPS_MAX: u32 = 8;
pub const _POSIX_OPEN_MAX: u32 = 20;
pub const _POSIX_PATH_MAX: u32 = 256;
pub const _POSIX_PIPE_BUF: u32 = 512;
pub const _POSIX_RE_DUP_MAX: u32 = 255;
pub const _POSIX_RTSIG_MAX: u32 = 8;
pub const _POSIX_SEM_NSEMS_MAX: u32 = 256;
pub const _POSIX_SEM_VALUE_MAX: u32 = 32767;
pub const _POSIX_SIGQUEUE_MAX: u32 = 32;
pub const _POSIX_SSIZE_MAX: u32 = 32767;
pub const _POSIX_STREAM_MAX: u32 = 8;
pub const _POSIX_SYMLINK_MAX: u32 = 255;
pub const _POSIX_SYMLOOP_MAX: u32 = 8;
pub const _POSIX_TIMER_MAX: u32 = 32;
pub const _POSIX_TTY_NAME_MAX: u32 = 9;
pub const _POSIX_TZNAME_MAX: u32 = 6;
pub const _POSIX_CLOCKRES_MIN: u32 = 20000000;
pub const NR_OPEN: u32 = 1024;
pub const NGROUPS_MAX: u32 = 65536;
pub const ARG_MAX: u32 = 131072;
pub const LINK_MAX: u32 = 127;
pub const MAX_CANON: u32 = 255;
pub const MAX_INPUT: u32 = 255;
pub const NAME_MAX: u32 = 255;
pub const PATH_MAX: u32 = 4096;
pub const PIPE_BUF: u32 = 4096;
pub const XATTR_NAME_MAX: u32 = 255;
pub const XATTR_SIZE_MAX: u32 = 65536;
pub const XATTR_LIST_MAX: u32 = 65536;
pub const RTSIG_MAX: u32 = 32;
pub const _POSIX_THREAD_KEYS_MAX: u32 = 128;
pub const PTHREAD_KEYS_MAX: u32 = 1024;
pub const _POSIX_THREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const PTHREAD_DESTRUCTOR_ITERATIONS: u32 = 4;
pub const _POSIX_THREAD_THREADS_MAX: u32 = 64;
pub const AIO_PRIO_DELTA_MAX: u32 = 20;
pub const PTHREAD_STACK_MIN: u32 = 16384;
pub const DELAYTIMER_MAX: u32 = 2147483647;
pub const TTY_NAME_MAX: u32 = 32;
pub const LOGIN_NAME_MAX: u32 = 256;
pub const HOST_NAME_MAX: u32 = 64;
pub const MQ_PRIO_MAX: u32 = 32768;
pub const SEM_VALUE_MAX: u32 = 2147483647;
pub const _BITS_POSIX2_LIM_H: u32 = 1;
pub const _POSIX2_BC_BASE_MAX: u32 = 99;
pub const _POSIX2_BC_DIM_MAX: u32 = 2048;
pub const _POSIX2_BC_SCALE_MAX: u32 = 99;
pub const _POSIX2_BC_STRING_MAX: u32 = 1000;
pub const _POSIX2_COLL_WEIGHTS_MAX: u32 = 2;
pub const _POSIX2_EXPR_NEST_MAX: u32 = 32;
pub const _POSIX2_LINE_MAX: u32 = 2048;
pub const _POSIX2_RE_DUP_MAX: u32 = 255;
pub const _POSIX2_CHARCLASS_NAME_MAX: u32 = 14;
pub const BC_BASE_MAX: u32 = 99;
pub const BC_DIM_MAX: u32 = 2048;
pub const BC_SCALE_MAX: u32 = 99;
pub const BC_STRING_MAX: u32 = 1000;
pub const COLL_WEIGHTS_MAX: u32 = 255;
pub const EXPR_NEST_MAX: u32 = 32;
pub const LINE_MAX: u32 = 2048;
pub const CHARCLASS_NAME_MAX: u32 = 2048;
pub const RE_DUP_MAX: u32 = 32767;
pub const _INTTYPES_H: u32 = 1;
pub const _STDINT_H: u32 = 1;
pub const _BITS_WCHAR_H: u32 = 1;
pub const _BITS_STDINT_UINTN_H: u32 = 1;
pub const INT8_MIN: i32 = -128;
pub const INT16_MIN: i32 = -32768;
pub const INT32_MIN: i32 = -2147483648;
pub const INT8_MAX: u32 = 127;
pub const INT16_MAX: u32 = 32767;
pub const INT32_MAX: u32 = 2147483647;
pub const UINT8_MAX: u32 = 255;
pub const UINT16_MAX: u32 = 65535;
pub const UINT32_MAX: u32 = 4294967295;
pub const INT_LEAST8_MIN: i32 = -128;
pub const INT_LEAST16_MIN: i32 = -32768;
pub const INT_LEAST32_MIN: i32 = -2147483648;
pub const INT_LEAST8_MAX: u32 = 127;
pub const INT_LEAST16_MAX: u32 = 32767;
pub const INT_LEAST32_MAX: u32 = 2147483647;
pub const UINT_LEAST8_MAX: u32 = 255;
pub const UINT_LEAST16_MAX: u32 = 65535;
pub const UINT_LEAST32_MAX: u32 = 4294967295;
pub const INT_FAST8_MIN: i32 = -128;
pub const INT_FAST16_MIN: i64 = -9223372036854775808;
pub const INT_FAST32_MIN: i64 = -9223372036854775808;
pub const INT_FAST8_MAX: u32 = 127;
pub const INT_FAST16_MAX: u64 = 9223372036854775807;
pub const INT_FAST32_MAX: u64 = 9223372036854775807;
pub const UINT_FAST8_MAX: u32 = 255;
pub const UINT_FAST16_MAX: i32 = -1;
pub const UINT_FAST32_MAX: i32 = -1;
pub const INTPTR_MIN: i64 = -9223372036854775808;
pub const INTPTR_MAX: u64 = 9223372036854775807;
pub const UINTPTR_MAX: i32 = -1;
pub const PTRDIFF_MIN: i64 = -9223372036854775808;
pub const PTRDIFF_MAX: u64 = 9223372036854775807;
pub const SIG_ATOMIC_MIN: i32 = -2147483648;
pub const SIG_ATOMIC_MAX: u32 = 2147483647;
pub const SIZE_MAX: i32 = -1;
pub const WINT_MIN: u32 = 0;
pub const WINT_MAX: u32 = 4294967295;
pub const ____gwchar_t_defined: u32 = 1;
pub const __PRI64_PREFIX: &[u8; 2] = b"l\0";
pub const __PRIPTR_PREFIX: &[u8; 2] = b"l\0";
pub const PRId8: &[u8; 2] = b"d\0";
pub const PRId16: &[u8; 2] = b"d\0";
pub const PRId32: &[u8; 2] = b"d\0";
pub const PRId64: &[u8; 3] = b"ld\0";
pub const PRIdLEAST8: &[u8; 2] = b"d\0";
pub const PRIdLEAST16: &[u8; 2] = b"d\0";
pub const PRIdLEAST32: &[u8; 2] = b"d\0";
pub const PRIdLEAST64: &[u8; 3] = b"ld\0";
pub const PRIdFAST8: &[u8; 2] = b"d\0";
pub const PRIdFAST16: &[u8; 3] = b"ld\0";
pub const PRIdFAST32: &[u8; 3] = b"ld\0";
pub const PRIdFAST64: &[u8; 3] = b"ld\0";
pub const PRIi8: &[u8; 2] = b"i\0";
pub const PRIi16: &[u8; 2] = b"i\0";
pub const PRIi32: &[u8; 2] = b"i\0";
pub const PRIi64: &[u8; 3] = b"li\0";
pub const PRIiLEAST8: &[u8; 2] = b"i\0";
pub const PRIiLEAST16: &[u8; 2] = b"i\0";
pub const PRIiLEAST32: &[u8; 2] = b"i\0";
pub const PRIiLEAST64: &[u8; 3] = b"li\0";
pub const PRIiFAST8: &[u8; 2] = b"i\0";
pub const PRIiFAST16: &[u8; 3] = b"li\0";
pub const PRIiFAST32: &[u8; 3] = b"li\0";
pub const PRIiFAST64: &[u8; 3] = b"li\0";
pub const PRIo8: &[u8; 2] = b"o\0";
pub const PRIo16: &[u8; 2] = b"o\0";
pub const PRIo32: &[u8; 2] = b"o\0";
pub const PRIo64: &[u8; 3] = b"lo\0";
pub const PRIoLEAST8: &[u8; 2] = b"o\0";
pub const PRIoLEAST16: &[u8; 2] = b"o\0";
pub const PRIoLEAST32: &[u8; 2] = b"o\0";
pub const PRIoLEAST64: &[u8; 3] = b"lo\0";
pub const PRIoFAST8: &[u8; 2] = b"o\0";
pub const PRIoFAST16: &[u8; 3] = b"lo\0";
pub const PRIoFAST32: &[u8; 3] = b"lo\0";
pub const PRIoFAST64: &[u8; 3] = b"lo\0";
pub const PRIu8: &[u8; 2] = b"u\0";
pub const PRIu16: &[u8; 2] = b"u\0";
pub const PRIu32: &[u8; 2] = b"u\0";
pub const PRIu64: &[u8; 3] = b"lu\0";
pub const PRIuLEAST8: &[u8; 2] = b"u\0";
pub const PRIuLEAST16: &[u8; 2] = b"u\0";
pub const PRIuLEAST32: &[u8; 2] = b"u\0";
pub const PRIuLEAST64: &[u8; 3] = b"lu\0";
pub const PRIuFAST8: &[u8; 2] = b"u\0";
pub const PRIuFAST16: &[u8; 3] = b"lu\0";
pub const PRIuFAST32: &[u8; 3] = b"lu\0";
pub const PRIuFAST64: &[u8; 3] = b"lu\0";
pub const PRIx8: &[u8; 2] = b"x\0";
pub const PRIx16: &[u8; 2] = b"x\0";
pub const PRIx32: &[u8; 2] = b"x\0";
pub const PRIx64: &[u8; 3] = b"lx\0";
pub const PRIxLEAST8: &[u8; 2] = b"x\0";
pub const PRIxLEAST16: &[u8; 2] = b"x\0";
pub const PRIxLEAST32: &[u8; 2] = b"x\0";
pub const PRIxLEAST64: &[u8; 3] = b"lx\0";
pub const PRIxFAST8: &[u8; 2] = b"x\0";
pub const PRIxFAST16: &[u8; 3] = b"lx\0";
pub const PRIxFAST32: &[u8; 3] = b"lx\0";
pub const PRIxFAST64: &[u8; 3] = b"lx\0";
pub const PRIX8: &[u8; 2] = b"X\0";
pub const PRIX16: &[u8; 2] = b"X\0";
pub const PRIX32: &[u8; 2] = b"X\0";
pub const PRIX64: &[u8; 3] = b"lX\0";
pub const PRIXLEAST8: &[u8; 2] = b"X\0";
pub const PRIXLEAST16: &[u8; 2] = b"X\0";
pub const PRIXLEAST32: &[u8; 2] = b"X\0";
pub const PRIXLEAST64: &[u8; 3] = b"lX\0";
pub const PRIXFAST8: &[u8; 2] = b"X\0";
pub const PRIXFAST16: &[u8; 3] = b"lX\0";
pub const PRIXFAST32: &[u8; 3] = b"lX\0";
pub const PRIXFAST64: &[u8; 3] = b"lX\0";
pub const PRIdMAX: &[u8; 3] = b"ld\0";
pub const PRIiMAX: &[u8; 3] = b"li\0";
pub const PRIoMAX: &[u8; 3] = b"lo\0";
pub const PRIuMAX: &[u8; 3] = b"lu\0";
pub const PRIxMAX: &[u8; 3] = b"lx\0";
pub const PRIXMAX: &[u8; 3] = b"lX\0";
pub const PRIdPTR: &[u8; 3] = b"ld\0";
pub const PRIiPTR: &[u8; 3] = b"li\0";
pub const PRIoPTR: &[u8; 3] = b"lo\0";
pub const PRIuPTR: &[u8; 3] = b"lu\0";
pub const PRIxPTR: &[u8; 3] = b"lx\0";
pub const PRIXPTR: &[u8; 3] = b"lX\0";
pub const SCNd8: &[u8; 4] = b"hhd\0";
pub const SCNd16: &[u8; 3] = b"hd\0";
pub const SCNd32: &[u8; 2] = b"d\0";
pub const SCNd64: &[u8; 3] = b"ld\0";
pub const SCNdLEAST8: &[u8; 4] = b"hhd\0";
pub const SCNdLEAST16: &[u8; 3] = b"hd\0";
pub const SCNdLEAST32: &[u8; 2] = b"d\0";
pub const SCNdLEAST64: &[u8; 3] = b"ld\0";
pub const SCNdFAST8: &[u8; 4] = b"hhd\0";
pub const SCNdFAST16: &[u8; 3] = b"ld\0";
pub const SCNdFAST32: &[u8; 3] = b"ld\0";
pub const SCNdFAST64: &[u8; 3] = b"ld\0";
pub const SCNi8: &[u8; 4] = b"hhi\0";
pub const SCNi16: &[u8; 3] = b"hi\0";
pub const SCNi32: &[u8; 2] = b"i\0";
pub const SCNi64: &[u8; 3] = b"li\0";
pub const SCNiLEAST8: &[u8; 4] = b"hhi\0";
pub const SCNiLEAST16: &[u8; 3] = b"hi\0";
pub const SCNiLEAST32: &[u8; 2] = b"i\0";
pub const SCNiLEAST64: &[u8; 3] = b"li\0";
pub const SCNiFAST8: &[u8; 4] = b"hhi\0";
pub const SCNiFAST16: &[u8; 3] = b"li\0";
pub const SCNiFAST32: &[u8; 3] = b"li\0";
pub const SCNiFAST64: &[u8; 3] = b"li\0";
pub const SCNu8: &[u8; 4] = b"hhu\0";
pub const SCNu16: &[u8; 3] = b"hu\0";
pub const SCNu32: &[u8; 2] = b"u\0";
pub const SCNu64: &[u8; 3] = b"lu\0";
pub const SCNuLEAST8: &[u8; 4] = b"hhu\0";
pub const SCNuLEAST16: &[u8; 3] = b"hu\0";
pub const SCNuLEAST32: &[u8; 2] = b"u\0";
pub const SCNuLEAST64: &[u8; 3] = b"lu\0";
pub const SCNuFAST8: &[u8; 4] = b"hhu\0";
pub const SCNuFAST16: &[u8; 3] = b"lu\0";
pub const SCNuFAST32: &[u8; 3] = b"lu\0";
pub const SCNuFAST64: &[u8; 3] = b"lu\0";
pub const SCNo8: &[u8; 4] = b"hho\0";
pub const SCNo16: &[u8; 3] = b"ho\0";
pub const SCNo32: &[u8; 2] = b"o\0";
pub const SCNo64: &[u8; 3] = b"lo\0";
pub const SCNoLEAST8: &[u8; 4] = b"hho\0";
pub const SCNoLEAST16: &[u8; 3] = b"ho\0";
pub const SCNoLEAST32: &[u8; 2] = b"o\0";
pub const SCNoLEAST64: &[u8; 3] = b"lo\0";
pub const SCNoFAST8: &[u8; 4] = b"hho\0";
pub const SCNoFAST16: &[u8; 3] = b"lo\0";
pub const SCNoFAST32: &[u8; 3] = b"lo\0";
pub const SCNoFAST64: &[u8; 3] = b"lo\0";
pub const SCNx8: &[u8; 4] = b"hhx\0";
pub const SCNx16: &[u8; 3] = b"hx\0";
pub const SCNx32: &[u8; 2] = b"x\0";
pub const SCNx64: &[u8; 3] = b"lx\0";
pub const SCNxLEAST8: &[u8; 4] = b"hhx\0";
pub const SCNxLEAST16: &[u8; 3] = b"hx\0";
pub const SCNxLEAST32: &[u8; 2] = b"x\0";
pub const SCNxLEAST64: &[u8; 3] = b"lx\0";
pub const SCNxFAST8: &[u8; 4] = b"hhx\0";
pub const SCNxFAST16: &[u8; 3] = b"lx\0";
pub const SCNxFAST32: &[u8; 3] = b"lx\0";
pub const SCNxFAST64: &[u8; 3] = b"lx\0";
pub const SCNdMAX: &[u8; 3] = b"ld\0";
pub const SCNiMAX: &[u8; 3] = b"li\0";
pub const SCNoMAX: &[u8; 3] = b"lo\0";
pub const SCNuMAX: &[u8; 3] = b"lu\0";
pub const SCNxMAX: &[u8; 3] = b"lx\0";
pub const SCNdPTR: &[u8; 3] = b"ld\0";
pub const SCNiPTR: &[u8; 3] = b"li\0";
pub const SCNoPTR: &[u8; 3] = b"lo\0";
pub const SCNuPTR: &[u8; 3] = b"lu\0";
pub const SCNxPTR: &[u8; 3] = b"lx\0";
pub const _NETINET_IN_H: u32 = 1;
pub const _SYS_SOCKET_H: u32 = 1;
pub const __iovec_defined: u32 = 1;
pub const PF_UNSPEC: u32 = 0;
pub const PF_LOCAL: u32 = 1;
pub const PF_UNIX: u32 = 1;
pub const PF_FILE: u32 = 1;
pub const PF_INET: u32 = 2;
pub const PF_AX25: u32 = 3;
pub const PF_IPX: u32 = 4;
pub const PF_APPLETALK: u32 = 5;
pub const PF_NETROM: u32 = 6;
pub const PF_BRIDGE: u32 = 7;
pub const PF_ATMPVC: u32 = 8;
pub const PF_X25: u32 = 9;
pub const PF_INET6: u32 = 10;
pub const PF_ROSE: u32 = 11;
pub const PF_DECnet: u32 = 12;
pub const PF_NETBEUI: u32 = 13;
pub const PF_SECURITY: u32 = 14;
pub const PF_KEY: u32 = 15;
pub const PF_NETLINK: u32 = 16;
pub const PF_ROUTE: u32 = 16;
pub const PF_PACKET: u32 = 17;
pub const PF_ASH: u32 = 18;
pub const PF_ECONET: u32 = 19;
pub const PF_ATMSVC: u32 = 20;
pub const PF_RDS: u32 = 21;
pub const PF_SNA: u32 = 22;
pub const PF_IRDA: u32 = 23;
pub const PF_PPPOX: u32 = 24;
pub const PF_WANPIPE: u32 = 25;
pub const PF_LLC: u32 = 26;
pub const PF_IB: u32 = 27;
pub const PF_MPLS: u32 = 28;
pub const PF_CAN: u32 = 29;
pub const PF_TIPC: u32 = 30;
pub const PF_BLUETOOTH: u32 = 31;
pub const PF_IUCV: u32 = 32;
pub const PF_RXRPC: u32 = 33;
pub const PF_ISDN: u32 = 34;
pub const PF_PHONET: u32 = 35;
pub const PF_IEEE802154: u32 = 36;
pub const PF_CAIF: u32 = 37;
pub const PF_ALG: u32 = 38;
pub const PF_NFC: u32 = 39;
pub const PF_VSOCK: u32 = 40;
pub const PF_KCM: u32 = 41;
pub const PF_QIPCRTR: u32 = 42;
pub const PF_SMC: u32 = 43;
pub const PF_XDP: u32 = 44;
pub const PF_MCTP: u32 = 45;
pub const PF_MAX: u32 = 46;
pub const AF_UNSPEC: u32 = 0;
pub const AF_LOCAL: u32 = 1;
pub const AF_UNIX: u32 = 1;
pub const AF_FILE: u32 = 1;
pub const AF_INET: u32 = 2;
pub const AF_AX25: u32 = 3;
pub const AF_IPX: u32 = 4;
pub const AF_APPLETALK: u32 = 5;
pub const AF_NETROM: u32 = 6;
pub const AF_BRIDGE: u32 = 7;
pub const AF_ATMPVC: u32 = 8;
pub const AF_X25: u32 = 9;
pub const AF_INET6: u32 = 10;
pub const AF_ROSE: u32 = 11;
pub const AF_DECnet: u32 = 12;
pub const AF_NETBEUI: u32 = 13;
pub const AF_SECURITY: u32 = 14;
pub const AF_KEY: u32 = 15;
pub const AF_NETLINK: u32 = 16;
pub const AF_ROUTE: u32 = 16;
pub const AF_PACKET: u32 = 17;
pub const AF_ASH: u32 = 18;
pub const AF_ECONET: u32 = 19;
pub const AF_ATMSVC: u32 = 20;
pub const AF_RDS: u32 = 21;
pub const AF_SNA: u32 = 22;
pub const AF_IRDA: u32 = 23;
pub const AF_PPPOX: u32 = 24;
pub const AF_WANPIPE: u32 = 25;
pub const AF_LLC: u32 = 26;
pub const AF_IB: u32 = 27;
pub const AF_MPLS: u32 = 28;
pub const AF_CAN: u32 = 29;
pub const AF_TIPC: u32 = 30;
pub const AF_BLUETOOTH: u32 = 31;
pub const AF_IUCV: u32 = 32;
pub const AF_RXRPC: u32 = 33;
pub const AF_ISDN: u32 = 34;
pub const AF_PHONET: u32 = 35;
pub const AF_IEEE802154: u32 = 36;
pub const AF_CAIF: u32 = 37;
pub const AF_ALG: u32 = 38;
pub const AF_NFC: u32 = 39;
pub const AF_VSOCK: u32 = 40;
pub const AF_KCM: u32 = 41;
pub const AF_QIPCRTR: u32 = 42;
pub const AF_SMC: u32 = 43;
pub const AF_XDP: u32 = 44;
pub const AF_MCTP: u32 = 45;
pub const AF_MAX: u32 = 46;
pub const SOL_RAW: u32 = 255;
pub const SOL_DECNET: u32 = 261;
pub const SOL_X25: u32 = 262;
pub const SOL_PACKET: u32 = 263;
pub const SOL_ATM: u32 = 264;
pub const SOL_AAL: u32 = 265;
pub const SOL_IRDA: u32 = 266;
pub const SOL_NETBEUI: u32 = 267;
pub const SOL_LLC: u32 = 268;
pub const SOL_DCCP: u32 = 269;
pub const SOL_NETLINK: u32 = 270;
pub const SOL_TIPC: u32 = 271;
pub const SOL_RXRPC: u32 = 272;
pub const SOL_PPPOL2TP: u32 = 273;
pub const SOL_BLUETOOTH: u32 = 274;
pub const SOL_PNPIPE: u32 = 275;
pub const SOL_RDS: u32 = 276;
pub const SOL_IUCV: u32 = 277;
pub const SOL_CAIF: u32 = 278;
pub const SOL_ALG: u32 = 279;
pub const SOL_NFC: u32 = 280;
pub const SOL_KCM: u32 = 281;
pub const SOL_TLS: u32 = 282;
pub const SOL_XDP: u32 = 283;
pub const SOMAXCONN: u32 = 4096;
pub const _BITS_SOCKADDR_H: u32 = 1;
pub const _SS_SIZE: u32 = 128;
pub const __BITS_PER_LONG: u32 = 64;
pub const FIOSETOWN: u32 = 35073;
pub const SIOCSPGRP: u32 = 35074;
pub const FIOGETOWN: u32 = 35075;
pub const SIOCGPGRP: u32 = 35076;
pub const SIOCATMARK: u32 = 35077;
pub const SIOCGSTAMP_OLD: u32 = 35078;
pub const SIOCGSTAMPNS_OLD: u32 = 35079;
pub const SOL_SOCKET: u32 = 1;
pub const SO_DEBUG: u32 = 1;
pub const SO_REUSEADDR: u32 = 2;
pub const SO_TYPE: u32 = 3;
pub const SO_ERROR: u32 = 4;
pub const SO_DONTROUTE: u32 = 5;
pub const SO_BROADCAST: u32 = 6;
pub const SO_SNDBUF: u32 = 7;
pub const SO_RCVBUF: u32 = 8;
pub const SO_SNDBUFFORCE: u32 = 32;
pub const SO_RCVBUFFORCE: u32 = 33;
pub const SO_KEEPALIVE: u32 = 9;
pub const SO_OOBINLINE: u32 = 10;
pub const SO_NO_CHECK: u32 = 11;
pub const SO_PRIORITY: u32 = 12;
pub const SO_LINGER: u32 = 13;
pub const SO_BSDCOMPAT: u32 = 14;
pub const SO_REUSEPORT: u32 = 15;
pub const SO_PASSCRED: u32 = 16;
pub const SO_PEERCRED: u32 = 17;
pub const SO_RCVLOWAT: u32 = 18;
pub const SO_SNDLOWAT: u32 = 19;
pub const SO_RCVTIMEO_OLD: u32 = 20;
pub const SO_SNDTIMEO_OLD: u32 = 21;
pub const SO_SECURITY_AUTHENTICATION: u32 = 22;
pub const SO_SECURITY_ENCRYPTION_TRANSPORT: u32 = 23;
pub const SO_SECURITY_ENCRYPTION_NETWORK: u32 = 24;
pub const SO_BINDTODEVICE: u32 = 25;
pub const SO_ATTACH_FILTER: u32 = 26;
pub const SO_DETACH_FILTER: u32 = 27;
pub const SO_GET_FILTER: u32 = 26;
pub const SO_PEERNAME: u32 = 28;
pub const SO_ACCEPTCONN: u32 = 30;
pub const SO_PEERSEC: u32 = 31;
pub const SO_PASSSEC: u32 = 34;
pub const SO_MARK: u32 = 36;
pub const SO_PROTOCOL: u32 = 38;
pub const SO_DOMAIN: u32 = 39;
pub const SO_RXQ_OVFL: u32 = 40;
pub const SO_WIFI_STATUS: u32 = 41;
pub const SCM_WIFI_STATUS: u32 = 41;
pub const SO_PEEK_OFF: u32 = 42;
pub const SO_NOFCS: u32 = 43;
pub const SO_LOCK_FILTER: u32 = 44;
pub const SO_SELECT_ERR_QUEUE: u32 = 45;
pub const SO_BUSY_POLL: u32 = 46;
pub const SO_MAX_PACING_RATE: u32 = 47;
pub const SO_BPF_EXTENSIONS: u32 = 48;
pub const SO_INCOMING_CPU: u32 = 49;
pub const SO_ATTACH_BPF: u32 = 50;
pub const SO_DETACH_BPF: u32 = 27;
pub const SO_ATTACH_REUSEPORT_CBPF: u32 = 51;
pub const SO_ATTACH_REUSEPORT_EBPF: u32 = 52;
pub const SO_CNX_ADVICE: u32 = 53;
pub const SCM_TIMESTAMPING_OPT_STATS: u32 = 54;
pub const SO_MEMINFO: u32 = 55;
pub const SO_INCOMING_NAPI_ID: u32 = 56;
pub const SO_COOKIE: u32 = 57;
pub const SCM_TIMESTAMPING_PKTINFO: u32 = 58;
pub const SO_PEERGROUPS: u32 = 59;
pub const SO_ZEROCOPY: u32 = 60;
pub const SO_TXTIME: u32 = 61;
pub const SCM_TXTIME: u32 = 61;
pub const SO_BINDTOIFINDEX: u32 = 62;
pub const SO_TIMESTAMP_OLD: u32 = 29;
pub const SO_TIMESTAMPNS_OLD: u32 = 35;
pub const SO_TIMESTAMPING_OLD: u32 = 37;
pub const SO_TIMESTAMP_NEW: u32 = 63;
pub const SO_TIMESTAMPNS_NEW: u32 = 64;
pub const SO_TIMESTAMPING_NEW: u32 = 65;
pub const SO_RCVTIMEO_NEW: u32 = 66;
pub const SO_SNDTIMEO_NEW: u32 = 67;
pub const SO_DETACH_REUSEPORT_BPF: u32 = 68;
pub const SO_PREFER_BUSY_POLL: u32 = 69;
pub const SO_BUSY_POLL_BUDGET: u32 = 70;
pub const SO_NETNS_COOKIE: u32 = 71;
pub const SO_BUF_LOCK: u32 = 72;
pub const SO_TIMESTAMP: u32 = 29;
pub const SO_TIMESTAMPNS: u32 = 35;
pub const SO_TIMESTAMPING: u32 = 37;
pub const SO_RCVTIMEO: u32 = 20;
pub const SO_SNDTIMEO: u32 = 21;
pub const SCM_TIMESTAMP: u32 = 29;
pub const SCM_TIMESTAMPNS: u32 = 35;
pub const SCM_TIMESTAMPING: u32 = 37;
pub const __osockaddr_defined: u32 = 1;
pub const __USE_KERNEL_IPV6_DEFS: u32 = 0;
pub const IP_OPTIONS: u32 = 4;
pub const IP_HDRINCL: u32 = 3;
pub const IP_TOS: u32 = 1;
pub const IP_TTL: u32 = 2;
pub const IP_RECVOPTS: u32 = 6;
pub const IP_RETOPTS: u32 = 7;
pub const IP_MULTICAST_IF: u32 = 32;
pub const IP_MULTICAST_TTL: u32 = 33;
pub const IP_MULTICAST_LOOP: u32 = 34;
pub const IP_ADD_MEMBERSHIP: u32 = 35;
pub const IP_DROP_MEMBERSHIP: u32 = 36;
pub const IP_UNBLOCK_SOURCE: u32 = 37;
pub const IP_BLOCK_SOURCE: u32 = 38;
pub const IP_ADD_SOURCE_MEMBERSHIP: u32 = 39;
pub const IP_DROP_SOURCE_MEMBERSHIP: u32 = 40;
pub const IP_MSFILTER: u32 = 41;
pub const MCAST_JOIN_GROUP: u32 = 42;
pub const MCAST_BLOCK_SOURCE: u32 = 43;
pub const MCAST_UNBLOCK_SOURCE: u32 = 44;
pub const MCAST_LEAVE_GROUP: u32 = 45;
pub const MCAST_JOIN_SOURCE_GROUP: u32 = 46;
pub const MCAST_LEAVE_SOURCE_GROUP: u32 = 47;
pub const MCAST_MSFILTER: u32 = 48;
pub const IP_MULTICAST_ALL: u32 = 49;
pub const IP_UNICAST_IF: u32 = 50;
pub const MCAST_EXCLUDE: u32 = 0;
pub const MCAST_INCLUDE: u32 = 1;
pub const IP_ROUTER_ALERT: u32 = 5;
pub const IP_PKTINFO: u32 = 8;
pub const IP_PKTOPTIONS: u32 = 9;
pub const IP_PMTUDISC: u32 = 10;
pub const IP_MTU_DISCOVER: u32 = 10;
pub const IP_RECVERR: u32 = 11;
pub const IP_RECVTTL: u32 = 12;
pub const IP_RECVTOS: u32 = 13;
pub const IP_MTU: u32 = 14;
pub const IP_FREEBIND: u32 = 15;
pub const IP_IPSEC_POLICY: u32 = 16;
pub const IP_XFRM_POLICY: u32 = 17;
pub const IP_PASSSEC: u32 = 18;
pub const IP_TRANSPARENT: u32 = 19;
pub const IP_ORIGDSTADDR: u32 = 20;
pub const IP_RECVORIGDSTADDR: u32 = 20;
pub const IP_MINTTL: u32 = 21;
pub const IP_NODEFRAG: u32 = 22;
pub const IP_CHECKSUM: u32 = 23;
pub const IP_BIND_ADDRESS_NO_PORT: u32 = 24;
pub const IP_RECVFRAGSIZE: u32 = 25;
pub const IP_RECVERR_RFC4884: u32 = 26;
pub const IP_PMTUDISC_DONT: u32 = 0;
pub const IP_PMTUDISC_WANT: u32 = 1;
pub const IP_PMTUDISC_DO: u32 = 2;
pub const IP_PMTUDISC_PROBE: u32 = 3;
pub const IP_PMTUDISC_INTERFACE: u32 = 4;
pub const IP_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IP: u32 = 0;
pub const IP_DEFAULT_MULTICAST_TTL: u32 = 1;
pub const IP_DEFAULT_MULTICAST_LOOP: u32 = 1;
pub const IP_MAX_MEMBERSHIPS: u32 = 20;
pub const IPV6_ADDRFORM: u32 = 1;
pub const IPV6_2292PKTINFO: u32 = 2;
pub const IPV6_2292HOPOPTS: u32 = 3;
pub const IPV6_2292DSTOPTS: u32 = 4;
pub const IPV6_2292RTHDR: u32 = 5;
pub const IPV6_2292PKTOPTIONS: u32 = 6;
pub const IPV6_CHECKSUM: u32 = 7;
pub const IPV6_2292HOPLIMIT: u32 = 8;
pub const IPV6_NEXTHOP: u32 = 9;
pub const IPV6_AUTHHDR: u32 = 10;
pub const IPV6_UNICAST_HOPS: u32 = 16;
pub const IPV6_MULTICAST_IF: u32 = 17;
pub const IPV6_MULTICAST_HOPS: u32 = 18;
pub const IPV6_MULTICAST_LOOP: u32 = 19;
pub const IPV6_JOIN_GROUP: u32 = 20;
pub const IPV6_LEAVE_GROUP: u32 = 21;
pub const IPV6_ROUTER_ALERT: u32 = 22;
pub const IPV6_MTU_DISCOVER: u32 = 23;
pub const IPV6_MTU: u32 = 24;
pub const IPV6_RECVERR: u32 = 25;
pub const IPV6_V6ONLY: u32 = 26;
pub const IPV6_JOIN_ANYCAST: u32 = 27;
pub const IPV6_LEAVE_ANYCAST: u32 = 28;
pub const IPV6_MULTICAST_ALL: u32 = 29;
pub const IPV6_ROUTER_ALERT_ISOLATE: u32 = 30;
pub const IPV6_RECVERR_RFC4884: u32 = 31;
pub const IPV6_IPSEC_POLICY: u32 = 34;
pub const IPV6_XFRM_POLICY: u32 = 35;
pub const IPV6_HDRINCL: u32 = 36;
pub const IPV6_RECVPKTINFO: u32 = 49;
pub const IPV6_PKTINFO: u32 = 50;
pub const IPV6_RECVHOPLIMIT: u32 = 51;
pub const IPV6_HOPLIMIT: u32 = 52;
pub const IPV6_RECVHOPOPTS: u32 = 53;
pub const IPV6_HOPOPTS: u32 = 54;
pub const IPV6_RTHDRDSTOPTS: u32 = 55;
pub const IPV6_RECVRTHDR: u32 = 56;
pub const IPV6_RTHDR: u32 = 57;
pub const IPV6_RECVDSTOPTS: u32 = 58;
pub const IPV6_DSTOPTS: u32 = 59;
pub const IPV6_RECVPATHMTU: u32 = 60;
pub const IPV6_PATHMTU: u32 = 61;
pub const IPV6_DONTFRAG: u32 = 62;
pub const IPV6_RECVTCLASS: u32 = 66;
pub const IPV6_TCLASS: u32 = 67;
pub const IPV6_AUTOFLOWLABEL: u32 = 70;
pub const IPV6_ADDR_PREFERENCES: u32 = 72;
pub const IPV6_MINHOPCOUNT: u32 = 73;
pub const IPV6_ORIGDSTADDR: u32 = 74;
pub const IPV6_RECVORIGDSTADDR: u32 = 74;
pub const IPV6_TRANSPARENT: u32 = 75;
pub const IPV6_UNICAST_IF: u32 = 76;
pub const IPV6_RECVFRAGSIZE: u32 = 77;
pub const IPV6_FREEBIND: u32 = 78;
pub const IPV6_ADD_MEMBERSHIP: u32 = 20;
pub const IPV6_DROP_MEMBERSHIP: u32 = 21;
pub const IPV6_RXHOPOPTS: u32 = 54;
pub const IPV6_RXDSTOPTS: u32 = 59;
pub const IPV6_PMTUDISC_DONT: u32 = 0;
pub const IPV6_PMTUDISC_WANT: u32 = 1;
pub const IPV6_PMTUDISC_DO: u32 = 2;
pub const IPV6_PMTUDISC_PROBE: u32 = 3;
pub const IPV6_PMTUDISC_INTERFACE: u32 = 4;
pub const IPV6_PMTUDISC_OMIT: u32 = 5;
pub const SOL_IPV6: u32 = 41;
pub const SOL_ICMPV6: u32 = 58;
pub const IPV6_RTHDR_LOOSE: u32 = 0;
pub const IPV6_RTHDR_STRICT: u32 = 1;
pub const IPV6_RTHDR_TYPE_0: u32 = 0;
pub const IN_CLASSA_NET: u32 = 4278190080;
pub const IN_CLASSA_NSHIFT: u32 = 24;
pub const IN_CLASSA_HOST: u32 = 16777215;
pub const IN_CLASSA_MAX: u32 = 128;
pub const IN_CLASSB_NET: u32 = 4294901760;
pub const IN_CLASSB_NSHIFT: u32 = 16;
pub const IN_CLASSB_HOST: u32 = 65535;
pub const IN_CLASSB_MAX: u32 = 65536;
pub const IN_CLASSC_NET: u32 = 4294967040;
pub const IN_CLASSC_NSHIFT: u32 = 8;
pub const IN_CLASSC_HOST: u32 = 255;
pub const IN_LOOPBACKNET: u32 = 127;
pub const INET_ADDRSTRLEN: u32 = 16;
pub const INET6_ADDRSTRLEN: u32 = 46;
pub const RSIZE_MAX: i32 = -1;
pub const ASN_PRI_SIZE: &[u8; 3] = b"zu\0";
pub const ASN_PRI_SSIZE: &[u8; 3] = b"zd\0";
pub const ASN_PRIuMAX: &[u8; 3] = b"lu\0";
pub const ASN_PRIdMAX: &[u8; 3] = b"ld\0";
pub const _ASSERT_H: u32 = 1;
pub const ASN1C_ENVIRONMENT_VERSION: u32 = 923;
pub const asn_debug_indent: u32 = 0;
pub const ASN__DEFAULT_STACK_MAX: u32 = 30000;
pub type __u_char = ::std::os::raw::c_uchar;
pub type __u_short = ::std::os::raw::c_ushort;
pub type __u_int = ::std::os::raw::c_uint;
pub type __u_long = ::std::os::raw::c_ulong;
pub type __int8_t = ::std::os::raw::c_schar;
pub type __uint8_t = ::std::os::raw::c_uchar;
pub type __int16_t = ::std::os::raw::c_short;
pub type __uint16_t = ::std::os::raw::c_ushort;
pub type __int32_t = ::std::os::raw::c_int;
pub type __uint32_t = ::std::os::raw::c_uint;
pub type __int64_t = ::std::os::raw::c_long;
pub type __uint64_t = ::std::os::raw::c_ulong;
pub type __int_least8_t = __int8_t;
pub type __uint_least8_t = __uint8_t;
pub type __int_least16_t = __int16_t;
pub type __uint_least16_t = __uint16_t;
pub type __int_least32_t = __int32_t;
pub type __uint_least32_t = __uint32_t;
pub type __int_least64_t = __int64_t;
pub type __uint_least64_t = __uint64_t;
pub type __quad_t = ::std::os::raw::c_long;
pub type __u_quad_t = ::std::os::raw::c_ulong;
pub type __intmax_t = ::std::os::raw::c_long;
pub type __uintmax_t = ::std::os::raw::c_ulong;
pub type __dev_t = ::std::os::raw::c_ulong;
pub type __uid_t = ::std::os::raw::c_uint;
pub type __gid_t = ::std::os::raw::c_uint;
pub type __ino_t = ::std::os::raw::c_ulong;
pub type __ino64_t = ::std::os::raw::c_ulong;
pub type __mode_t = ::std::os::raw::c_uint;
pub type __nlink_t = ::std::os::raw::c_ulong;
pub type __off_t = ::std::os::raw::c_long;
pub type __off64_t = ::std::os::raw::c_long;
pub type __pid_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __fsid_t {
    pub __val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __fsid_t"][::std::mem::size_of::<__fsid_t>() - 8usize];
    ["Alignment of __fsid_t"][::std::mem::align_of::<__fsid_t>() - 4usize];
    ["Offset of field: __fsid_t::__val"][::std::mem::offset_of!(__fsid_t, __val) - 0usize];
};
pub type __clock_t = ::std::os::raw::c_long;
pub type __rlim_t = ::std::os::raw::c_ulong;
pub type __rlim64_t = ::std::os::raw::c_ulong;
pub type __id_t = ::std::os::raw::c_uint;
pub type __time_t = ::std::os::raw::c_long;
pub type __useconds_t = ::std::os::raw::c_uint;
pub type __suseconds_t = ::std::os::raw::c_long;
pub type __suseconds64_t = ::std::os::raw::c_long;
pub type __daddr_t = ::std::os::raw::c_int;
pub type __key_t = ::std::os::raw::c_int;
pub type __clockid_t = ::std::os::raw::c_int;
pub type __timer_t = *mut ::std::os::raw::c_void;
pub type __blksize_t = ::std::os::raw::c_long;
pub type __blkcnt_t = ::std::os::raw::c_long;
pub type __blkcnt64_t = ::std::os::raw::c_long;
pub type __fsblkcnt_t = ::std::os::raw::c_ulong;
pub type __fsblkcnt64_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt_t = ::std::os::raw::c_ulong;
pub type __fsfilcnt64_t = ::std::os::raw::c_ulong;
pub type __fsword_t = ::std::os::raw::c_long;
pub type __ssize_t = ::std::os::raw::c_long;
pub type __syscall_slong_t = ::std::os::raw::c_long;
pub type __syscall_ulong_t = ::std::os::raw::c_ulong;
pub type __loff_t = __off64_t;
pub type __caddr_t = *mut ::std::os::raw::c_char;
pub type __intptr_t = ::std::os::raw::c_long;
pub type __socklen_t = ::std::os::raw::c_uint;
pub type __sig_atomic_t = ::std::os::raw::c_int;
pub type u_char = __u_char;
pub type u_short = __u_short;
pub type u_int = __u_int;
pub type u_long = __u_long;
pub type quad_t = __quad_t;
pub type u_quad_t = __u_quad_t;
pub type fsid_t = __fsid_t;
pub type loff_t = __loff_t;
pub type ino_t = __ino_t;
pub type dev_t = __dev_t;
pub type gid_t = __gid_t;
pub type mode_t = __mode_t;
pub type nlink_t = __nlink_t;
pub type uid_t = __uid_t;
pub type off_t = __off_t;
pub type pid_t = __pid_t;
pub type id_t = __id_t;
pub type daddr_t = __daddr_t;
pub type caddr_t = __caddr_t;
pub type key_t = __key_t;
pub type clock_t = __clock_t;
pub type clockid_t = __clockid_t;
pub type time_t = __time_t;
pub type timer_t = __timer_t;
pub type ulong = ::std::os::raw::c_ulong;
pub type ushort = ::std::os::raw::c_ushort;
pub type uint = ::std::os::raw::c_uint;
pub type u_int8_t = __uint8_t;
pub type u_int16_t = __uint16_t;
pub type u_int32_t = __uint32_t;
pub type u_int64_t = __uint64_t;
pub type register_t = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __sigset_t {
    pub __val: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __sigset_t"][::std::mem::size_of::<__sigset_t>() - 128usize];
    ["Alignment of __sigset_t"][::std::mem::align_of::<__sigset_t>() - 8usize];
    ["Offset of field: __sigset_t::__val"][::std::mem::offset_of!(__sigset_t, __val) - 0usize];
};
pub type sigset_t = __sigset_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timeval {
    pub tv_sec: __time_t,
    pub tv_usec: __suseconds_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timeval"][::std::mem::size_of::<timeval>() - 16usize];
    ["Alignment of timeval"][::std::mem::align_of::<timeval>() - 8usize];
    ["Offset of field: timeval::tv_sec"][::std::mem::offset_of!(timeval, tv_sec) - 0usize];
    ["Offset of field: timeval::tv_usec"][::std::mem::offset_of!(timeval, tv_usec) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct timespec {
    pub tv_sec: __time_t,
    pub tv_nsec: __syscall_slong_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of timespec"][::std::mem::size_of::<timespec>() - 16usize];
    ["Alignment of timespec"][::std::mem::align_of::<timespec>() - 8usize];
    ["Offset of field: timespec::tv_sec"][::std::mem::offset_of!(timespec, tv_sec) - 0usize];
    ["Offset of field: timespec::tv_nsec"][::std::mem::offset_of!(timespec, tv_nsec) - 8usize];
};
pub type suseconds_t = __suseconds_t;
pub type __fd_mask = ::std::os::raw::c_long;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct fd_set {
    pub __fds_bits: [__fd_mask; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of fd_set"][::std::mem::size_of::<fd_set>() - 128usize];
    ["Alignment of fd_set"][::std::mem::align_of::<fd_set>() - 8usize];
    ["Offset of field: fd_set::__fds_bits"][::std::mem::offset_of!(fd_set, __fds_bits) - 0usize];
};
pub type fd_mask = __fd_mask;
unsafe extern "C" {
    pub fn select(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *mut timeval,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pselect(
        __nfds: ::std::os::raw::c_int,
        __readfds: *mut fd_set,
        __writefds: *mut fd_set,
        __exceptfds: *mut fd_set,
        __timeout: *const timespec,
        __sigmask: *const __sigset_t,
    ) -> ::std::os::raw::c_int;
}
pub type blksize_t = __blksize_t;
pub type blkcnt_t = __blkcnt_t;
pub type fsblkcnt_t = __fsblkcnt_t;
pub type fsfilcnt_t = __fsfilcnt_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub union __atomic_wide_counter {
    pub __value64: ::std::os::raw::c_ulonglong,
    pub __value32: __atomic_wide_counter__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __atomic_wide_counter__bindgen_ty_1 {
    pub __low: ::std::os::raw::c_uint,
    pub __high: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::size_of::<__atomic_wide_counter__bindgen_ty_1>() - 8usize];
    ["Alignment of __atomic_wide_counter__bindgen_ty_1"]
        [::std::mem::align_of::<__atomic_wide_counter__bindgen_ty_1>() - 4usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__low"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __low) - 0usize];
    ["Offset of field: __atomic_wide_counter__bindgen_ty_1::__high"]
        [::std::mem::offset_of!(__atomic_wide_counter__bindgen_ty_1, __high) - 4usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __atomic_wide_counter"][::std::mem::size_of::<__atomic_wide_counter>() - 8usize];
    ["Alignment of __atomic_wide_counter"]
        [::std::mem::align_of::<__atomic_wide_counter>() - 8usize];
    ["Offset of field: __atomic_wide_counter::__value64"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value64) - 0usize];
    ["Offset of field: __atomic_wide_counter::__value32"]
        [::std::mem::offset_of!(__atomic_wide_counter, __value32) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_list {
    pub __prev: *mut __pthread_internal_list,
    pub __next: *mut __pthread_internal_list,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_list"][::std::mem::size_of::<__pthread_internal_list>() - 16usize];
    ["Alignment of __pthread_internal_list"]
        [::std::mem::align_of::<__pthread_internal_list>() - 8usize];
    ["Offset of field: __pthread_internal_list::__prev"]
        [::std::mem::offset_of!(__pthread_internal_list, __prev) - 0usize];
    ["Offset of field: __pthread_internal_list::__next"]
        [::std::mem::offset_of!(__pthread_internal_list, __next) - 8usize];
};
pub type __pthread_list_t = __pthread_internal_list;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_internal_slist {
    pub __next: *mut __pthread_internal_slist,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_internal_slist"]
        [::std::mem::size_of::<__pthread_internal_slist>() - 8usize];
    ["Alignment of __pthread_internal_slist"]
        [::std::mem::align_of::<__pthread_internal_slist>() - 8usize];
    ["Offset of field: __pthread_internal_slist::__next"]
        [::std::mem::offset_of!(__pthread_internal_slist, __next) - 0usize];
};
pub type __pthread_slist_t = __pthread_internal_slist;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_mutex_s {
    pub __lock: ::std::os::raw::c_int,
    pub __count: ::std::os::raw::c_uint,
    pub __owner: ::std::os::raw::c_int,
    pub __nusers: ::std::os::raw::c_uint,
    pub __kind: ::std::os::raw::c_int,
    pub __spins: ::std::os::raw::c_short,
    pub __elision: ::std::os::raw::c_short,
    pub __list: __pthread_list_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_mutex_s"][::std::mem::size_of::<__pthread_mutex_s>() - 40usize];
    ["Alignment of __pthread_mutex_s"][::std::mem::align_of::<__pthread_mutex_s>() - 8usize];
    ["Offset of field: __pthread_mutex_s::__lock"]
        [::std::mem::offset_of!(__pthread_mutex_s, __lock) - 0usize];
    ["Offset of field: __pthread_mutex_s::__count"]
        [::std::mem::offset_of!(__pthread_mutex_s, __count) - 4usize];
    ["Offset of field: __pthread_mutex_s::__owner"]
        [::std::mem::offset_of!(__pthread_mutex_s, __owner) - 8usize];
    ["Offset of field: __pthread_mutex_s::__nusers"]
        [::std::mem::offset_of!(__pthread_mutex_s, __nusers) - 12usize];
    ["Offset of field: __pthread_mutex_s::__kind"]
        [::std::mem::offset_of!(__pthread_mutex_s, __kind) - 16usize];
    ["Offset of field: __pthread_mutex_s::__spins"]
        [::std::mem::offset_of!(__pthread_mutex_s, __spins) - 20usize];
    ["Offset of field: __pthread_mutex_s::__elision"]
        [::std::mem::offset_of!(__pthread_mutex_s, __elision) - 22usize];
    ["Offset of field: __pthread_mutex_s::__list"]
        [::std::mem::offset_of!(__pthread_mutex_s, __list) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __pthread_rwlock_arch_t {
    pub __readers: ::std::os::raw::c_uint,
    pub __writers: ::std::os::raw::c_uint,
    pub __wrphase_futex: ::std::os::raw::c_uint,
    pub __writers_futex: ::std::os::raw::c_uint,
    pub __pad3: ::std::os::raw::c_uint,
    pub __pad4: ::std::os::raw::c_uint,
    pub __cur_writer: ::std::os::raw::c_int,
    pub __shared: ::std::os::raw::c_int,
    pub __rwelision: ::std::os::raw::c_schar,
    pub __pad1: [::std::os::raw::c_uchar; 7usize],
    pub __pad2: ::std::os::raw::c_ulong,
    pub __flags: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_rwlock_arch_t"][::std::mem::size_of::<__pthread_rwlock_arch_t>() - 56usize];
    ["Alignment of __pthread_rwlock_arch_t"]
        [::std::mem::align_of::<__pthread_rwlock_arch_t>() - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__readers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __readers) - 0usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers) - 4usize];
    ["Offset of field: __pthread_rwlock_arch_t::__wrphase_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __wrphase_futex) - 8usize];
    ["Offset of field: __pthread_rwlock_arch_t::__writers_futex"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __writers_futex) - 12usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad3"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad3) - 16usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad4"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad4) - 20usize];
    ["Offset of field: __pthread_rwlock_arch_t::__cur_writer"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __cur_writer) - 24usize];
    ["Offset of field: __pthread_rwlock_arch_t::__shared"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __shared) - 28usize];
    ["Offset of field: __pthread_rwlock_arch_t::__rwelision"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __rwelision) - 32usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad1"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad1) - 33usize];
    ["Offset of field: __pthread_rwlock_arch_t::__pad2"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __pad2) - 40usize];
    ["Offset of field: __pthread_rwlock_arch_t::__flags"]
        [::std::mem::offset_of!(__pthread_rwlock_arch_t, __flags) - 48usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __pthread_cond_s {
    pub __wseq: __atomic_wide_counter,
    pub __g1_start: __atomic_wide_counter,
    pub __g_refs: [::std::os::raw::c_uint; 2usize],
    pub __g_size: [::std::os::raw::c_uint; 2usize],
    pub __g1_orig_size: ::std::os::raw::c_uint,
    pub __wrefs: ::std::os::raw::c_uint,
    pub __g_signals: [::std::os::raw::c_uint; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __pthread_cond_s"][::std::mem::size_of::<__pthread_cond_s>() - 48usize];
    ["Alignment of __pthread_cond_s"][::std::mem::align_of::<__pthread_cond_s>() - 8usize];
    ["Offset of field: __pthread_cond_s::__wseq"]
        [::std::mem::offset_of!(__pthread_cond_s, __wseq) - 0usize];
    ["Offset of field: __pthread_cond_s::__g1_start"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_start) - 8usize];
    ["Offset of field: __pthread_cond_s::__g_refs"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_refs) - 16usize];
    ["Offset of field: __pthread_cond_s::__g_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_size) - 24usize];
    ["Offset of field: __pthread_cond_s::__g1_orig_size"]
        [::std::mem::offset_of!(__pthread_cond_s, __g1_orig_size) - 32usize];
    ["Offset of field: __pthread_cond_s::__wrefs"]
        [::std::mem::offset_of!(__pthread_cond_s, __wrefs) - 36usize];
    ["Offset of field: __pthread_cond_s::__g_signals"]
        [::std::mem::offset_of!(__pthread_cond_s, __g_signals) - 40usize];
};
pub type __tss_t = ::std::os::raw::c_uint;
pub type __thrd_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __once_flag {
    pub __data: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __once_flag"][::std::mem::size_of::<__once_flag>() - 4usize];
    ["Alignment of __once_flag"][::std::mem::align_of::<__once_flag>() - 4usize];
    ["Offset of field: __once_flag::__data"][::std::mem::offset_of!(__once_flag, __data) - 0usize];
};
pub type pthread_t = ::std::os::raw::c_ulong;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutexattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutexattr_t"][::std::mem::size_of::<pthread_mutexattr_t>() - 4usize];
    ["Alignment of pthread_mutexattr_t"][::std::mem::align_of::<pthread_mutexattr_t>() - 4usize];
    ["Offset of field: pthread_mutexattr_t::__size"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __size) - 0usize];
    ["Offset of field: pthread_mutexattr_t::__align"]
        [::std::mem::offset_of!(pthread_mutexattr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_condattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_condattr_t"][::std::mem::size_of::<pthread_condattr_t>() - 4usize];
    ["Alignment of pthread_condattr_t"][::std::mem::align_of::<pthread_condattr_t>() - 4usize];
    ["Offset of field: pthread_condattr_t::__size"]
        [::std::mem::offset_of!(pthread_condattr_t, __size) - 0usize];
    ["Offset of field: pthread_condattr_t::__align"]
        [::std::mem::offset_of!(pthread_condattr_t, __align) - 0usize];
};
pub type pthread_key_t = ::std::os::raw::c_uint;
pub type pthread_once_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_attr_t {
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_attr_t"][::std::mem::size_of::<pthread_attr_t>() - 56usize];
    ["Alignment of pthread_attr_t"][::std::mem::align_of::<pthread_attr_t>() - 8usize];
    ["Offset of field: pthread_attr_t::__size"]
        [::std::mem::offset_of!(pthread_attr_t, __size) - 0usize];
    ["Offset of field: pthread_attr_t::__align"]
        [::std::mem::offset_of!(pthread_attr_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_mutex_t {
    pub __data: __pthread_mutex_s,
    pub __size: [::std::os::raw::c_char; 40usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_mutex_t"][::std::mem::size_of::<pthread_mutex_t>() - 40usize];
    ["Alignment of pthread_mutex_t"][::std::mem::align_of::<pthread_mutex_t>() - 8usize];
    ["Offset of field: pthread_mutex_t::__data"]
        [::std::mem::offset_of!(pthread_mutex_t, __data) - 0usize];
    ["Offset of field: pthread_mutex_t::__size"]
        [::std::mem::offset_of!(pthread_mutex_t, __size) - 0usize];
    ["Offset of field: pthread_mutex_t::__align"]
        [::std::mem::offset_of!(pthread_mutex_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_cond_t {
    pub __data: __pthread_cond_s,
    pub __size: [::std::os::raw::c_char; 48usize],
    pub __align: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_cond_t"][::std::mem::size_of::<pthread_cond_t>() - 48usize];
    ["Alignment of pthread_cond_t"][::std::mem::align_of::<pthread_cond_t>() - 8usize];
    ["Offset of field: pthread_cond_t::__data"]
        [::std::mem::offset_of!(pthread_cond_t, __data) - 0usize];
    ["Offset of field: pthread_cond_t::__size"]
        [::std::mem::offset_of!(pthread_cond_t, __size) - 0usize];
    ["Offset of field: pthread_cond_t::__align"]
        [::std::mem::offset_of!(pthread_cond_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlock_t {
    pub __data: __pthread_rwlock_arch_t,
    pub __size: [::std::os::raw::c_char; 56usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlock_t"][::std::mem::size_of::<pthread_rwlock_t>() - 56usize];
    ["Alignment of pthread_rwlock_t"][::std::mem::align_of::<pthread_rwlock_t>() - 8usize];
    ["Offset of field: pthread_rwlock_t::__data"]
        [::std::mem::offset_of!(pthread_rwlock_t, __data) - 0usize];
    ["Offset of field: pthread_rwlock_t::__size"]
        [::std::mem::offset_of!(pthread_rwlock_t, __size) - 0usize];
    ["Offset of field: pthread_rwlock_t::__align"]
        [::std::mem::offset_of!(pthread_rwlock_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_rwlockattr_t {
    pub __size: [::std::os::raw::c_char; 8usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_rwlockattr_t"][::std::mem::size_of::<pthread_rwlockattr_t>() - 8usize];
    ["Alignment of pthread_rwlockattr_t"][::std::mem::align_of::<pthread_rwlockattr_t>() - 8usize];
    ["Offset of field: pthread_rwlockattr_t::__size"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __size) - 0usize];
    ["Offset of field: pthread_rwlockattr_t::__align"]
        [::std::mem::offset_of!(pthread_rwlockattr_t, __align) - 0usize];
};
pub type pthread_spinlock_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrier_t {
    pub __size: [::std::os::raw::c_char; 32usize],
    pub __align: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrier_t"][::std::mem::size_of::<pthread_barrier_t>() - 32usize];
    ["Alignment of pthread_barrier_t"][::std::mem::align_of::<pthread_barrier_t>() - 8usize];
    ["Offset of field: pthread_barrier_t::__size"]
        [::std::mem::offset_of!(pthread_barrier_t, __size) - 0usize];
    ["Offset of field: pthread_barrier_t::__align"]
        [::std::mem::offset_of!(pthread_barrier_t, __align) - 0usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub union pthread_barrierattr_t {
    pub __size: [::std::os::raw::c_char; 4usize],
    pub __align: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of pthread_barrierattr_t"][::std::mem::size_of::<pthread_barrierattr_t>() - 4usize];
    ["Alignment of pthread_barrierattr_t"]
        [::std::mem::align_of::<pthread_barrierattr_t>() - 4usize];
    ["Offset of field: pthread_barrierattr_t::__size"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __size) - 0usize];
    ["Offset of field: pthread_barrierattr_t::__align"]
        [::std::mem::offset_of!(pthread_barrierattr_t, __align) - 0usize];
};
pub type va_list = __builtin_va_list;
pub type __gnuc_va_list = __builtin_va_list;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct __mbstate_t {
    pub __count: ::std::os::raw::c_int,
    pub __value: __mbstate_t__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union __mbstate_t__bindgen_ty_1 {
    pub __wch: ::std::os::raw::c_uint,
    pub __wchb: [::std::os::raw::c_char; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t__bindgen_ty_1"]
        [::std::mem::size_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Alignment of __mbstate_t__bindgen_ty_1"]
        [::std::mem::align_of::<__mbstate_t__bindgen_ty_1>() - 4usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wch"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wch) - 0usize];
    ["Offset of field: __mbstate_t__bindgen_ty_1::__wchb"]
        [::std::mem::offset_of!(__mbstate_t__bindgen_ty_1, __wchb) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __mbstate_t"][::std::mem::size_of::<__mbstate_t>() - 8usize];
    ["Alignment of __mbstate_t"][::std::mem::align_of::<__mbstate_t>() - 4usize];
    ["Offset of field: __mbstate_t::__count"]
        [::std::mem::offset_of!(__mbstate_t, __count) - 0usize];
    ["Offset of field: __mbstate_t::__value"]
        [::std::mem::offset_of!(__mbstate_t, __value) - 4usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos_t {
    pub __pos: __off_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos_t"][::std::mem::size_of::<_G_fpos_t>() - 16usize];
    ["Alignment of _G_fpos_t"][::std::mem::align_of::<_G_fpos_t>() - 8usize];
    ["Offset of field: _G_fpos_t::__pos"][::std::mem::offset_of!(_G_fpos_t, __pos) - 0usize];
    ["Offset of field: _G_fpos_t::__state"][::std::mem::offset_of!(_G_fpos_t, __state) - 8usize];
};
pub type __fpos_t = _G_fpos_t;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct _G_fpos64_t {
    pub __pos: __off64_t,
    pub __state: __mbstate_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _G_fpos64_t"][::std::mem::size_of::<_G_fpos64_t>() - 16usize];
    ["Alignment of _G_fpos64_t"][::std::mem::align_of::<_G_fpos64_t>() - 8usize];
    ["Offset of field: _G_fpos64_t::__pos"][::std::mem::offset_of!(_G_fpos64_t, __pos) - 0usize];
    ["Offset of field: _G_fpos64_t::__state"]
        [::std::mem::offset_of!(_G_fpos64_t, __state) - 8usize];
};
pub type __fpos64_t = _G_fpos64_t;
pub type __FILE = _IO_FILE;
pub type FILE = _IO_FILE;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_marker {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_codecvt {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_wide_data {
    _unused: [u8; 0],
}
pub type _IO_lock_t = ::std::os::raw::c_void;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct _IO_FILE {
    pub _flags: ::std::os::raw::c_int,
    pub _IO_read_ptr: *mut ::std::os::raw::c_char,
    pub _IO_read_end: *mut ::std::os::raw::c_char,
    pub _IO_read_base: *mut ::std::os::raw::c_char,
    pub _IO_write_base: *mut ::std::os::raw::c_char,
    pub _IO_write_ptr: *mut ::std::os::raw::c_char,
    pub _IO_write_end: *mut ::std::os::raw::c_char,
    pub _IO_buf_base: *mut ::std::os::raw::c_char,
    pub _IO_buf_end: *mut ::std::os::raw::c_char,
    pub _IO_save_base: *mut ::std::os::raw::c_char,
    pub _IO_backup_base: *mut ::std::os::raw::c_char,
    pub _IO_save_end: *mut ::std::os::raw::c_char,
    pub _markers: *mut _IO_marker,
    pub _chain: *mut _IO_FILE,
    pub _fileno: ::std::os::raw::c_int,
    pub _flags2: ::std::os::raw::c_int,
    pub _old_offset: __off_t,
    pub _cur_column: ::std::os::raw::c_ushort,
    pub _vtable_offset: ::std::os::raw::c_schar,
    pub _shortbuf: [::std::os::raw::c_char; 1usize],
    pub _lock: *mut _IO_lock_t,
    pub _offset: __off64_t,
    pub _codecvt: *mut _IO_codecvt,
    pub _wide_data: *mut _IO_wide_data,
    pub _freeres_list: *mut _IO_FILE,
    pub _freeres_buf: *mut ::std::os::raw::c_void,
    pub __pad5: usize,
    pub _mode: ::std::os::raw::c_int,
    pub _unused2: [::std::os::raw::c_char; 20usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of _IO_FILE"][::std::mem::size_of::<_IO_FILE>() - 216usize];
    ["Alignment of _IO_FILE"][::std::mem::align_of::<_IO_FILE>() - 8usize];
    ["Offset of field: _IO_FILE::_flags"][::std::mem::offset_of!(_IO_FILE, _flags) - 0usize];
    ["Offset of field: _IO_FILE::_IO_read_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_ptr) - 8usize];
    ["Offset of field: _IO_FILE::_IO_read_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_end) - 16usize];
    ["Offset of field: _IO_FILE::_IO_read_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_read_base) - 24usize];
    ["Offset of field: _IO_FILE::_IO_write_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_base) - 32usize];
    ["Offset of field: _IO_FILE::_IO_write_ptr"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_ptr) - 40usize];
    ["Offset of field: _IO_FILE::_IO_write_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_write_end) - 48usize];
    ["Offset of field: _IO_FILE::_IO_buf_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_base) - 56usize];
    ["Offset of field: _IO_FILE::_IO_buf_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_buf_end) - 64usize];
    ["Offset of field: _IO_FILE::_IO_save_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_base) - 72usize];
    ["Offset of field: _IO_FILE::_IO_backup_base"]
        [::std::mem::offset_of!(_IO_FILE, _IO_backup_base) - 80usize];
    ["Offset of field: _IO_FILE::_IO_save_end"]
        [::std::mem::offset_of!(_IO_FILE, _IO_save_end) - 88usize];
    ["Offset of field: _IO_FILE::_markers"][::std::mem::offset_of!(_IO_FILE, _markers) - 96usize];
    ["Offset of field: _IO_FILE::_chain"][::std::mem::offset_of!(_IO_FILE, _chain) - 104usize];
    ["Offset of field: _IO_FILE::_fileno"][::std::mem::offset_of!(_IO_FILE, _fileno) - 112usize];
    ["Offset of field: _IO_FILE::_flags2"][::std::mem::offset_of!(_IO_FILE, _flags2) - 116usize];
    ["Offset of field: _IO_FILE::_old_offset"]
        [::std::mem::offset_of!(_IO_FILE, _old_offset) - 120usize];
    ["Offset of field: _IO_FILE::_cur_column"]
        [::std::mem::offset_of!(_IO_FILE, _cur_column) - 128usize];
    ["Offset of field: _IO_FILE::_vtable_offset"]
        [::std::mem::offset_of!(_IO_FILE, _vtable_offset) - 130usize];
    ["Offset of field: _IO_FILE::_shortbuf"]
        [::std::mem::offset_of!(_IO_FILE, _shortbuf) - 131usize];
    ["Offset of field: _IO_FILE::_lock"][::std::mem::offset_of!(_IO_FILE, _lock) - 136usize];
    ["Offset of field: _IO_FILE::_offset"][::std::mem::offset_of!(_IO_FILE, _offset) - 144usize];
    ["Offset of field: _IO_FILE::_codecvt"][::std::mem::offset_of!(_IO_FILE, _codecvt) - 152usize];
    ["Offset of field: _IO_FILE::_wide_data"]
        [::std::mem::offset_of!(_IO_FILE, _wide_data) - 160usize];
    ["Offset of field: _IO_FILE::_freeres_list"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_list) - 168usize];
    ["Offset of field: _IO_FILE::_freeres_buf"]
        [::std::mem::offset_of!(_IO_FILE, _freeres_buf) - 176usize];
    ["Offset of field: _IO_FILE::__pad5"][::std::mem::offset_of!(_IO_FILE, __pad5) - 184usize];
    ["Offset of field: _IO_FILE::_mode"][::std::mem::offset_of!(_IO_FILE, _mode) - 192usize];
    ["Offset of field: _IO_FILE::_unused2"][::std::mem::offset_of!(_IO_FILE, _unused2) - 196usize];
};
pub type fpos_t = __fpos_t;
unsafe extern "C" {
    pub static mut stdin: *mut FILE;
}
unsafe extern "C" {
    pub static mut stdout: *mut FILE;
}
unsafe extern "C" {
    pub static mut stderr: *mut FILE;
}
unsafe extern "C" {
    pub fn remove(__filename: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rename(
        __old: *const ::std::os::raw::c_char,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn renameat(
        __oldfd: ::std::os::raw::c_int,
        __old: *const ::std::os::raw::c_char,
        __newfd: ::std::os::raw::c_int,
        __new: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn tmpfile() -> *mut FILE;
}
unsafe extern "C" {
    pub fn tmpnam(arg1: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tmpnam_r(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn tempnam(
        __dir: *const ::std::os::raw::c_char,
        __pfx: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fflush(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fflush_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn freopen(
        __filename: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
        __stream: *mut FILE,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn fdopen(__fd: ::std::os::raw::c_int, __modes: *const ::std::os::raw::c_char)
        -> *mut FILE;
}
unsafe extern "C" {
    pub fn fmemopen(
        __s: *mut ::std::os::raw::c_void,
        __len: usize,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn open_memstream(
        __bufloc: *mut *mut ::std::os::raw::c_char,
        __sizeloc: *mut usize,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn setbuf(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn setvbuf(
        __stream: *mut FILE,
        __buf: *mut ::std::os::raw::c_char,
        __modes: ::std::os::raw::c_int,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setbuffer(__stream: *mut FILE, __buf: *mut ::std::os::raw::c_char, __size: usize);
}
unsafe extern "C" {
    pub fn setlinebuf(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fprintf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn printf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfprintf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vprintf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsprintf(
        __s: *mut ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn snprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsnprintf(
        __s: *mut ::std::os::raw::c_char,
        __maxlen: ::std::os::raw::c_ulong,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vdprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn dprintf(
        __fd: ::std::os::raw::c_int,
        __fmt: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fscanf(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn scanf(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
pub type _Float32 = f32;
pub type _Float64 = f64;
pub type _Float32x = f64;
pub type _Float64x = u128;
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_fscanf"]
    pub fn fscanf1(
        __stream: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_scanf"]
    pub fn scanf1(__format: *const ::std::os::raw::c_char, ...) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_sscanf"]
    pub fn sscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        ...
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vfscanf(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vscanf(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn vsscanf(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vfscanf"]
    pub fn vfscanf1(
        __s: *mut FILE,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vscanf"]
    pub fn vscanf1(
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[link_name = "\u{1}__isoc99_vsscanf"]
    pub fn vsscanf1(
        __s: *const ::std::os::raw::c_char,
        __format: *const ::std::os::raw::c_char,
        __arg: *mut __va_list_tag,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getchar_unlocked() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgetc_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fputc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putc_unlocked(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putchar_unlocked(__c: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getw(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn putw(__w: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fgets(
        __s: *mut ::std::os::raw::c_char,
        __n: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getdelim(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __delimiter: ::std::os::raw::c_int,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn getline(
        __lineptr: *mut *mut ::std::os::raw::c_char,
        __n: *mut usize,
        __stream: *mut FILE,
    ) -> __ssize_t;
}
unsafe extern "C" {
    pub fn fputs(__s: *const ::std::os::raw::c_char, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn puts(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ungetc(__c: ::std::os::raw::c_int, __stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fread(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __stream: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fwrite(
        __ptr: *const ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
        __n: ::std::os::raw::c_ulong,
        __s: *mut FILE,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn fread_unlocked(
        __ptr: *mut ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fwrite_unlocked(
        __ptr: *const ::std::os::raw::c_void,
        __size: usize,
        __n: usize,
        __stream: *mut FILE,
    ) -> usize;
}
unsafe extern "C" {
    pub fn fseek(
        __stream: *mut FILE,
        __off: ::std::os::raw::c_long,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftell(__stream: *mut FILE) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn rewind(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn fseeko(
        __stream: *mut FILE,
        __off: __off_t,
        __whence: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ftello(__stream: *mut FILE) -> __off_t;
}
unsafe extern "C" {
    pub fn fgetpos(__stream: *mut FILE, __pos: *mut fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fsetpos(__stream: *mut FILE, __pos: *const fpos_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearerr_unlocked(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn feof_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ferror_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn perror(__s: *const ::std::os::raw::c_char);
}
unsafe extern "C" {
    pub fn fileno(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fileno_unlocked(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn pclose(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn popen(
        __command: *const ::std::os::raw::c_char,
        __modes: *const ::std::os::raw::c_char,
    ) -> *mut FILE;
}
unsafe extern "C" {
    pub fn ctermid(__s: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn flockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn ftrylockfile(__stream: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn funlockfile(__stream: *mut FILE);
}
unsafe extern "C" {
    pub fn __uflow(arg1: *mut FILE) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __overflow(arg1: *mut FILE, arg2: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
pub type wchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct div_t {
    pub quot: ::std::os::raw::c_int,
    pub rem: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of div_t"][::std::mem::size_of::<div_t>() - 8usize];
    ["Alignment of div_t"][::std::mem::align_of::<div_t>() - 4usize];
    ["Offset of field: div_t::quot"][::std::mem::offset_of!(div_t, quot) - 0usize];
    ["Offset of field: div_t::rem"][::std::mem::offset_of!(div_t, rem) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ldiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ldiv_t"][::std::mem::size_of::<ldiv_t>() - 16usize];
    ["Alignment of ldiv_t"][::std::mem::align_of::<ldiv_t>() - 8usize];
    ["Offset of field: ldiv_t::quot"][::std::mem::offset_of!(ldiv_t, quot) - 0usize];
    ["Offset of field: ldiv_t::rem"][::std::mem::offset_of!(ldiv_t, rem) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct lldiv_t {
    pub quot: ::std::os::raw::c_longlong,
    pub rem: ::std::os::raw::c_longlong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of lldiv_t"][::std::mem::size_of::<lldiv_t>() - 16usize];
    ["Alignment of lldiv_t"][::std::mem::align_of::<lldiv_t>() - 8usize];
    ["Offset of field: lldiv_t::quot"][::std::mem::offset_of!(lldiv_t, quot) - 0usize];
    ["Offset of field: lldiv_t::rem"][::std::mem::offset_of!(lldiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn __ctype_get_mb_cur_max() -> usize;
}
unsafe extern "C" {
    pub fn atof(__nptr: *const ::std::os::raw::c_char) -> f64;
}
unsafe extern "C" {
    pub fn atoi(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn atol(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn atoll(__nptr: *const ::std::os::raw::c_char) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtod(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f64;
}
unsafe extern "C" {
    pub fn strtof(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> f32;
}
unsafe extern "C" {
    pub fn strtold(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
    ) -> u128;
}
unsafe extern "C" {
    pub fn strtol(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn strtoul(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strtoq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtouq(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn strtoll(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn strtoull(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_ulonglong;
}
unsafe extern "C" {
    pub fn l64a(__n: ::std::os::raw::c_long) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn a64l(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn random() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srandom(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn initstate(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn setstate(__statebuf: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct random_data {
    pub fptr: *mut i32,
    pub rptr: *mut i32,
    pub state: *mut i32,
    pub rand_type: ::std::os::raw::c_int,
    pub rand_deg: ::std::os::raw::c_int,
    pub rand_sep: ::std::os::raw::c_int,
    pub end_ptr: *mut i32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of random_data"][::std::mem::size_of::<random_data>() - 48usize];
    ["Alignment of random_data"][::std::mem::align_of::<random_data>() - 8usize];
    ["Offset of field: random_data::fptr"][::std::mem::offset_of!(random_data, fptr) - 0usize];
    ["Offset of field: random_data::rptr"][::std::mem::offset_of!(random_data, rptr) - 8usize];
    ["Offset of field: random_data::state"][::std::mem::offset_of!(random_data, state) - 16usize];
    ["Offset of field: random_data::rand_type"]
        [::std::mem::offset_of!(random_data, rand_type) - 24usize];
    ["Offset of field: random_data::rand_deg"]
        [::std::mem::offset_of!(random_data, rand_deg) - 28usize];
    ["Offset of field: random_data::rand_sep"]
        [::std::mem::offset_of!(random_data, rand_sep) - 32usize];
    ["Offset of field: random_data::end_ptr"]
        [::std::mem::offset_of!(random_data, end_ptr) - 40usize];
};
unsafe extern "C" {
    pub fn random_r(__buf: *mut random_data, __result: *mut i32) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srandom_r(
        __seed: ::std::os::raw::c_uint,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn initstate_r(
        __seed: ::std::os::raw::c_uint,
        __statebuf: *mut ::std::os::raw::c_char,
        __statelen: usize,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setstate_r(
        __statebuf: *mut ::std::os::raw::c_char,
        __buf: *mut random_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn rand() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand(__seed: ::std::os::raw::c_uint);
}
unsafe extern "C" {
    pub fn rand_r(__seed: *mut ::std::os::raw::c_uint) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn drand48() -> f64;
}
unsafe extern "C" {
    pub fn erand48(__xsubi: *mut ::std::os::raw::c_ushort) -> f64;
}
unsafe extern "C" {
    pub fn lrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn nrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn mrand48() -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn jrand48(__xsubi: *mut ::std::os::raw::c_ushort) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn srand48(__seedval: ::std::os::raw::c_long);
}
unsafe extern "C" {
    pub fn seed48(__seed16v: *mut ::std::os::raw::c_ushort) -> *mut ::std::os::raw::c_ushort;
}
unsafe extern "C" {
    pub fn lcong48(__param: *mut ::std::os::raw::c_ushort);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct drand48_data {
    pub __x: [::std::os::raw::c_ushort; 3usize],
    pub __old_x: [::std::os::raw::c_ushort; 3usize],
    pub __c: ::std::os::raw::c_ushort,
    pub __init: ::std::os::raw::c_ushort,
    pub __a: ::std::os::raw::c_ulonglong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of drand48_data"][::std::mem::size_of::<drand48_data>() - 24usize];
    ["Alignment of drand48_data"][::std::mem::align_of::<drand48_data>() - 8usize];
    ["Offset of field: drand48_data::__x"][::std::mem::offset_of!(drand48_data, __x) - 0usize];
    ["Offset of field: drand48_data::__old_x"]
        [::std::mem::offset_of!(drand48_data, __old_x) - 6usize];
    ["Offset of field: drand48_data::__c"][::std::mem::offset_of!(drand48_data, __c) - 12usize];
    ["Offset of field: drand48_data::__init"]
        [::std::mem::offset_of!(drand48_data, __init) - 14usize];
    ["Offset of field: drand48_data::__a"][::std::mem::offset_of!(drand48_data, __a) - 16usize];
};
unsafe extern "C" {
    pub fn drand48_r(__buffer: *mut drand48_data, __result: *mut f64) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn erand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut f64,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn nrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mrand48_r(
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn jrand48_r(
        __xsubi: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
        __result: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn srand48_r(
        __seedval: ::std::os::raw::c_long,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn seed48_r(
        __seed16v: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn lcong48_r(
        __param: *mut ::std::os::raw::c_ushort,
        __buffer: *mut drand48_data,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn malloc(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn calloc(
        __nmemb: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn realloc(
        __ptr: *mut ::std::os::raw::c_void,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn free(__ptr: *mut ::std::os::raw::c_void);
}
unsafe extern "C" {
    pub fn reallocarray(
        __ptr: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn alloca(__size: ::std::os::raw::c_ulong) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn valloc(__size: usize) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn posix_memalign(
        __memptr: *mut *mut ::std::os::raw::c_void,
        __alignment: usize,
        __size: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn aligned_alloc(
        __alignment: ::std::os::raw::c_ulong,
        __size: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn abort() -> !;
}
unsafe extern "C" {
    pub fn atexit(__func: ::std::option::Option<unsafe extern "C" fn()>) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn at_quick_exit(
        __func: ::std::option::Option<unsafe extern "C" fn()>,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn on_exit(
        __func: ::std::option::Option<
            unsafe extern "C" fn(
                __status: ::std::os::raw::c_int,
                __arg: *mut ::std::os::raw::c_void,
            ),
        >,
        __arg: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn quick_exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn _Exit(__status: ::std::os::raw::c_int) -> !;
}
unsafe extern "C" {
    pub fn getenv(__name: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn putenv(__string: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setenv(
        __name: *const ::std::os::raw::c_char,
        __value: *const ::std::os::raw::c_char,
        __replace: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn unsetenv(__name: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn clearenv() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mktemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn mkstemp(__template: *mut ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkstemps(
        __template: *mut ::std::os::raw::c_char,
        __suffixlen: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mkdtemp(__template: *mut ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn system(__command: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn realpath(
        __name: *const ::std::os::raw::c_char,
        __resolved: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
pub type __compar_fn_t = ::std::option::Option<
    unsafe extern "C" fn(
        arg1: *const ::std::os::raw::c_void,
        arg2: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn bsearch(
        __key: *const ::std::os::raw::c_void,
        __base: *const ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn qsort(
        __base: *mut ::std::os::raw::c_void,
        __nmemb: usize,
        __size: usize,
        __compar: __compar_fn_t,
    );
}
unsafe extern "C" {
    pub fn abs(__x: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn labs(__x: ::std::os::raw::c_long) -> ::std::os::raw::c_long;
}
unsafe extern "C" {
    pub fn llabs(__x: ::std::os::raw::c_longlong) -> ::std::os::raw::c_longlong;
}
unsafe extern "C" {
    pub fn div(__numer: ::std::os::raw::c_int, __denom: ::std::os::raw::c_int) -> div_t;
}
unsafe extern "C" {
    pub fn ldiv(__numer: ::std::os::raw::c_long, __denom: ::std::os::raw::c_long) -> ldiv_t;
}
unsafe extern "C" {
    pub fn lldiv(
        __numer: ::std::os::raw::c_longlong,
        __denom: ::std::os::raw::c_longlong,
    ) -> lldiv_t;
}
unsafe extern "C" {
    pub fn ecvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn fcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn gcvt(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qecvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qfcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn qgcvt(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ecvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn fcvt_r(
        __value: f64,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qecvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn qfcvt_r(
        __value: u128,
        __ndigit: ::std::os::raw::c_int,
        __decpt: *mut ::std::os::raw::c_int,
        __sign: *mut ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __len: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mblen(__s: *const ::std::os::raw::c_char, __n: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbtowc(
        __pwc: *mut wchar_t,
        __s: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn wctomb(__s: *mut ::std::os::raw::c_char, __wchar: wchar_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn mbstowcs(__pwcs: *mut wchar_t, __s: *const ::std::os::raw::c_char, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn wcstombs(__s: *mut ::std::os::raw::c_char, __pwcs: *const wchar_t, __n: usize) -> usize;
}
unsafe extern "C" {
    pub fn rpmatch(__response: *const ::std::os::raw::c_char) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsubopt(
        __optionp: *mut *mut ::std::os::raw::c_char,
        __tokens: *const *mut ::std::os::raw::c_char,
        __valuep: *mut *mut ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getloadavg(__loadavg: *mut f64, __nelem: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memcpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memmove(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memccpy(
        __dest: *mut ::std::os::raw::c_void,
        __src: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memset(
        __s: *mut ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn memcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn __memcmpeq(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn memchr(
        __s: *const ::std::os::raw::c_void,
        __c: ::std::os::raw::c_int,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_void;
}
unsafe extern "C" {
    pub fn strcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strncat(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcoll(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_ulong;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_struct {
    pub __locales: [*mut __locale_data; 13usize],
    pub __ctype_b: *const ::std::os::raw::c_ushort,
    pub __ctype_tolower: *const ::std::os::raw::c_int,
    pub __ctype_toupper: *const ::std::os::raw::c_int,
    pub __names: [*const ::std::os::raw::c_char; 13usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __locale_struct"][::std::mem::size_of::<__locale_struct>() - 232usize];
    ["Alignment of __locale_struct"][::std::mem::align_of::<__locale_struct>() - 8usize];
    ["Offset of field: __locale_struct::__locales"]
        [::std::mem::offset_of!(__locale_struct, __locales) - 0usize];
    ["Offset of field: __locale_struct::__ctype_b"]
        [::std::mem::offset_of!(__locale_struct, __ctype_b) - 104usize];
    ["Offset of field: __locale_struct::__ctype_tolower"]
        [::std::mem::offset_of!(__locale_struct, __ctype_tolower) - 112usize];
    ["Offset of field: __locale_struct::__ctype_toupper"]
        [::std::mem::offset_of!(__locale_struct, __ctype_toupper) - 120usize];
    ["Offset of field: __locale_struct::__names"]
        [::std::mem::offset_of!(__locale_struct, __names) - 128usize];
};
pub type __locale_t = *mut __locale_struct;
pub type locale_t = __locale_t;
unsafe extern "C" {
    pub fn strcoll_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __l: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strxfrm_l(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
        __l: locale_t,
    ) -> usize;
}
unsafe extern "C" {
    pub fn strdup(__s: *const ::std::os::raw::c_char) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strndup(
        __string: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strrchr(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strcspn(
        __s: *const ::std::os::raw::c_char,
        __reject: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strspn(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strpbrk(
        __s: *const ::std::os::raw::c_char,
        __accept: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strstr(
        __haystack: *const ::std::os::raw::c_char,
        __needle: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strtok_r(
        __s: *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
        __save_ptr: *mut *mut ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strlen(__s: *const ::std::os::raw::c_char) -> ::std::os::raw::c_ulong;
}
unsafe extern "C" {
    pub fn strnlen(__string: *const ::std::os::raw::c_char, __maxlen: usize) -> usize;
}
unsafe extern "C" {
    pub fn strerror(__errnum: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    #[link_name = "\u{1}__xpg_strerror_r"]
    pub fn strerror_r(
        __errnum: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_char,
        __buflen: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strerror_l(
        __errnum: ::std::os::raw::c_int,
        __l: locale_t,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn bcmp(
        __s1: *const ::std::os::raw::c_void,
        __s2: *const ::std::os::raw::c_void,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bcopy(
        __src: *const ::std::os::raw::c_void,
        __dest: *mut ::std::os::raw::c_void,
        __n: usize,
    );
}
unsafe extern "C" {
    pub fn bzero(__s: *mut ::std::os::raw::c_void, __n: ::std::os::raw::c_ulong);
}
unsafe extern "C" {
    pub fn index(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn rindex(
        __s: *const ::std::os::raw::c_char,
        __c: ::std::os::raw::c_int,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ffs(__i: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsl(__l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ffsll(__ll: ::std::os::raw::c_longlong) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strcasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn strncasecmp_l(
        __s1: *const ::std::os::raw::c_char,
        __s2: *const ::std::os::raw::c_char,
        __n: usize,
        __loc: locale_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn explicit_bzero(__s: *mut ::std::os::raw::c_void, __n: usize);
}
unsafe extern "C" {
    pub fn strsep(
        __stringp: *mut *mut ::std::os::raw::c_char,
        __delim: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn strsignal(__sig: ::std::os::raw::c_int) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpcpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn __stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: usize,
    ) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn stpncpy(
        __dest: *mut ::std::os::raw::c_char,
        __src: *const ::std::os::raw::c_char,
        __n: ::std::os::raw::c_ulong,
    ) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[repr(align(16))]
#[derive(Debug, Copy, Clone)]
pub struct max_align_t {
    pub __clang_max_align_nonce1: ::std::os::raw::c_longlong,
    pub __bindgen_padding_0: u64,
    pub __clang_max_align_nonce2: u128,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of max_align_t"][::std::mem::size_of::<max_align_t>() - 32usize];
    ["Alignment of max_align_t"][::std::mem::align_of::<max_align_t>() - 16usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce1"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce1) - 0usize];
    ["Offset of field: max_align_t::__clang_max_align_nonce2"]
        [::std::mem::offset_of!(max_align_t, __clang_max_align_nonce2) - 16usize];
};
pub type int_least8_t = __int_least8_t;
pub type int_least16_t = __int_least16_t;
pub type int_least32_t = __int_least32_t;
pub type int_least64_t = __int_least64_t;
pub type uint_least8_t = __uint_least8_t;
pub type uint_least16_t = __uint_least16_t;
pub type uint_least32_t = __uint_least32_t;
pub type uint_least64_t = __uint_least64_t;
pub type int_fast8_t = ::std::os::raw::c_schar;
pub type int_fast16_t = ::std::os::raw::c_long;
pub type int_fast32_t = ::std::os::raw::c_long;
pub type int_fast64_t = ::std::os::raw::c_long;
pub type uint_fast8_t = ::std::os::raw::c_uchar;
pub type uint_fast16_t = ::std::os::raw::c_ulong;
pub type uint_fast32_t = ::std::os::raw::c_ulong;
pub type uint_fast64_t = ::std::os::raw::c_ulong;
pub type intmax_t = __intmax_t;
pub type uintmax_t = __uintmax_t;
pub type __gwchar_t = ::std::os::raw::c_int;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct imaxdiv_t {
    pub quot: ::std::os::raw::c_long,
    pub rem: ::std::os::raw::c_long,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of imaxdiv_t"][::std::mem::size_of::<imaxdiv_t>() - 16usize];
    ["Alignment of imaxdiv_t"][::std::mem::align_of::<imaxdiv_t>() - 8usize];
    ["Offset of field: imaxdiv_t::quot"][::std::mem::offset_of!(imaxdiv_t, quot) - 0usize];
    ["Offset of field: imaxdiv_t::rem"][::std::mem::offset_of!(imaxdiv_t, rem) - 8usize];
};
unsafe extern "C" {
    pub fn imaxabs(__n: intmax_t) -> intmax_t;
}
unsafe extern "C" {
    pub fn imaxdiv(__numer: intmax_t, __denom: intmax_t) -> imaxdiv_t;
}
unsafe extern "C" {
    pub fn strtoimax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn strtoumax(
        __nptr: *const ::std::os::raw::c_char,
        __endptr: *mut *mut ::std::os::raw::c_char,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
unsafe extern "C" {
    pub fn wcstoimax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> intmax_t;
}
unsafe extern "C" {
    pub fn wcstoumax(
        __nptr: *const __gwchar_t,
        __endptr: *mut *mut __gwchar_t,
        __base: ::std::os::raw::c_int,
    ) -> uintmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct iovec {
    pub iov_base: *mut ::std::os::raw::c_void,
    pub iov_len: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of iovec"][::std::mem::size_of::<iovec>() - 16usize];
    ["Alignment of iovec"][::std::mem::align_of::<iovec>() - 8usize];
    ["Offset of field: iovec::iov_base"][::std::mem::offset_of!(iovec, iov_base) - 0usize];
    ["Offset of field: iovec::iov_len"][::std::mem::offset_of!(iovec, iov_len) - 8usize];
};
pub type socklen_t = __socklen_t;
pub const __socket_type_SOCK_STREAM: __socket_type = 1;
pub const __socket_type_SOCK_DGRAM: __socket_type = 2;
pub const __socket_type_SOCK_RAW: __socket_type = 3;
pub const __socket_type_SOCK_RDM: __socket_type = 4;
pub const __socket_type_SOCK_SEQPACKET: __socket_type = 5;
pub const __socket_type_SOCK_DCCP: __socket_type = 6;
pub const __socket_type_SOCK_PACKET: __socket_type = 10;
pub const __socket_type_SOCK_CLOEXEC: __socket_type = 524288;
pub const __socket_type_SOCK_NONBLOCK: __socket_type = 2048;
pub type __socket_type = ::std::os::raw::c_uint;
pub type sa_family_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr {
    pub sa_family: sa_family_t,
    pub sa_data: [::std::os::raw::c_char; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr"][::std::mem::size_of::<sockaddr>() - 16usize];
    ["Alignment of sockaddr"][::std::mem::align_of::<sockaddr>() - 2usize];
    ["Offset of field: sockaddr::sa_family"][::std::mem::offset_of!(sockaddr, sa_family) - 0usize];
    ["Offset of field: sockaddr::sa_data"][::std::mem::offset_of!(sockaddr, sa_data) - 2usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_storage {
    pub ss_family: sa_family_t,
    pub __ss_padding: [::std::os::raw::c_char; 118usize],
    pub __ss_align: ::std::os::raw::c_ulong,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_storage"][::std::mem::size_of::<sockaddr_storage>() - 128usize];
    ["Alignment of sockaddr_storage"][::std::mem::align_of::<sockaddr_storage>() - 8usize];
    ["Offset of field: sockaddr_storage::ss_family"]
        [::std::mem::offset_of!(sockaddr_storage, ss_family) - 0usize];
    ["Offset of field: sockaddr_storage::__ss_padding"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_padding) - 2usize];
    ["Offset of field: sockaddr_storage::__ss_align"]
        [::std::mem::offset_of!(sockaddr_storage, __ss_align) - 120usize];
};
pub const MSG_OOB: _bindgen_ty_1 = 1;
pub const MSG_PEEK: _bindgen_ty_1 = 2;
pub const MSG_DONTROUTE: _bindgen_ty_1 = 4;
pub const MSG_CTRUNC: _bindgen_ty_1 = 8;
pub const MSG_PROXY: _bindgen_ty_1 = 16;
pub const MSG_TRUNC: _bindgen_ty_1 = 32;
pub const MSG_DONTWAIT: _bindgen_ty_1 = 64;
pub const MSG_EOR: _bindgen_ty_1 = 128;
pub const MSG_WAITALL: _bindgen_ty_1 = 256;
pub const MSG_FIN: _bindgen_ty_1 = 512;
pub const MSG_SYN: _bindgen_ty_1 = 1024;
pub const MSG_CONFIRM: _bindgen_ty_1 = 2048;
pub const MSG_RST: _bindgen_ty_1 = 4096;
pub const MSG_ERRQUEUE: _bindgen_ty_1 = 8192;
pub const MSG_NOSIGNAL: _bindgen_ty_1 = 16384;
pub const MSG_MORE: _bindgen_ty_1 = 32768;
pub const MSG_WAITFORONE: _bindgen_ty_1 = 65536;
pub const MSG_BATCH: _bindgen_ty_1 = 262144;
pub const MSG_ZEROCOPY: _bindgen_ty_1 = 67108864;
pub const MSG_FASTOPEN: _bindgen_ty_1 = 536870912;
pub const MSG_CMSG_CLOEXEC: _bindgen_ty_1 = 1073741824;
pub type _bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct msghdr {
    pub msg_name: *mut ::std::os::raw::c_void,
    pub msg_namelen: socklen_t,
    pub msg_iov: *mut iovec,
    pub msg_iovlen: usize,
    pub msg_control: *mut ::std::os::raw::c_void,
    pub msg_controllen: usize,
    pub msg_flags: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of msghdr"][::std::mem::size_of::<msghdr>() - 56usize];
    ["Alignment of msghdr"][::std::mem::align_of::<msghdr>() - 8usize];
    ["Offset of field: msghdr::msg_name"][::std::mem::offset_of!(msghdr, msg_name) - 0usize];
    ["Offset of field: msghdr::msg_namelen"][::std::mem::offset_of!(msghdr, msg_namelen) - 8usize];
    ["Offset of field: msghdr::msg_iov"][::std::mem::offset_of!(msghdr, msg_iov) - 16usize];
    ["Offset of field: msghdr::msg_iovlen"][::std::mem::offset_of!(msghdr, msg_iovlen) - 24usize];
    ["Offset of field: msghdr::msg_control"][::std::mem::offset_of!(msghdr, msg_control) - 32usize];
    ["Offset of field: msghdr::msg_controllen"]
        [::std::mem::offset_of!(msghdr, msg_controllen) - 40usize];
    ["Offset of field: msghdr::msg_flags"][::std::mem::offset_of!(msghdr, msg_flags) - 48usize];
};
#[repr(C)]
#[derive(Debug)]
pub struct cmsghdr {
    pub cmsg_len: usize,
    pub cmsg_level: ::std::os::raw::c_int,
    pub cmsg_type: ::std::os::raw::c_int,
    pub __cmsg_data: __IncompleteArrayField<::std::os::raw::c_uchar>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of cmsghdr"][::std::mem::size_of::<cmsghdr>() - 16usize];
    ["Alignment of cmsghdr"][::std::mem::align_of::<cmsghdr>() - 8usize];
    ["Offset of field: cmsghdr::cmsg_len"][::std::mem::offset_of!(cmsghdr, cmsg_len) - 0usize];
    ["Offset of field: cmsghdr::cmsg_level"][::std::mem::offset_of!(cmsghdr, cmsg_level) - 8usize];
    ["Offset of field: cmsghdr::cmsg_type"][::std::mem::offset_of!(cmsghdr, cmsg_type) - 12usize];
    ["Offset of field: cmsghdr::__cmsg_data"]
        [::std::mem::offset_of!(cmsghdr, __cmsg_data) - 16usize];
};
unsafe extern "C" {
    pub fn __cmsg_nxthdr(__mhdr: *mut msghdr, __cmsg: *mut cmsghdr) -> *mut cmsghdr;
}
pub const SCM_RIGHTS: _bindgen_ty_2 = 1;
pub type _bindgen_ty_2 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fd_set {
    pub fds_bits: [::std::os::raw::c_ulong; 16usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fd_set"][::std::mem::size_of::<__kernel_fd_set>() - 128usize];
    ["Alignment of __kernel_fd_set"][::std::mem::align_of::<__kernel_fd_set>() - 8usize];
    ["Offset of field: __kernel_fd_set::fds_bits"]
        [::std::mem::offset_of!(__kernel_fd_set, fds_bits) - 0usize];
};
pub type __kernel_sighandler_t =
    ::std::option::Option<unsafe extern "C" fn(arg1: ::std::os::raw::c_int)>;
pub type __kernel_key_t = ::std::os::raw::c_int;
pub type __kernel_mqd_t = ::std::os::raw::c_int;
pub type __kernel_old_uid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_gid_t = ::std::os::raw::c_ushort;
pub type __kernel_old_dev_t = ::std::os::raw::c_ulong;
pub type __kernel_long_t = ::std::os::raw::c_long;
pub type __kernel_ulong_t = ::std::os::raw::c_ulong;
pub type __kernel_ino_t = __kernel_ulong_t;
pub type __kernel_mode_t = ::std::os::raw::c_uint;
pub type __kernel_pid_t = ::std::os::raw::c_int;
pub type __kernel_ipc_pid_t = ::std::os::raw::c_int;
pub type __kernel_uid_t = ::std::os::raw::c_uint;
pub type __kernel_gid_t = ::std::os::raw::c_uint;
pub type __kernel_suseconds_t = __kernel_long_t;
pub type __kernel_daddr_t = ::std::os::raw::c_int;
pub type __kernel_uid32_t = ::std::os::raw::c_uint;
pub type __kernel_gid32_t = ::std::os::raw::c_uint;
pub type __kernel_size_t = __kernel_ulong_t;
pub type __kernel_ssize_t = __kernel_long_t;
pub type __kernel_ptrdiff_t = __kernel_long_t;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __kernel_fsid_t {
    pub val: [::std::os::raw::c_int; 2usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __kernel_fsid_t"][::std::mem::size_of::<__kernel_fsid_t>() - 8usize];
    ["Alignment of __kernel_fsid_t"][::std::mem::align_of::<__kernel_fsid_t>() - 4usize];
    ["Offset of field: __kernel_fsid_t::val"]
        [::std::mem::offset_of!(__kernel_fsid_t, val) - 0usize];
};
pub type __kernel_off_t = __kernel_long_t;
pub type __kernel_loff_t = ::std::os::raw::c_longlong;
pub type __kernel_old_time_t = __kernel_long_t;
pub type __kernel_time_t = __kernel_long_t;
pub type __kernel_time64_t = ::std::os::raw::c_longlong;
pub type __kernel_clock_t = __kernel_long_t;
pub type __kernel_timer_t = ::std::os::raw::c_int;
pub type __kernel_clockid_t = ::std::os::raw::c_int;
pub type __kernel_caddr_t = *mut ::std::os::raw::c_char;
pub type __kernel_uid16_t = ::std::os::raw::c_ushort;
pub type __kernel_gid16_t = ::std::os::raw::c_ushort;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct linger {
    pub l_onoff: ::std::os::raw::c_int,
    pub l_linger: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of linger"][::std::mem::size_of::<linger>() - 8usize];
    ["Alignment of linger"][::std::mem::align_of::<linger>() - 4usize];
    ["Offset of field: linger::l_onoff"][::std::mem::offset_of!(linger, l_onoff) - 0usize];
    ["Offset of field: linger::l_linger"][::std::mem::offset_of!(linger, l_linger) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct osockaddr {
    pub sa_family: ::std::os::raw::c_ushort,
    pub sa_data: [::std::os::raw::c_uchar; 14usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of osockaddr"][::std::mem::size_of::<osockaddr>() - 16usize];
    ["Alignment of osockaddr"][::std::mem::align_of::<osockaddr>() - 2usize];
    ["Offset of field: osockaddr::sa_family"]
        [::std::mem::offset_of!(osockaddr, sa_family) - 0usize];
    ["Offset of field: osockaddr::sa_data"][::std::mem::offset_of!(osockaddr, sa_data) - 2usize];
};
pub const SHUT_RD: _bindgen_ty_3 = 0;
pub const SHUT_WR: _bindgen_ty_3 = 1;
pub const SHUT_RDWR: _bindgen_ty_3 = 2;
pub type _bindgen_ty_3 = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn socket(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn socketpair(
        __domain: ::std::os::raw::c_int,
        __type: ::std::os::raw::c_int,
        __protocol: ::std::os::raw::c_int,
        __fds: *mut ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bind(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getsockname(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn connect(
        __fd: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __len: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn getpeername(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn send(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recv(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendto(
        __fd: ::std::os::raw::c_int,
        __buf: *const ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *const sockaddr,
        __addr_len: socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvfrom(
        __fd: ::std::os::raw::c_int,
        __buf: *mut ::std::os::raw::c_void,
        __n: usize,
        __flags: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn sendmsg(
        __fd: ::std::os::raw::c_int,
        __message: *const msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn recvmsg(
        __fd: ::std::os::raw::c_int,
        __message: *mut msghdr,
        __flags: ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn getsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *mut ::std::os::raw::c_void,
        __optlen: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn setsockopt(
        __fd: ::std::os::raw::c_int,
        __level: ::std::os::raw::c_int,
        __optname: ::std::os::raw::c_int,
        __optval: *const ::std::os::raw::c_void,
        __optlen: socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn listen(__fd: ::std::os::raw::c_int, __n: ::std::os::raw::c_int)
        -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn accept(
        __fd: ::std::os::raw::c_int,
        __addr: *mut sockaddr,
        __addr_len: *mut socklen_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn shutdown(
        __fd: ::std::os::raw::c_int,
        __how: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn sockatmark(__fd: ::std::os::raw::c_int) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn isfdtype(
        __fd: ::std::os::raw::c_int,
        __fdtype: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type in_addr_t = u32;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_addr {
    pub s_addr: in_addr_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_addr"][::std::mem::size_of::<in_addr>() - 4usize];
    ["Alignment of in_addr"][::std::mem::align_of::<in_addr>() - 4usize];
    ["Offset of field: in_addr::s_addr"][::std::mem::offset_of!(in_addr, s_addr) - 0usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_opts {
    pub ip_dst: in_addr,
    pub ip_opts: [::std::os::raw::c_char; 40usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_opts"][::std::mem::size_of::<ip_opts>() - 44usize];
    ["Alignment of ip_opts"][::std::mem::align_of::<ip_opts>() - 4usize];
    ["Offset of field: ip_opts::ip_dst"][::std::mem::offset_of!(ip_opts, ip_dst) - 0usize];
    ["Offset of field: ip_opts::ip_opts"][::std::mem::offset_of!(ip_opts, ip_opts) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreqn {
    pub imr_multiaddr: in_addr,
    pub imr_address: in_addr,
    pub imr_ifindex: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreqn"][::std::mem::size_of::<ip_mreqn>() - 12usize];
    ["Alignment of ip_mreqn"][::std::mem::align_of::<ip_mreqn>() - 4usize];
    ["Offset of field: ip_mreqn::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreqn, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreqn::imr_address"]
        [::std::mem::offset_of!(ip_mreqn, imr_address) - 4usize];
    ["Offset of field: ip_mreqn::imr_ifindex"]
        [::std::mem::offset_of!(ip_mreqn, imr_ifindex) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct in_pktinfo {
    pub ipi_ifindex: ::std::os::raw::c_int,
    pub ipi_spec_dst: in_addr,
    pub ipi_addr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in_pktinfo"][::std::mem::size_of::<in_pktinfo>() - 12usize];
    ["Alignment of in_pktinfo"][::std::mem::align_of::<in_pktinfo>() - 4usize];
    ["Offset of field: in_pktinfo::ipi_ifindex"]
        [::std::mem::offset_of!(in_pktinfo, ipi_ifindex) - 0usize];
    ["Offset of field: in_pktinfo::ipi_spec_dst"]
        [::std::mem::offset_of!(in_pktinfo, ipi_spec_dst) - 4usize];
    ["Offset of field: in_pktinfo::ipi_addr"]
        [::std::mem::offset_of!(in_pktinfo, ipi_addr) - 8usize];
};
pub const IPPROTO_IP: _bindgen_ty_4 = 0;
pub const IPPROTO_ICMP: _bindgen_ty_4 = 1;
pub const IPPROTO_IGMP: _bindgen_ty_4 = 2;
pub const IPPROTO_IPIP: _bindgen_ty_4 = 4;
pub const IPPROTO_TCP: _bindgen_ty_4 = 6;
pub const IPPROTO_EGP: _bindgen_ty_4 = 8;
pub const IPPROTO_PUP: _bindgen_ty_4 = 12;
pub const IPPROTO_UDP: _bindgen_ty_4 = 17;
pub const IPPROTO_IDP: _bindgen_ty_4 = 22;
pub const IPPROTO_TP: _bindgen_ty_4 = 29;
pub const IPPROTO_DCCP: _bindgen_ty_4 = 33;
pub const IPPROTO_IPV6: _bindgen_ty_4 = 41;
pub const IPPROTO_RSVP: _bindgen_ty_4 = 46;
pub const IPPROTO_GRE: _bindgen_ty_4 = 47;
pub const IPPROTO_ESP: _bindgen_ty_4 = 50;
pub const IPPROTO_AH: _bindgen_ty_4 = 51;
pub const IPPROTO_MTP: _bindgen_ty_4 = 92;
pub const IPPROTO_BEETPH: _bindgen_ty_4 = 94;
pub const IPPROTO_ENCAP: _bindgen_ty_4 = 98;
pub const IPPROTO_PIM: _bindgen_ty_4 = 103;
pub const IPPROTO_COMP: _bindgen_ty_4 = 108;
pub const IPPROTO_SCTP: _bindgen_ty_4 = 132;
pub const IPPROTO_UDPLITE: _bindgen_ty_4 = 136;
pub const IPPROTO_MPLS: _bindgen_ty_4 = 137;
pub const IPPROTO_ETHERNET: _bindgen_ty_4 = 143;
pub const IPPROTO_RAW: _bindgen_ty_4 = 255;
pub const IPPROTO_MPTCP: _bindgen_ty_4 = 262;
pub const IPPROTO_MAX: _bindgen_ty_4 = 263;
pub type _bindgen_ty_4 = ::std::os::raw::c_uint;
pub const IPPROTO_HOPOPTS: _bindgen_ty_5 = 0;
pub const IPPROTO_ROUTING: _bindgen_ty_5 = 43;
pub const IPPROTO_FRAGMENT: _bindgen_ty_5 = 44;
pub const IPPROTO_ICMPV6: _bindgen_ty_5 = 58;
pub const IPPROTO_NONE: _bindgen_ty_5 = 59;
pub const IPPROTO_DSTOPTS: _bindgen_ty_5 = 60;
pub const IPPROTO_MH: _bindgen_ty_5 = 135;
pub type _bindgen_ty_5 = ::std::os::raw::c_uint;
pub type in_port_t = u16;
pub const IPPORT_ECHO: _bindgen_ty_6 = 7;
pub const IPPORT_DISCARD: _bindgen_ty_6 = 9;
pub const IPPORT_SYSTAT: _bindgen_ty_6 = 11;
pub const IPPORT_DAYTIME: _bindgen_ty_6 = 13;
pub const IPPORT_NETSTAT: _bindgen_ty_6 = 15;
pub const IPPORT_FTP: _bindgen_ty_6 = 21;
pub const IPPORT_TELNET: _bindgen_ty_6 = 23;
pub const IPPORT_SMTP: _bindgen_ty_6 = 25;
pub const IPPORT_TIMESERVER: _bindgen_ty_6 = 37;
pub const IPPORT_NAMESERVER: _bindgen_ty_6 = 42;
pub const IPPORT_WHOIS: _bindgen_ty_6 = 43;
pub const IPPORT_MTP: _bindgen_ty_6 = 57;
pub const IPPORT_TFTP: _bindgen_ty_6 = 69;
pub const IPPORT_RJE: _bindgen_ty_6 = 77;
pub const IPPORT_FINGER: _bindgen_ty_6 = 79;
pub const IPPORT_TTYLINK: _bindgen_ty_6 = 87;
pub const IPPORT_SUPDUP: _bindgen_ty_6 = 95;
pub const IPPORT_EXECSERVER: _bindgen_ty_6 = 512;
pub const IPPORT_LOGINSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_CMDSERVER: _bindgen_ty_6 = 514;
pub const IPPORT_EFSSERVER: _bindgen_ty_6 = 520;
pub const IPPORT_BIFFUDP: _bindgen_ty_6 = 512;
pub const IPPORT_WHOSERVER: _bindgen_ty_6 = 513;
pub const IPPORT_ROUTESERVER: _bindgen_ty_6 = 520;
pub const IPPORT_RESERVED: _bindgen_ty_6 = 1024;
pub const IPPORT_USERRESERVED: _bindgen_ty_6 = 5000;
pub type _bindgen_ty_6 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct in6_addr {
    pub __in6_u: in6_addr__bindgen_ty_1,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union in6_addr__bindgen_ty_1 {
    pub __u6_addr8: [u8; 16usize],
    pub __u6_addr16: [u16; 8usize],
    pub __u6_addr32: [u32; 4usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr__bindgen_ty_1"][::std::mem::size_of::<in6_addr__bindgen_ty_1>() - 16usize];
    ["Alignment of in6_addr__bindgen_ty_1"]
        [::std::mem::align_of::<in6_addr__bindgen_ty_1>() - 4usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr8"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr8) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr16"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr16) - 0usize];
    ["Offset of field: in6_addr__bindgen_ty_1::__u6_addr32"]
        [::std::mem::offset_of!(in6_addr__bindgen_ty_1, __u6_addr32) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of in6_addr"][::std::mem::size_of::<in6_addr>() - 16usize];
    ["Alignment of in6_addr"][::std::mem::align_of::<in6_addr>() - 4usize];
    ["Offset of field: in6_addr::__in6_u"][::std::mem::offset_of!(in6_addr, __in6_u) - 0usize];
};
unsafe extern "C" {
    pub static in6addr_any: in6_addr;
}
unsafe extern "C" {
    pub static in6addr_loopback: in6_addr;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct sockaddr_in {
    pub sin_family: sa_family_t,
    pub sin_port: in_port_t,
    pub sin_addr: in_addr,
    pub sin_zero: [::std::os::raw::c_uchar; 8usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in"][::std::mem::size_of::<sockaddr_in>() - 16usize];
    ["Alignment of sockaddr_in"][::std::mem::align_of::<sockaddr_in>() - 4usize];
    ["Offset of field: sockaddr_in::sin_family"]
        [::std::mem::offset_of!(sockaddr_in, sin_family) - 0usize];
    ["Offset of field: sockaddr_in::sin_port"]
        [::std::mem::offset_of!(sockaddr_in, sin_port) - 2usize];
    ["Offset of field: sockaddr_in::sin_addr"]
        [::std::mem::offset_of!(sockaddr_in, sin_addr) - 4usize];
    ["Offset of field: sockaddr_in::sin_zero"]
        [::std::mem::offset_of!(sockaddr_in, sin_zero) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct sockaddr_in6 {
    pub sin6_family: sa_family_t,
    pub sin6_port: in_port_t,
    pub sin6_flowinfo: u32,
    pub sin6_addr: in6_addr,
    pub sin6_scope_id: u32,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of sockaddr_in6"][::std::mem::size_of::<sockaddr_in6>() - 28usize];
    ["Alignment of sockaddr_in6"][::std::mem::align_of::<sockaddr_in6>() - 4usize];
    ["Offset of field: sockaddr_in6::sin6_family"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_family) - 0usize];
    ["Offset of field: sockaddr_in6::sin6_port"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_port) - 2usize];
    ["Offset of field: sockaddr_in6::sin6_flowinfo"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_flowinfo) - 4usize];
    ["Offset of field: sockaddr_in6::sin6_addr"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_addr) - 8usize];
    ["Offset of field: sockaddr_in6::sin6_scope_id"]
        [::std::mem::offset_of!(sockaddr_in6, sin6_scope_id) - 24usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq"][::std::mem::size_of::<ip_mreq>() - 8usize];
    ["Alignment of ip_mreq"][::std::mem::align_of::<ip_mreq>() - 4usize];
    ["Offset of field: ip_mreq::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq::imr_interface"]
        [::std::mem::offset_of!(ip_mreq, imr_interface) - 4usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_mreq_source {
    pub imr_multiaddr: in_addr,
    pub imr_interface: in_addr,
    pub imr_sourceaddr: in_addr,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_mreq_source"][::std::mem::size_of::<ip_mreq_source>() - 12usize];
    ["Alignment of ip_mreq_source"][::std::mem::align_of::<ip_mreq_source>() - 4usize];
    ["Offset of field: ip_mreq_source::imr_multiaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_multiaddr) - 0usize];
    ["Offset of field: ip_mreq_source::imr_interface"]
        [::std::mem::offset_of!(ip_mreq_source, imr_interface) - 4usize];
    ["Offset of field: ip_mreq_source::imr_sourceaddr"]
        [::std::mem::offset_of!(ip_mreq_source, imr_sourceaddr) - 8usize];
};
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ipv6_mreq {
    pub ipv6mr_multiaddr: in6_addr,
    pub ipv6mr_interface: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ipv6_mreq"][::std::mem::size_of::<ipv6_mreq>() - 20usize];
    ["Alignment of ipv6_mreq"][::std::mem::align_of::<ipv6_mreq>() - 4usize];
    ["Offset of field: ipv6_mreq::ipv6mr_multiaddr"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_multiaddr) - 0usize];
    ["Offset of field: ipv6_mreq::ipv6mr_interface"]
        [::std::mem::offset_of!(ipv6_mreq, ipv6mr_interface) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_req {
    pub gr_interface: u32,
    pub gr_group: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_req"][::std::mem::size_of::<group_req>() - 136usize];
    ["Alignment of group_req"][::std::mem::align_of::<group_req>() - 8usize];
    ["Offset of field: group_req::gr_interface"]
        [::std::mem::offset_of!(group_req, gr_interface) - 0usize];
    ["Offset of field: group_req::gr_group"][::std::mem::offset_of!(group_req, gr_group) - 8usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_source_req {
    pub gsr_interface: u32,
    pub gsr_group: sockaddr_storage,
    pub gsr_source: sockaddr_storage,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_source_req"][::std::mem::size_of::<group_source_req>() - 264usize];
    ["Alignment of group_source_req"][::std::mem::align_of::<group_source_req>() - 8usize];
    ["Offset of field: group_source_req::gsr_interface"]
        [::std::mem::offset_of!(group_source_req, gsr_interface) - 0usize];
    ["Offset of field: group_source_req::gsr_group"]
        [::std::mem::offset_of!(group_source_req, gsr_group) - 8usize];
    ["Offset of field: group_source_req::gsr_source"]
        [::std::mem::offset_of!(group_source_req, gsr_source) - 136usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ip_msfilter {
    pub imsf_multiaddr: in_addr,
    pub imsf_interface: in_addr,
    pub imsf_fmode: u32,
    pub imsf_numsrc: u32,
    pub imsf_slist: [in_addr; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ip_msfilter"][::std::mem::size_of::<ip_msfilter>() - 20usize];
    ["Alignment of ip_msfilter"][::std::mem::align_of::<ip_msfilter>() - 4usize];
    ["Offset of field: ip_msfilter::imsf_multiaddr"]
        [::std::mem::offset_of!(ip_msfilter, imsf_multiaddr) - 0usize];
    ["Offset of field: ip_msfilter::imsf_interface"]
        [::std::mem::offset_of!(ip_msfilter, imsf_interface) - 4usize];
    ["Offset of field: ip_msfilter::imsf_fmode"]
        [::std::mem::offset_of!(ip_msfilter, imsf_fmode) - 8usize];
    ["Offset of field: ip_msfilter::imsf_numsrc"]
        [::std::mem::offset_of!(ip_msfilter, imsf_numsrc) - 12usize];
    ["Offset of field: ip_msfilter::imsf_slist"]
        [::std::mem::offset_of!(ip_msfilter, imsf_slist) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct group_filter {
    pub gf_interface: u32,
    pub gf_group: sockaddr_storage,
    pub gf_fmode: u32,
    pub gf_numsrc: u32,
    pub gf_slist: [sockaddr_storage; 1usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of group_filter"][::std::mem::size_of::<group_filter>() - 272usize];
    ["Alignment of group_filter"][::std::mem::align_of::<group_filter>() - 8usize];
    ["Offset of field: group_filter::gf_interface"]
        [::std::mem::offset_of!(group_filter, gf_interface) - 0usize];
    ["Offset of field: group_filter::gf_group"]
        [::std::mem::offset_of!(group_filter, gf_group) - 8usize];
    ["Offset of field: group_filter::gf_fmode"]
        [::std::mem::offset_of!(group_filter, gf_fmode) - 136usize];
    ["Offset of field: group_filter::gf_numsrc"]
        [::std::mem::offset_of!(group_filter, gf_numsrc) - 140usize];
    ["Offset of field: group_filter::gf_slist"]
        [::std::mem::offset_of!(group_filter, gf_slist) - 144usize];
};
unsafe extern "C" {
    pub fn ntohl(__netlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn ntohs(__netshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn htonl(__hostlong: u32) -> u32;
}
unsafe extern "C" {
    pub fn htons(__hostshort: u16) -> u16;
}
unsafe extern "C" {
    pub fn bindresvport(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn bindresvport6(
        __sockfd: ::std::os::raw::c_int,
        __sock_in: *mut sockaddr_in6,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_codec_ctx_s {
    pub max_stack_size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_codec_ctx_s"][::std::mem::size_of::<asn_codec_ctx_s>() - 8usize];
    ["Alignment of asn_codec_ctx_s"][::std::mem::align_of::<asn_codec_ctx_s>() - 8usize];
    ["Offset of field: asn_codec_ctx_s::max_stack_size"]
        [::std::mem::offset_of!(asn_codec_ctx_s, max_stack_size) - 0usize];
};
pub type asn_codec_ctx_t = asn_codec_ctx_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_enc_rval_s {
    pub encoded: isize,
    pub failed_type: *const asn_TYPE_descriptor_s,
    pub structure_ptr: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_enc_rval_s"][::std::mem::size_of::<asn_enc_rval_s>() - 24usize];
    ["Alignment of asn_enc_rval_s"][::std::mem::align_of::<asn_enc_rval_s>() - 8usize];
    ["Offset of field: asn_enc_rval_s::encoded"]
        [::std::mem::offset_of!(asn_enc_rval_s, encoded) - 0usize];
    ["Offset of field: asn_enc_rval_s::failed_type"]
        [::std::mem::offset_of!(asn_enc_rval_s, failed_type) - 8usize];
    ["Offset of field: asn_enc_rval_s::structure_ptr"]
        [::std::mem::offset_of!(asn_enc_rval_s, structure_ptr) - 16usize];
};
pub type asn_enc_rval_t = asn_enc_rval_s;
pub const asn_dec_rval_code_e_RC_OK: asn_dec_rval_code_e = 0;
pub const asn_dec_rval_code_e_RC_WMORE: asn_dec_rval_code_e = 1;
pub const asn_dec_rval_code_e_RC_FAIL: asn_dec_rval_code_e = 2;
pub type asn_dec_rval_code_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_dec_rval_s {
    pub code: asn_dec_rval_code_e,
    pub consumed: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_dec_rval_s"][::std::mem::size_of::<asn_dec_rval_s>() - 16usize];
    ["Alignment of asn_dec_rval_s"][::std::mem::align_of::<asn_dec_rval_s>() - 8usize];
    ["Offset of field: asn_dec_rval_s::code"]
        [::std::mem::offset_of!(asn_dec_rval_s, code) - 0usize];
    ["Offset of field: asn_dec_rval_s::consumed"]
        [::std::mem::offset_of!(asn_dec_rval_s, consumed) - 8usize];
};
pub type asn_dec_rval_t = asn_dec_rval_s;
pub const asn_transfer_syntax_ATS_INVALID: asn_transfer_syntax = 0;
pub const asn_transfer_syntax_ATS_NONSTANDARD_PLAINTEXT: asn_transfer_syntax = 1;
pub const asn_transfer_syntax_ATS_RANDOM: asn_transfer_syntax = 2;
pub const asn_transfer_syntax_ATS_BER: asn_transfer_syntax = 3;
pub const asn_transfer_syntax_ATS_DER: asn_transfer_syntax = 4;
pub const asn_transfer_syntax_ATS_CER: asn_transfer_syntax = 5;
pub const asn_transfer_syntax_ATS_BASIC_OER: asn_transfer_syntax = 6;
pub const asn_transfer_syntax_ATS_CANONICAL_OER: asn_transfer_syntax = 7;
pub const asn_transfer_syntax_ATS_UNALIGNED_BASIC_PER: asn_transfer_syntax = 8;
pub const asn_transfer_syntax_ATS_UNALIGNED_CANONICAL_PER: asn_transfer_syntax = 9;
pub const asn_transfer_syntax_ATS_BASIC_XER: asn_transfer_syntax = 10;
pub const asn_transfer_syntax_ATS_CANONICAL_XER: asn_transfer_syntax = 11;
pub type asn_transfer_syntax = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn asn_encode_to_buffer(
        opt_codec_parameters: *const asn_codec_ctx_t,
        arg1: asn_transfer_syntax,
        type_to_encode: *const asn_TYPE_descriptor_s,
        structure_to_encode: *const ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_encode_to_new_buffer_result_s {
    pub buffer: *mut ::std::os::raw::c_void,
    pub result: asn_enc_rval_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_encode_to_new_buffer_result_s"]
        [::std::mem::size_of::<asn_encode_to_new_buffer_result_s>() - 32usize];
    ["Alignment of asn_encode_to_new_buffer_result_s"]
        [::std::mem::align_of::<asn_encode_to_new_buffer_result_s>() - 8usize];
    ["Offset of field: asn_encode_to_new_buffer_result_s::buffer"]
        [::std::mem::offset_of!(asn_encode_to_new_buffer_result_s, buffer) - 0usize];
    ["Offset of field: asn_encode_to_new_buffer_result_s::result"]
        [::std::mem::offset_of!(asn_encode_to_new_buffer_result_s, result) - 8usize];
};
pub type asn_encode_to_new_buffer_result_t = asn_encode_to_new_buffer_result_s;
unsafe extern "C" {
    pub fn asn_encode_to_new_buffer(
        opt_codec_parameters: *const asn_codec_ctx_t,
        arg1: asn_transfer_syntax,
        type_to_encode: *const asn_TYPE_descriptor_s,
        structure_to_encode: *const ::std::os::raw::c_void,
    ) -> asn_encode_to_new_buffer_result_t;
}
pub type asn_app_consume_bytes_f = ::std::option::Option<
    unsafe extern "C" fn(
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        application_specific_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn asn_encode(
        opt_codec_parameters: *const asn_codec_ctx_t,
        arg1: asn_transfer_syntax,
        type_to_encode: *const asn_TYPE_descriptor_s,
        structure_to_encode: *const ::std::os::raw::c_void,
        callback: asn_app_consume_bytes_f,
        callback_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn asn_decode(
        opt_codec_parameters: *const asn_codec_ctx_t,
        arg1: asn_transfer_syntax,
        type_to_decode: *const asn_TYPE_descriptor_s,
        structure_ptr: *mut *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
pub type asn_app_constraint_failed_f = ::std::option::Option<
    unsafe extern "C" fn(
        application_specific_key: *mut ::std::os::raw::c_void,
        type_descriptor_which_failed: *const asn_TYPE_descriptor_s,
        structure_which_failed_ptr: *const ::std::os::raw::c_void,
        error_message_format: *const ::std::os::raw::c_char,
        ...
    ),
>;
pub type ber_tlv_len_t = isize;
unsafe extern "C" {
    pub fn ber_fetch_length(
        _is_constructed: ::std::os::raw::c_int,
        bufptr: *const ::std::os::raw::c_void,
        size: usize,
        len_r: *mut ber_tlv_len_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn ber_skip_length(
        opt_codec_ctx: *const asn_codec_ctx_s,
        _is_constructed: ::std::os::raw::c_int,
        bufptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn der_tlv_length_serialize(
        len: ber_tlv_len_t,
        bufptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> usize;
}
pub const asn_tag_class_ASN_TAG_CLASS_UNIVERSAL: asn_tag_class = 0;
pub const asn_tag_class_ASN_TAG_CLASS_APPLICATION: asn_tag_class = 1;
pub const asn_tag_class_ASN_TAG_CLASS_CONTEXT: asn_tag_class = 2;
pub const asn_tag_class_ASN_TAG_CLASS_PRIVATE: asn_tag_class = 3;
pub type asn_tag_class = ::std::os::raw::c_uint;
pub type ber_tlv_tag_t = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn ber_tlv_tag_snprint(
        tag: ber_tlv_tag_t,
        buf: *mut ::std::os::raw::c_char,
        buflen: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn ber_tlv_tag_fwrite(tag: ber_tlv_tag_t, arg1: *mut FILE) -> isize;
}
unsafe extern "C" {
    pub fn ber_tlv_tag_string(tag: ber_tlv_tag_t) -> *mut ::std::os::raw::c_char;
}
unsafe extern "C" {
    pub fn ber_fetch_tag(
        bufptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_r: *mut ber_tlv_tag_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn ber_tlv_tag_serialize(
        tag: ber_tlv_tag_t,
        bufptr: *mut ::std::os::raw::c_void,
        size: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_struct_ctx_s {
    pub phase: ::std::os::raw::c_short,
    pub step: ::std::os::raw::c_short,
    pub context: ::std::os::raw::c_int,
    pub ptr: *mut ::std::os::raw::c_void,
    pub left: ber_tlv_len_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_struct_ctx_s"][::std::mem::size_of::<asn_struct_ctx_s>() - 24usize];
    ["Alignment of asn_struct_ctx_s"][::std::mem::align_of::<asn_struct_ctx_s>() - 8usize];
    ["Offset of field: asn_struct_ctx_s::phase"]
        [::std::mem::offset_of!(asn_struct_ctx_s, phase) - 0usize];
    ["Offset of field: asn_struct_ctx_s::step"]
        [::std::mem::offset_of!(asn_struct_ctx_s, step) - 2usize];
    ["Offset of field: asn_struct_ctx_s::context"]
        [::std::mem::offset_of!(asn_struct_ctx_s, context) - 4usize];
    ["Offset of field: asn_struct_ctx_s::ptr"]
        [::std::mem::offset_of!(asn_struct_ctx_s, ptr) - 8usize];
    ["Offset of field: asn_struct_ctx_s::left"]
        [::std::mem::offset_of!(asn_struct_ctx_s, left) - 16usize];
};
pub type asn_struct_ctx_t = asn_struct_ctx_s;
unsafe extern "C" {
    pub fn ber_decode(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
pub type ber_type_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t,
>;
unsafe extern "C" {
    #[doc = " INTERNALLY USEFUL FUNCTIONS *"]
    pub fn ber_check_tags(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        opt_ctx: *mut asn_struct_ctx_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
        last_tag_form: ::std::os::raw::c_int,
        last_length: *mut ber_tlv_len_t,
        opt_tlv_form: *mut ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn der_encode(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn der_encode_to_buffer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
    ) -> asn_enc_rval_t;
}
pub type der_type_encoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t,
>;
unsafe extern "C" {
    #[doc = " INTERNALLY USEFUL FUNCTIONS *"]
    pub fn der_write_tags(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_length: usize,
        tag_mode: ::std::os::raw::c_int,
        last_tag_form: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> isize;
}
unsafe extern "C" {
    pub fn xer_decode(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
pub type xer_type_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t,
>;
unsafe extern "C" {
    #[doc = " INTERNALLY USEFUL FUNCTIONS *"]
    pub fn xer_decode_general(
        opt_codec_ctx: *const asn_codec_ctx_t,
        ctx: *mut asn_struct_ctx_t,
        struct_key: *mut ::std::os::raw::c_void,
        xml_tag: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        opt_unexpected_tag_decoder: ::std::option::Option<
            unsafe extern "C" fn(
                struct_key: *mut ::std::os::raw::c_void,
                chunk_buf: *const ::std::os::raw::c_void,
                chunk_size: usize,
            ) -> ::std::os::raw::c_int,
        >,
        body_receiver: ::std::option::Option<
            unsafe extern "C" fn(
                struct_key: *mut ::std::os::raw::c_void,
                chunk_buf: *const ::std::os::raw::c_void,
                chunk_size: usize,
                have_more: ::std::os::raw::c_int,
            ) -> isize,
        >,
    ) -> asn_dec_rval_t;
}
pub const pxer_chunk_type_PXER_WMORE: pxer_chunk_type = 0;
pub const pxer_chunk_type_PXER_TAG: pxer_chunk_type = 1;
pub const pxer_chunk_type_PXER_TEXT: pxer_chunk_type = 2;
pub const pxer_chunk_type_PXER_COMMENT: pxer_chunk_type = 3;
pub type pxer_chunk_type = ::std::os::raw::c_uint;
pub use self::pxer_chunk_type as pxer_chunk_type_e;
unsafe extern "C" {
    pub fn xer_next_token(
        stateContext: *mut ::std::os::raw::c_int,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        _ch_type: *mut pxer_chunk_type_e,
    ) -> isize;
}
pub const xer_check_tag_XCT_BROKEN: xer_check_tag = 0;
pub const xer_check_tag_XCT_OPENING: xer_check_tag = 1;
pub const xer_check_tag_XCT_CLOSING: xer_check_tag = 2;
pub const xer_check_tag_XCT_BOTH: xer_check_tag = 3;
pub const xer_check_tag_XCT__UNK__MASK: xer_check_tag = 4;
pub const xer_check_tag_XCT_UNKNOWN_OP: xer_check_tag = 5;
pub const xer_check_tag_XCT_UNKNOWN_CL: xer_check_tag = 6;
pub const xer_check_tag_XCT_UNKNOWN_BO: xer_check_tag = 7;
pub type xer_check_tag = ::std::os::raw::c_uint;
pub use self::xer_check_tag as xer_check_tag_e;
unsafe extern "C" {
    pub fn xer_check_tag(
        buf_ptr: *const ::std::os::raw::c_void,
        size: ::std::os::raw::c_int,
        need_tag: *const ::std::os::raw::c_char,
    ) -> xer_check_tag_e;
}
unsafe extern "C" {
    pub fn xer_whitespace_span(
        chunk_buf: *const ::std::os::raw::c_void,
        chunk_size: usize,
    ) -> usize;
}
unsafe extern "C" {
    pub fn xer_skip_unknown(
        tcv: xer_check_tag_e,
        depth: *mut ber_tlv_len_t,
    ) -> ::std::os::raw::c_int;
}
pub const xer_encoder_flags_e_XER_F_BASIC: xer_encoder_flags_e = 1;
pub const xer_encoder_flags_e_XER_F_CANONICAL: xer_encoder_flags_e = 2;
pub type xer_encoder_flags_e = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xer_encode(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn xer_fprint(
        stream: *mut FILE,
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub const xer_equivalence_e_XEQ_SUCCESS: xer_equivalence_e = 0;
pub const xer_equivalence_e_XEQ_FAILURE: xer_equivalence_e = 1;
pub const xer_equivalence_e_XEQ_ENCODE1_FAILED: xer_equivalence_e = 2;
pub const xer_equivalence_e_XEQ_ENCODE2_FAILED: xer_equivalence_e = 3;
pub const xer_equivalence_e_XEQ_DIFFERENT: xer_equivalence_e = 4;
pub const xer_equivalence_e_XEQ_DECODE_FAILED: xer_equivalence_e = 5;
pub const xer_equivalence_e_XEQ_ROUND_TRIP_FAILED: xer_equivalence_e = 6;
pub type xer_equivalence_e = ::std::os::raw::c_uint;
unsafe extern "C" {
    pub fn xer_equivalent(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct1: *const ::std::os::raw::c_void,
        struct2: *const ::std::os::raw::c_void,
        opt_debug_stream: *mut FILE,
    ) -> xer_equivalence_e;
}
pub type xer_type_encoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_bit_data_s {
    pub buffer: *const u8,
    pub nboff: usize,
    pub nbits: usize,
    pub moved: usize,
    pub refill: ::std::option::Option<
        unsafe extern "C" fn(arg1: *mut asn_bit_data_s) -> ::std::os::raw::c_int,
    >,
    pub refill_key: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_bit_data_s"][::std::mem::size_of::<asn_bit_data_s>() - 48usize];
    ["Alignment of asn_bit_data_s"][::std::mem::align_of::<asn_bit_data_s>() - 8usize];
    ["Offset of field: asn_bit_data_s::buffer"]
        [::std::mem::offset_of!(asn_bit_data_s, buffer) - 0usize];
    ["Offset of field: asn_bit_data_s::nboff"]
        [::std::mem::offset_of!(asn_bit_data_s, nboff) - 8usize];
    ["Offset of field: asn_bit_data_s::nbits"]
        [::std::mem::offset_of!(asn_bit_data_s, nbits) - 16usize];
    ["Offset of field: asn_bit_data_s::moved"]
        [::std::mem::offset_of!(asn_bit_data_s, moved) - 24usize];
    ["Offset of field: asn_bit_data_s::refill"]
        [::std::mem::offset_of!(asn_bit_data_s, refill) - 32usize];
    ["Offset of field: asn_bit_data_s::refill_key"]
        [::std::mem::offset_of!(asn_bit_data_s, refill_key) - 40usize];
};
pub type asn_bit_data_t = asn_bit_data_s;
unsafe extern "C" {
    pub fn asn_bit_data_new_contiguous(
        data: *const ::std::os::raw::c_void,
        size_bits: usize,
    ) -> *mut asn_bit_data_t;
}
unsafe extern "C" {
    pub fn asn_get_few_bits(arg1: *mut asn_bit_data_t, get_nbits: ::std::os::raw::c_int) -> i32;
}
unsafe extern "C" {
    pub fn asn_get_undo(arg1: *mut asn_bit_data_t, get_nbits: ::std::os::raw::c_int);
}
unsafe extern "C" {
    pub fn asn_get_many_bits(
        arg1: *mut asn_bit_data_t,
        dst: *mut u8,
        right_align: ::std::os::raw::c_int,
        get_nbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_bit_data_string(arg1: *mut asn_bit_data_t) -> *mut ::std::os::raw::c_char;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_bit_outp_s {
    pub buffer: *mut u8,
    pub nboff: usize,
    pub nbits: usize,
    pub tmpspace: [u8; 32usize],
    pub output: ::std::option::Option<
        unsafe extern "C" fn(
            data: *const ::std::os::raw::c_void,
            size: usize,
            op_key: *mut ::std::os::raw::c_void,
        ) -> ::std::os::raw::c_int,
    >,
    pub op_key: *mut ::std::os::raw::c_void,
    pub flushed_bytes: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_bit_outp_s"][::std::mem::size_of::<asn_bit_outp_s>() - 80usize];
    ["Alignment of asn_bit_outp_s"][::std::mem::align_of::<asn_bit_outp_s>() - 8usize];
    ["Offset of field: asn_bit_outp_s::buffer"]
        [::std::mem::offset_of!(asn_bit_outp_s, buffer) - 0usize];
    ["Offset of field: asn_bit_outp_s::nboff"]
        [::std::mem::offset_of!(asn_bit_outp_s, nboff) - 8usize];
    ["Offset of field: asn_bit_outp_s::nbits"]
        [::std::mem::offset_of!(asn_bit_outp_s, nbits) - 16usize];
    ["Offset of field: asn_bit_outp_s::tmpspace"]
        [::std::mem::offset_of!(asn_bit_outp_s, tmpspace) - 24usize];
    ["Offset of field: asn_bit_outp_s::output"]
        [::std::mem::offset_of!(asn_bit_outp_s, output) - 56usize];
    ["Offset of field: asn_bit_outp_s::op_key"]
        [::std::mem::offset_of!(asn_bit_outp_s, op_key) - 64usize];
    ["Offset of field: asn_bit_outp_s::flushed_bytes"]
        [::std::mem::offset_of!(asn_bit_outp_s, flushed_bytes) - 72usize];
};
pub type asn_bit_outp_t = asn_bit_outp_s;
unsafe extern "C" {
    pub fn asn_put_few_bits(
        arg1: *mut asn_bit_outp_t,
        bits: u32,
        obits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_put_many_bits(
        arg1: *mut asn_bit_outp_t,
        src: *const u8,
        put_nbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_put_aligned_flush(arg1: *mut asn_bit_outp_t) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_per_constraint_s {
    pub flags: asn_per_constraint_s_asn_per_constraint_flags,
    pub range_bits: ::std::os::raw::c_int,
    pub effective_bits: ::std::os::raw::c_int,
    pub lower_bound: ::std::os::raw::c_long,
    pub upper_bound: ::std::os::raw::c_long,
}
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_UNCONSTRAINED:
    asn_per_constraint_s_asn_per_constraint_flags = 0;
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_SEMI_CONSTRAINED:
    asn_per_constraint_s_asn_per_constraint_flags = 1;
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_CONSTRAINED:
    asn_per_constraint_s_asn_per_constraint_flags = 2;
pub const asn_per_constraint_s_asn_per_constraint_flags_APC_EXTENSIBLE:
    asn_per_constraint_s_asn_per_constraint_flags = 4;
pub type asn_per_constraint_s_asn_per_constraint_flags = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_per_constraint_s"][::std::mem::size_of::<asn_per_constraint_s>() - 32usize];
    ["Alignment of asn_per_constraint_s"][::std::mem::align_of::<asn_per_constraint_s>() - 8usize];
    ["Offset of field: asn_per_constraint_s::flags"]
        [::std::mem::offset_of!(asn_per_constraint_s, flags) - 0usize];
    ["Offset of field: asn_per_constraint_s::range_bits"]
        [::std::mem::offset_of!(asn_per_constraint_s, range_bits) - 4usize];
    ["Offset of field: asn_per_constraint_s::effective_bits"]
        [::std::mem::offset_of!(asn_per_constraint_s, effective_bits) - 8usize];
    ["Offset of field: asn_per_constraint_s::lower_bound"]
        [::std::mem::offset_of!(asn_per_constraint_s, lower_bound) - 16usize];
    ["Offset of field: asn_per_constraint_s::upper_bound"]
        [::std::mem::offset_of!(asn_per_constraint_s, upper_bound) - 24usize];
};
pub type asn_per_constraint_t = asn_per_constraint_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_per_constraints_s {
    pub value: asn_per_constraint_t,
    pub size: asn_per_constraint_t,
    pub value2code: ::std::option::Option<
        unsafe extern "C" fn(value: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
    >,
    pub code2value: ::std::option::Option<
        unsafe extern "C" fn(code: ::std::os::raw::c_uint) -> ::std::os::raw::c_int,
    >,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_per_constraints_s"][::std::mem::size_of::<asn_per_constraints_s>() - 80usize];
    ["Alignment of asn_per_constraints_s"]
        [::std::mem::align_of::<asn_per_constraints_s>() - 8usize];
    ["Offset of field: asn_per_constraints_s::value"]
        [::std::mem::offset_of!(asn_per_constraints_s, value) - 0usize];
    ["Offset of field: asn_per_constraints_s::size"]
        [::std::mem::offset_of!(asn_per_constraints_s, size) - 32usize];
    ["Offset of field: asn_per_constraints_s::value2code"]
        [::std::mem::offset_of!(asn_per_constraints_s, value2code) - 64usize];
    ["Offset of field: asn_per_constraints_s::code2value"]
        [::std::mem::offset_of!(asn_per_constraints_s, code2value) - 72usize];
};
pub type asn_per_constraints_t = asn_per_constraints_s;
pub type asn_per_data_t = asn_bit_data_s;
unsafe extern "C" {
    pub fn uper_get_length(
        pd: *mut asn_per_data_t,
        effective_bound_bits: ::std::os::raw::c_int,
        lower_bound: usize,
        repeat: *mut ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn uper_get_nslength(pd: *mut asn_per_data_t) -> isize;
}
unsafe extern "C" {
    pub fn uper_get_nsnnwn(pd: *mut asn_per_data_t) -> isize;
}
unsafe extern "C" {
    pub fn uper_get_constrained_whole_number(
        pd: *mut asn_per_data_t,
        v: *mut ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
pub type asn_per_outp_t = asn_bit_outp_s;
unsafe extern "C" {
    pub fn per_long_range_rebase(
        v: ::std::os::raw::c_long,
        lb: ::std::os::raw::c_long,
        ub: ::std::os::raw::c_long,
        output: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn per_long_range_unrebase(
        inp: ::std::os::raw::c_ulong,
        lb: ::std::os::raw::c_long,
        ub: ::std::os::raw::c_long,
        outp: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uper_put_constrained_whole_number_u(
        po: *mut asn_per_outp_t,
        v: ::std::os::raw::c_ulong,
        nbits: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uper_put_length(
        po: *mut asn_per_outp_t,
        whole_length: usize,
        opt_need_eom: *mut ::std::os::raw::c_int,
    ) -> isize;
}
unsafe extern "C" {
    pub fn uper_put_nslength(po: *mut asn_per_outp_t, length: usize) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uper_put_nsnnwn(
        po: *mut asn_per_outp_t,
        n: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uper_decode_complete(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn uper_decode(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
        skip_bits: ::std::os::raw::c_int,
        unused_bits: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
pub type per_type_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t,
>;
unsafe extern "C" {
    pub fn uper_encode(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn uper_encode_to_buffer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn uper_encode_to_new_buffer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        buffer_r: *mut *mut ::std::os::raw::c_void,
    ) -> isize;
}
pub type per_type_encoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t,
>;
unsafe extern "C" {
    pub fn asn_check_constraints(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        errbuf: *mut ::std::os::raw::c_char,
        errlen: *mut usize,
    ) -> ::std::os::raw::c_int;
}
pub type asn_constr_check_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    #[doc = " INTERNALLY USEFUL FUNCTIONS *"]
    pub fn asn_generic_no_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_generic_unknown_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_random_fill_result_s {
    pub code: asn_random_fill_result_s__bindgen_ty_1,
    pub length: usize,
}
pub const asn_random_fill_result_s_ARFILL_FAILED: asn_random_fill_result_s__bindgen_ty_1 = -1;
pub const asn_random_fill_result_s_ARFILL_OK: asn_random_fill_result_s__bindgen_ty_1 = 0;
pub const asn_random_fill_result_s_ARFILL_SKIPPED: asn_random_fill_result_s__bindgen_ty_1 = 1;
pub type asn_random_fill_result_s__bindgen_ty_1 = ::std::os::raw::c_int;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_random_fill_result_s"]
        [::std::mem::size_of::<asn_random_fill_result_s>() - 16usize];
    ["Alignment of asn_random_fill_result_s"]
        [::std::mem::align_of::<asn_random_fill_result_s>() - 8usize];
    ["Offset of field: asn_random_fill_result_s::code"]
        [::std::mem::offset_of!(asn_random_fill_result_s, code) - 0usize];
    ["Offset of field: asn_random_fill_result_s::length"]
        [::std::mem::offset_of!(asn_random_fill_result_s, length) - 8usize];
};
pub type asn_random_fill_result_t = asn_random_fill_result_s;
pub type asn_random_fill_f = ::std::option::Option<
    unsafe extern "C" fn(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t,
>;
unsafe extern "C" {
    pub fn asn_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        approx_max_length_limit: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_random_between(min: intmax_t, max: intmax_t) -> intmax_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_oer_constraint_number_s {
    pub width: ::std::os::raw::c_uint,
    pub positive: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_oer_constraint_number_s"]
        [::std::mem::size_of::<asn_oer_constraint_number_s>() - 8usize];
    ["Alignment of asn_oer_constraint_number_s"]
        [::std::mem::align_of::<asn_oer_constraint_number_s>() - 4usize];
    ["Offset of field: asn_oer_constraint_number_s::width"]
        [::std::mem::offset_of!(asn_oer_constraint_number_s, width) - 0usize];
    ["Offset of field: asn_oer_constraint_number_s::positive"]
        [::std::mem::offset_of!(asn_oer_constraint_number_s, positive) - 4usize];
};
pub type asn_oer_constraint_number_t = asn_oer_constraint_number_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_oer_constraints_s {
    pub value: asn_oer_constraint_number_t,
    pub size: isize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_oer_constraints_s"][::std::mem::size_of::<asn_oer_constraints_s>() - 16usize];
    ["Alignment of asn_oer_constraints_s"]
        [::std::mem::align_of::<asn_oer_constraints_s>() - 8usize];
    ["Offset of field: asn_oer_constraints_s::value"]
        [::std::mem::offset_of!(asn_oer_constraints_s, value) - 0usize];
    ["Offset of field: asn_oer_constraints_s::size"]
        [::std::mem::offset_of!(asn_oer_constraints_s, size) - 8usize];
};
pub type asn_oer_constraints_t = asn_oer_constraints_s;
unsafe extern "C" {
    pub fn oer_fetch_length(
        bufptr: *const ::std::os::raw::c_void,
        size: usize,
        len_r: *mut usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn oer_serialize_length(
        length: usize,
        cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> isize;
}
unsafe extern "C" {
    pub fn oer_decode(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buffer: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
pub type oer_type_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t,
>;
unsafe extern "C" {
    pub fn oer_open_type_skip(bufptr: *const ::std::os::raw::c_void, size: usize) -> isize;
}
unsafe extern "C" {
    pub fn oer_open_type_get(
        opt_codec_ctx: *const asn_codec_ctx_t,
        td: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        bufptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn oer_decode_primitive(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn oer_encode(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn oer_encode_to_buffer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        buffer: *mut ::std::os::raw::c_void,
        buffer_size: usize,
    ) -> asn_enc_rval_t;
}
pub type oer_type_encoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t,
>;
unsafe extern "C" {
    pub fn oer_open_type_put(
        td: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> isize;
}
unsafe extern "C" {
    pub fn oer_encode_primitive(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
pub const asn_struct_free_method_ASFM_FREE_EVERYTHING: asn_struct_free_method = 0;
pub const asn_struct_free_method_ASFM_FREE_UNDERLYING: asn_struct_free_method = 1;
pub const asn_struct_free_method_ASFM_FREE_UNDERLYING_AND_RESET: asn_struct_free_method = 2;
pub type asn_struct_free_method = ::std::os::raw::c_uint;
pub type asn_struct_free_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    ),
>;
pub type asn_struct_print_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type asn_struct_compare_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
pub type asn_outmost_tag_f = ::std::option::Option<
    unsafe extern "C" fn(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
    ) -> ber_tlv_tag_t,
>;
unsafe extern "C" {
    pub fn asn_TYPE_outmost_tag(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
    ) -> ber_tlv_tag_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_type_selector_result_s {
    pub type_descriptor: *const asn_TYPE_descriptor_s,
    pub presence_index: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_type_selector_result_s"]
        [::std::mem::size_of::<asn_type_selector_result_s>() - 16usize];
    ["Alignment of asn_type_selector_result_s"]
        [::std::mem::align_of::<asn_type_selector_result_s>() - 8usize];
    ["Offset of field: asn_type_selector_result_s::type_descriptor"]
        [::std::mem::offset_of!(asn_type_selector_result_s, type_descriptor) - 0usize];
    ["Offset of field: asn_type_selector_result_s::presence_index"]
        [::std::mem::offset_of!(asn_type_selector_result_s, presence_index) - 8usize];
};
pub type asn_type_selector_result_t = asn_type_selector_result_s;
pub type asn_type_selector_f = ::std::option::Option<
    unsafe extern "C" fn(
        parent_type_descriptor: *const asn_TYPE_descriptor_s,
        parent_structure_ptr: *const ::std::os::raw::c_void,
    ) -> asn_type_selector_result_t,
>;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_TYPE_operation_s {
    pub free_struct: asn_struct_free_f,
    pub print_struct: asn_struct_print_f,
    pub compare_struct: asn_struct_compare_f,
    pub ber_decoder: ber_type_decoder_f,
    pub der_encoder: der_type_encoder_f,
    pub xer_decoder: xer_type_decoder_f,
    pub xer_encoder: xer_type_encoder_f,
    pub oer_decoder: oer_type_decoder_f,
    pub oer_encoder: oer_type_encoder_f,
    pub uper_decoder: per_type_decoder_f,
    pub uper_encoder: per_type_encoder_f,
    pub random_fill: asn_random_fill_f,
    pub outmost_tag: asn_outmost_tag_f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_TYPE_operation_s"][::std::mem::size_of::<asn_TYPE_operation_s>() - 104usize];
    ["Alignment of asn_TYPE_operation_s"][::std::mem::align_of::<asn_TYPE_operation_s>() - 8usize];
    ["Offset of field: asn_TYPE_operation_s::free_struct"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, free_struct) - 0usize];
    ["Offset of field: asn_TYPE_operation_s::print_struct"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, print_struct) - 8usize];
    ["Offset of field: asn_TYPE_operation_s::compare_struct"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, compare_struct) - 16usize];
    ["Offset of field: asn_TYPE_operation_s::ber_decoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, ber_decoder) - 24usize];
    ["Offset of field: asn_TYPE_operation_s::der_encoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, der_encoder) - 32usize];
    ["Offset of field: asn_TYPE_operation_s::xer_decoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, xer_decoder) - 40usize];
    ["Offset of field: asn_TYPE_operation_s::xer_encoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, xer_encoder) - 48usize];
    ["Offset of field: asn_TYPE_operation_s::oer_decoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, oer_decoder) - 56usize];
    ["Offset of field: asn_TYPE_operation_s::oer_encoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, oer_encoder) - 64usize];
    ["Offset of field: asn_TYPE_operation_s::uper_decoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, uper_decoder) - 72usize];
    ["Offset of field: asn_TYPE_operation_s::uper_encoder"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, uper_encoder) - 80usize];
    ["Offset of field: asn_TYPE_operation_s::random_fill"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, random_fill) - 88usize];
    ["Offset of field: asn_TYPE_operation_s::outmost_tag"]
        [::std::mem::offset_of!(asn_TYPE_operation_s, outmost_tag) - 96usize];
};
pub type asn_TYPE_operation_t = asn_TYPE_operation_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_encoding_constraints_s {
    pub oer_constraints: *const asn_oer_constraints_s,
    pub per_constraints: *const asn_per_constraints_s,
    pub general_constraints: asn_constr_check_f,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_encoding_constraints_s"]
        [::std::mem::size_of::<asn_encoding_constraints_s>() - 24usize];
    ["Alignment of asn_encoding_constraints_s"]
        [::std::mem::align_of::<asn_encoding_constraints_s>() - 8usize];
    ["Offset of field: asn_encoding_constraints_s::oer_constraints"]
        [::std::mem::offset_of!(asn_encoding_constraints_s, oer_constraints) - 0usize];
    ["Offset of field: asn_encoding_constraints_s::per_constraints"]
        [::std::mem::offset_of!(asn_encoding_constraints_s, per_constraints) - 8usize];
    ["Offset of field: asn_encoding_constraints_s::general_constraints"]
        [::std::mem::offset_of!(asn_encoding_constraints_s, general_constraints) - 16usize];
};
pub type asn_encoding_constraints_t = asn_encoding_constraints_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_TYPE_descriptor_s {
    pub name: *const ::std::os::raw::c_char,
    pub xml_tag: *const ::std::os::raw::c_char,
    pub op: *mut asn_TYPE_operation_t,
    #[doc = " Internally useful members. Not to be used by applications directly. *"]
    pub tags: *const ber_tlv_tag_t,
    pub tags_count: ::std::os::raw::c_uint,
    pub all_tags: *const ber_tlv_tag_t,
    pub all_tags_count: ::std::os::raw::c_uint,
    pub encoding_constraints: asn_encoding_constraints_t,
    pub elements: *mut asn_TYPE_member_s,
    pub elements_count: ::std::os::raw::c_uint,
    pub specifics: *const ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_TYPE_descriptor_s"][::std::mem::size_of::<asn_TYPE_descriptor_s>() - 104usize];
    ["Alignment of asn_TYPE_descriptor_s"]
        [::std::mem::align_of::<asn_TYPE_descriptor_s>() - 8usize];
    ["Offset of field: asn_TYPE_descriptor_s::name"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, name) - 0usize];
    ["Offset of field: asn_TYPE_descriptor_s::xml_tag"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, xml_tag) - 8usize];
    ["Offset of field: asn_TYPE_descriptor_s::op"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, op) - 16usize];
    ["Offset of field: asn_TYPE_descriptor_s::tags"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, tags) - 24usize];
    ["Offset of field: asn_TYPE_descriptor_s::tags_count"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, tags_count) - 32usize];
    ["Offset of field: asn_TYPE_descriptor_s::all_tags"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, all_tags) - 40usize];
    ["Offset of field: asn_TYPE_descriptor_s::all_tags_count"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, all_tags_count) - 48usize];
    ["Offset of field: asn_TYPE_descriptor_s::encoding_constraints"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, encoding_constraints) - 56usize];
    ["Offset of field: asn_TYPE_descriptor_s::elements"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, elements) - 80usize];
    ["Offset of field: asn_TYPE_descriptor_s::elements_count"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, elements_count) - 88usize];
    ["Offset of field: asn_TYPE_descriptor_s::specifics"]
        [::std::mem::offset_of!(asn_TYPE_descriptor_s, specifics) - 96usize];
};
pub type asn_TYPE_descriptor_t = asn_TYPE_descriptor_s;
pub const asn_TYPE_flags_e_ATF_NOFLAGS: asn_TYPE_flags_e = 0;
pub const asn_TYPE_flags_e_ATF_POINTER: asn_TYPE_flags_e = 1;
pub const asn_TYPE_flags_e_ATF_OPEN_TYPE: asn_TYPE_flags_e = 2;
pub const asn_TYPE_flags_e_ATF_ANY_TYPE: asn_TYPE_flags_e = 4;
pub type asn_TYPE_flags_e = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_TYPE_member_s {
    pub flags: asn_TYPE_flags_e,
    pub optional: ::std::os::raw::c_uint,
    pub memb_offset: ::std::os::raw::c_uint,
    pub tag: ber_tlv_tag_t,
    pub tag_mode: ::std::os::raw::c_int,
    pub type_: *mut asn_TYPE_descriptor_t,
    pub type_selector: asn_type_selector_f,
    pub encoding_constraints: asn_encoding_constraints_t,
    pub default_value_cmp: ::std::option::Option<
        unsafe extern "C" fn(sptr: *const ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub default_value_set: ::std::option::Option<
        unsafe extern "C" fn(sptr: *mut *mut ::std::os::raw::c_void) -> ::std::os::raw::c_int,
    >,
    pub name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_TYPE_member_s"][::std::mem::size_of::<asn_TYPE_member_s>() - 88usize];
    ["Alignment of asn_TYPE_member_s"][::std::mem::align_of::<asn_TYPE_member_s>() - 8usize];
    ["Offset of field: asn_TYPE_member_s::flags"]
        [::std::mem::offset_of!(asn_TYPE_member_s, flags) - 0usize];
    ["Offset of field: asn_TYPE_member_s::optional"]
        [::std::mem::offset_of!(asn_TYPE_member_s, optional) - 4usize];
    ["Offset of field: asn_TYPE_member_s::memb_offset"]
        [::std::mem::offset_of!(asn_TYPE_member_s, memb_offset) - 8usize];
    ["Offset of field: asn_TYPE_member_s::tag"]
        [::std::mem::offset_of!(asn_TYPE_member_s, tag) - 12usize];
    ["Offset of field: asn_TYPE_member_s::tag_mode"]
        [::std::mem::offset_of!(asn_TYPE_member_s, tag_mode) - 16usize];
    ["Offset of field: asn_TYPE_member_s::type_"]
        [::std::mem::offset_of!(asn_TYPE_member_s, type_) - 24usize];
    ["Offset of field: asn_TYPE_member_s::type_selector"]
        [::std::mem::offset_of!(asn_TYPE_member_s, type_selector) - 32usize];
    ["Offset of field: asn_TYPE_member_s::encoding_constraints"]
        [::std::mem::offset_of!(asn_TYPE_member_s, encoding_constraints) - 40usize];
    ["Offset of field: asn_TYPE_member_s::default_value_cmp"]
        [::std::mem::offset_of!(asn_TYPE_member_s, default_value_cmp) - 64usize];
    ["Offset of field: asn_TYPE_member_s::default_value_set"]
        [::std::mem::offset_of!(asn_TYPE_member_s, default_value_set) - 72usize];
    ["Offset of field: asn_TYPE_member_s::name"]
        [::std::mem::offset_of!(asn_TYPE_member_s, name) - 80usize];
};
pub type asn_TYPE_member_t = asn_TYPE_member_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_TYPE_tag2member_s {
    pub el_tag: ber_tlv_tag_t,
    pub el_no: ::std::os::raw::c_uint,
    pub toff_first: ::std::os::raw::c_int,
    pub toff_last: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_TYPE_tag2member_s"][::std::mem::size_of::<asn_TYPE_tag2member_s>() - 16usize];
    ["Alignment of asn_TYPE_tag2member_s"]
        [::std::mem::align_of::<asn_TYPE_tag2member_s>() - 4usize];
    ["Offset of field: asn_TYPE_tag2member_s::el_tag"]
        [::std::mem::offset_of!(asn_TYPE_tag2member_s, el_tag) - 0usize];
    ["Offset of field: asn_TYPE_tag2member_s::el_no"]
        [::std::mem::offset_of!(asn_TYPE_tag2member_s, el_no) - 4usize];
    ["Offset of field: asn_TYPE_tag2member_s::toff_first"]
        [::std::mem::offset_of!(asn_TYPE_tag2member_s, toff_first) - 8usize];
    ["Offset of field: asn_TYPE_tag2member_s::toff_last"]
        [::std::mem::offset_of!(asn_TYPE_tag2member_s, toff_last) - 12usize];
};
pub type asn_TYPE_tag2member_t = asn_TYPE_tag2member_s;
unsafe extern "C" {
    pub fn asn_fprint(
        stream: *mut FILE,
        td: *const asn_TYPE_descriptor_t,
        struct_ptr: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    #[doc = " Implementation of the SET OF structure."]
    pub fn asn_set_add(
        asn_set_of_x: *mut ::std::os::raw::c_void,
        ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_set_del(
        asn_set_of_x: *mut ::std::os::raw::c_void,
        number: ::std::os::raw::c_int,
        _do_free: ::std::os::raw::c_int,
    );
}
unsafe extern "C" {
    pub fn asn_set_empty(asn_set_of_x: *mut ::std::os::raw::c_void);
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_anonymous_set_ {
    pub array: *mut *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_anonymous_set_"][::std::mem::size_of::<asn_anonymous_set_>() - 24usize];
    ["Alignment of asn_anonymous_set_"][::std::mem::align_of::<asn_anonymous_set_>() - 8usize];
    ["Offset of field: asn_anonymous_set_::array"]
        [::std::mem::offset_of!(asn_anonymous_set_, array) - 0usize];
    ["Offset of field: asn_anonymous_set_::count"]
        [::std::mem::offset_of!(asn_anonymous_set_, count) - 8usize];
    ["Offset of field: asn_anonymous_set_::size"]
        [::std::mem::offset_of!(asn_anonymous_set_, size) - 12usize];
    ["Offset of field: asn_anonymous_set_::free"]
        [::std::mem::offset_of!(asn_anonymous_set_, free) - 16usize];
};
unsafe extern "C" {
    pub fn asn_sequence_del(
        asn_sequence_of_x: *mut ::std::os::raw::c_void,
        number: ::std::os::raw::c_int,
        _do_free: ::std::os::raw::c_int,
    );
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_anonymous_sequence_ {
    pub array: *mut *mut ::std::os::raw::c_void,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ::std::os::raw::c_void)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_anonymous_sequence_"][::std::mem::size_of::<asn_anonymous_sequence_>() - 24usize];
    ["Alignment of asn_anonymous_sequence_"]
        [::std::mem::align_of::<asn_anonymous_sequence_>() - 8usize];
    ["Offset of field: asn_anonymous_sequence_::array"]
        [::std::mem::offset_of!(asn_anonymous_sequence_, array) - 0usize];
    ["Offset of field: asn_anonymous_sequence_::count"]
        [::std::mem::offset_of!(asn_anonymous_sequence_, count) - 8usize];
    ["Offset of field: asn_anonymous_sequence_::size"]
        [::std::mem::offset_of!(asn_anonymous_sequence_, size) - 12usize];
    ["Offset of field: asn_anonymous_sequence_::free"]
        [::std::mem::offset_of!(asn_anonymous_sequence_, free) - 16usize];
};
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_SET_OF_specifics_s {
    pub struct_size: ::std::os::raw::c_uint,
    pub ctx_offset: ::std::os::raw::c_uint,
    pub as_XMLValueList: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_SET_OF_specifics_s"][::std::mem::size_of::<asn_SET_OF_specifics_s>() - 12usize];
    ["Alignment of asn_SET_OF_specifics_s"]
        [::std::mem::align_of::<asn_SET_OF_specifics_s>() - 4usize];
    ["Offset of field: asn_SET_OF_specifics_s::struct_size"]
        [::std::mem::offset_of!(asn_SET_OF_specifics_s, struct_size) - 0usize];
    ["Offset of field: asn_SET_OF_specifics_s::ctx_offset"]
        [::std::mem::offset_of!(asn_SET_OF_specifics_s, ctx_offset) - 4usize];
    ["Offset of field: asn_SET_OF_specifics_s::as_XMLValueList"]
        [::std::mem::offset_of!(asn_SET_OF_specifics_s, as_XMLValueList) - 8usize];
};
pub type asn_SET_OF_specifics_t = asn_SET_OF_specifics_s;
unsafe extern "C" {
    pub fn SET_OF_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SET_OF_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SET_OF_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SET_OF_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SET_OF_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SET_OF_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
unsafe extern "C" {
    pub static mut asn_OP_SET_OF: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_OF_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SEQUENCE_OF_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_OF_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_OF_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub static mut asn_OP_SEQUENCE_OF: asn_TYPE_operation_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolIE_Field {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolIE_Container_8143P0 {
    pub list: ProtocolIE_Container_8143P0__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolIE_Container_8143P0__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_Field,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_Field)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolIE_Container_8143P0__bindgen_ty_1"]
        [::std::mem::size_of::<ProtocolIE_Container_8143P0__bindgen_ty_1>() - 24usize];
    ["Alignment of ProtocolIE_Container_8143P0__bindgen_ty_1"]
        [::std::mem::align_of::<ProtocolIE_Container_8143P0__bindgen_ty_1>() - 8usize];
    ["Offset of field: ProtocolIE_Container_8143P0__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ProtocolIE_Container_8143P0__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ProtocolIE_Container_8143P0__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ProtocolIE_Container_8143P0__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ProtocolIE_Container_8143P0__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ProtocolIE_Container_8143P0__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ProtocolIE_Container_8143P0__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ProtocolIE_Container_8143P0__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolIE_Container_8143P0"]
        [::std::mem::size_of::<ProtocolIE_Container_8143P0>() - 48usize];
    ["Alignment of ProtocolIE_Container_8143P0"]
        [::std::mem::align_of::<ProtocolIE_Container_8143P0>() - 8usize];
    ["Offset of field: ProtocolIE_Container_8143P0::list"]
        [::std::mem::offset_of!(ProtocolIE_Container_8143P0, list) - 0usize];
    ["Offset of field: ProtocolIE_Container_8143P0::_asn_ctx"]
        [::std::mem::offset_of!(ProtocolIE_Container_8143P0, _asn_ctx) - 24usize];
};
pub type ProtocolIE_Container_8143P0_t = ProtocolIE_Container_8143P0;
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolIE_Container_8143P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ProtocolIE_Container_8143P0_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ProtocolIE_Container_8143P0_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ProtocolIE_Container_8143P0_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ASN__PRIMITIVE_TYPE_s {
    pub buf: *mut u8,
    pub size: usize,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ASN__PRIMITIVE_TYPE_s"][::std::mem::size_of::<ASN__PRIMITIVE_TYPE_s>() - 16usize];
    ["Alignment of ASN__PRIMITIVE_TYPE_s"]
        [::std::mem::align_of::<ASN__PRIMITIVE_TYPE_s>() - 8usize];
    ["Offset of field: ASN__PRIMITIVE_TYPE_s::buf"]
        [::std::mem::offset_of!(ASN__PRIMITIVE_TYPE_s, buf) - 0usize];
    ["Offset of field: ASN__PRIMITIVE_TYPE_s::size"]
        [::std::mem::offset_of!(ASN__PRIMITIVE_TYPE_s, size) - 8usize];
};
pub type ASN__PRIMITIVE_TYPE_t = ASN__PRIMITIVE_TYPE_s;
unsafe extern "C" {
    pub fn ASN__PRIMITIVE_TYPE_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ber_decode_primitive(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn der_encode_primitive(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
pub const xer_pbd_rval_XPBD_SYSTEM_FAILURE: xer_pbd_rval = 0;
pub const xer_pbd_rval_XPBD_DECODER_LIMIT: xer_pbd_rval = 1;
pub const xer_pbd_rval_XPBD_BROKEN_ENCODING: xer_pbd_rval = 2;
pub const xer_pbd_rval_XPBD_NOT_BODY_IGNORE: xer_pbd_rval = 3;
pub const xer_pbd_rval_XPBD_BODY_CONSUMED: xer_pbd_rval = 4;
pub type xer_pbd_rval = ::std::os::raw::c_uint;
pub type xer_primitive_body_decoder_f = ::std::option::Option<
    unsafe extern "C" fn(
        td: *const asn_TYPE_descriptor_t,
        struct_ptr: *mut ::std::os::raw::c_void,
        chunk_buf: *const ::std::os::raw::c_void,
        chunk_size: usize,
    ) -> xer_pbd_rval,
>;
unsafe extern "C" {
    pub fn xer_decode_primitive(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        struct_size: usize,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        prim_body_decoder: xer_primitive_body_decoder_f,
    ) -> asn_dec_rval_t;
}
pub type INTEGER_t = ASN__PRIMITIVE_TYPE_t;
unsafe extern "C" {
    pub static mut asn_DEF_INTEGER: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_INTEGER: asn_TYPE_operation_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_INTEGER_enum_map_s {
    pub nat_value: ::std::os::raw::c_long,
    pub enum_len: usize,
    pub enum_name: *const ::std::os::raw::c_char,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_INTEGER_enum_map_s"][::std::mem::size_of::<asn_INTEGER_enum_map_s>() - 24usize];
    ["Alignment of asn_INTEGER_enum_map_s"]
        [::std::mem::align_of::<asn_INTEGER_enum_map_s>() - 8usize];
    ["Offset of field: asn_INTEGER_enum_map_s::nat_value"]
        [::std::mem::offset_of!(asn_INTEGER_enum_map_s, nat_value) - 0usize];
    ["Offset of field: asn_INTEGER_enum_map_s::enum_len"]
        [::std::mem::offset_of!(asn_INTEGER_enum_map_s, enum_len) - 8usize];
    ["Offset of field: asn_INTEGER_enum_map_s::enum_name"]
        [::std::mem::offset_of!(asn_INTEGER_enum_map_s, enum_name) - 16usize];
};
pub type asn_INTEGER_enum_map_t = asn_INTEGER_enum_map_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_INTEGER_specifics_s {
    pub value2enum: *const asn_INTEGER_enum_map_t,
    pub enum2value: *const ::std::os::raw::c_uint,
    pub map_count: ::std::os::raw::c_int,
    pub extension: ::std::os::raw::c_int,
    pub strict_enumeration: ::std::os::raw::c_int,
    pub field_width: ::std::os::raw::c_int,
    pub field_unsigned: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_INTEGER_specifics_s"][::std::mem::size_of::<asn_INTEGER_specifics_s>() - 40usize];
    ["Alignment of asn_INTEGER_specifics_s"]
        [::std::mem::align_of::<asn_INTEGER_specifics_s>() - 8usize];
    ["Offset of field: asn_INTEGER_specifics_s::value2enum"]
        [::std::mem::offset_of!(asn_INTEGER_specifics_s, value2enum) - 0usize];
    ["Offset of field: asn_INTEGER_specifics_s::enum2value"]
        [::std::mem::offset_of!(asn_INTEGER_specifics_s, enum2value) - 8usize];
    ["Offset of field: asn_INTEGER_specifics_s::map_count"]
        [::std::mem::offset_of!(asn_INTEGER_specifics_s, map_count) - 16usize];
    ["Offset of field: asn_INTEGER_specifics_s::extension"]
        [::std::mem::offset_of!(asn_INTEGER_specifics_s, extension) - 20usize];
    ["Offset of field: asn_INTEGER_specifics_s::strict_enumeration"]
        [::std::mem::offset_of!(asn_INTEGER_specifics_s, strict_enumeration) - 24usize];
    ["Offset of field: asn_INTEGER_specifics_s::field_width"]
        [::std::mem::offset_of!(asn_INTEGER_specifics_s, field_width) - 28usize];
    ["Offset of field: asn_INTEGER_specifics_s::field_unsigned"]
        [::std::mem::offset_of!(asn_INTEGER_specifics_s, field_unsigned) - 32usize];
};
pub type asn_INTEGER_specifics_t = asn_INTEGER_specifics_s;
unsafe extern "C" {
    pub fn INTEGER_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn INTEGER_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn INTEGER_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn INTEGER_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn INTEGER_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn INTEGER_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn INTEGER_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn INTEGER_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn INTEGER_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn INTEGER_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
unsafe extern "C" {
    #[doc = " Some handy conversion routines. *"]
    pub fn asn_INTEGER2imax(i: *const INTEGER_t, l: *mut intmax_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_INTEGER2umax(i: *const INTEGER_t, l: *mut uintmax_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_imax2INTEGER(i: *mut INTEGER_t, l: intmax_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_umax2INTEGER(i: *mut INTEGER_t, l: uintmax_t) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_INTEGER2long(
        i: *const INTEGER_t,
        l: *mut ::std::os::raw::c_long,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_INTEGER2ulong(
        i: *const INTEGER_t,
        l: *mut ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_long2INTEGER(i: *mut INTEGER_t, l: ::std::os::raw::c_long) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn_ulong2INTEGER(
        i: *mut INTEGER_t,
        l: ::std::os::raw::c_ulong,
    ) -> ::std::os::raw::c_int;
}
pub const asn_strtox_result_e_ASN_STRTOX_ERROR_RANGE: asn_strtox_result_e = -3;
pub const asn_strtox_result_e_ASN_STRTOX_ERROR_INVAL: asn_strtox_result_e = -2;
pub const asn_strtox_result_e_ASN_STRTOX_EXPECT_MORE: asn_strtox_result_e = -1;
pub const asn_strtox_result_e_ASN_STRTOX_OK: asn_strtox_result_e = 0;
pub const asn_strtox_result_e_ASN_STRTOX_EXTRA_DATA: asn_strtox_result_e = 1;
pub type asn_strtox_result_e = ::std::os::raw::c_int;
unsafe extern "C" {
    pub fn asn_strtol_lim(
        str_: *const ::std::os::raw::c_char,
        end: *mut *const ::std::os::raw::c_char,
        l: *mut ::std::os::raw::c_long,
    ) -> asn_strtox_result_e;
}
unsafe extern "C" {
    pub fn asn_strtoul_lim(
        str_: *const ::std::os::raw::c_char,
        end: *mut *const ::std::os::raw::c_char,
        l: *mut ::std::os::raw::c_ulong,
    ) -> asn_strtox_result_e;
}
unsafe extern "C" {
    pub fn asn_strtoimax_lim(
        str_: *const ::std::os::raw::c_char,
        end: *mut *const ::std::os::raw::c_char,
        l: *mut intmax_t,
    ) -> asn_strtox_result_e;
}
unsafe extern "C" {
    pub fn asn_strtoumax_lim(
        str_: *const ::std::os::raw::c_char,
        end: *mut *const ::std::os::raw::c_char,
        l: *mut uintmax_t,
    ) -> asn_strtox_result_e;
}
unsafe extern "C" {
    pub fn INTEGER_map_value2enum(
        specs: *const asn_INTEGER_specifics_t,
        value: ::std::os::raw::c_long,
    ) -> *const asn_INTEGER_enum_map_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NativeInteger: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_NativeInteger: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn NativeInteger_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NativeInteger_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NativeInteger_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NativeInteger_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NativeInteger_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
pub type ProtocolIE_ID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ProtocolIE_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolIE_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn __assert_fail(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert_perror_fail(
        __errnum: ::std::os::raw::c_int,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_uint,
        __function: *const ::std::os::raw::c_char,
    ) -> !;
}
unsafe extern "C" {
    pub fn __assert(
        __assertion: *const ::std::os::raw::c_char,
        __file: *const ::std::os::raw::c_char,
        __line: ::std::os::raw::c_int,
    ) -> !;
}
unsafe extern "C" {
    pub fn get_asn1c_environment_version() -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn asn__format_to_callback(
        callback: ::std::option::Option<
            unsafe extern "C" fn(
                arg1: *const ::std::os::raw::c_void,
                arg2: usize,
                key: *mut ::std::os::raw::c_void,
            ) -> ::std::os::raw::c_int,
        >,
        key: *mut ::std::os::raw::c_void,
        fmt: *const ::std::os::raw::c_char,
        ...
    ) -> isize;
}
unsafe extern "C" {
    pub static mut asn_DEF_NativeEnumerated: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_NativeEnumerated: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn NativeEnumerated_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NativeEnumerated_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NativeEnumerated_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NativeEnumerated_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NativeEnumerated_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Criticality_Criticality_reject: Criticality = 0;
pub const Criticality_Criticality_ignore: Criticality = 1;
pub const Criticality_Criticality_notify: Criticality = 2;
pub type Criticality = ::std::os::raw::c_uint;
pub use self::Criticality as e_Criticality;
pub type Criticality_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Criticality_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Criticality: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Criticality_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Criticality_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Criticality_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Criticality_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Criticality_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Criticality_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Criticality_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Criticality_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Criticality_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Criticality_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Criticality_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Criticality_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OCTET_STRING {
    pub buf: *mut u8,
    pub size: usize,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OCTET_STRING"][::std::mem::size_of::<OCTET_STRING>() - 40usize];
    ["Alignment of OCTET_STRING"][::std::mem::align_of::<OCTET_STRING>() - 8usize];
    ["Offset of field: OCTET_STRING::buf"][::std::mem::offset_of!(OCTET_STRING, buf) - 0usize];
    ["Offset of field: OCTET_STRING::size"][::std::mem::offset_of!(OCTET_STRING, size) - 8usize];
    ["Offset of field: OCTET_STRING::_asn_ctx"]
        [::std::mem::offset_of!(OCTET_STRING, _asn_ctx) - 16usize];
};
pub type OCTET_STRING_t = OCTET_STRING;
unsafe extern "C" {
    pub static mut asn_DEF_OCTET_STRING: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_OCTET_STRING: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn OCTET_STRING_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OCTET_STRING_print_utf8(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OCTET_STRING_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OCTET_STRING_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_decode_xer_hex(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_decode_xer_binary(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_decode_xer_utf8(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_encode_xer_utf8(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
unsafe extern "C" {
    #[doc = " Handy conversion routines. *"]
    pub fn OCTET_STRING_fromBuf(
        s: *mut OCTET_STRING_t,
        str_: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OCTET_STRING_new_fromBuf(
        td: *const asn_TYPE_descriptor_t,
        str_: *const ::std::os::raw::c_char,
        size: ::std::os::raw::c_int,
    ) -> *mut OCTET_STRING_t;
}
#[doc = " Internally useful stuff. *"]
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_OCTET_STRING_specifics_s {
    pub struct_size: ::std::os::raw::c_uint,
    pub ctx_offset: ::std::os::raw::c_uint,
    pub subvariant: asn_OCTET_STRING_specifics_s_asn_OS_Subvariant,
}
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_ANY:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 0;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_BIT:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 1;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_STR:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 2;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_U16:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 3;
pub const asn_OCTET_STRING_specifics_s_asn_OS_Subvariant_ASN_OSUBV_U32:
    asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = 4;
pub type asn_OCTET_STRING_specifics_s_asn_OS_Subvariant = ::std::os::raw::c_uint;
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_OCTET_STRING_specifics_s"]
        [::std::mem::size_of::<asn_OCTET_STRING_specifics_s>() - 12usize];
    ["Alignment of asn_OCTET_STRING_specifics_s"]
        [::std::mem::align_of::<asn_OCTET_STRING_specifics_s>() - 4usize];
    ["Offset of field: asn_OCTET_STRING_specifics_s::struct_size"]
        [::std::mem::offset_of!(asn_OCTET_STRING_specifics_s, struct_size) - 0usize];
    ["Offset of field: asn_OCTET_STRING_specifics_s::ctx_offset"]
        [::std::mem::offset_of!(asn_OCTET_STRING_specifics_s, ctx_offset) - 4usize];
    ["Offset of field: asn_OCTET_STRING_specifics_s::subvariant"]
        [::std::mem::offset_of!(asn_OCTET_STRING_specifics_s, subvariant) - 8usize];
};
#[doc = " Internally useful stuff. *"]
pub type asn_OCTET_STRING_specifics_t = asn_OCTET_STRING_specifics_s;
unsafe extern "C" {
    pub static mut asn_SPC_OCTET_STRING_specs: asn_OCTET_STRING_specifics_t;
}
unsafe extern "C" {
    pub fn OCTET_STRING_random_length_constrained(
        arg1: *const asn_TYPE_descriptor_t,
        arg2: *const asn_encoding_constraints_t,
        max_length: usize,
    ) -> usize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ANY {
    pub buf: *mut u8,
    pub size: ::std::os::raw::c_int,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ANY"][::std::mem::size_of::<ANY>() - 40usize];
    ["Alignment of ANY"][::std::mem::align_of::<ANY>() - 8usize];
    ["Offset of field: ANY::buf"][::std::mem::offset_of!(ANY, buf) - 0usize];
    ["Offset of field: ANY::size"][::std::mem::offset_of!(ANY, size) - 8usize];
    ["Offset of field: ANY::_asn_ctx"][::std::mem::offset_of!(ANY, _asn_ctx) - 16usize];
};
pub type ANY_t = ANY;
unsafe extern "C" {
    pub static mut asn_DEF_ANY: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_ANY: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ANY_specs: asn_OCTET_STRING_specifics_t;
}
unsafe extern "C" {
    pub fn ANY_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ANY_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ANY_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ANY_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ANY_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ANY_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ANY_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    #[doc = " Handy conversion routines. *"]
    pub fn ANY_fromType(
        arg1: *mut ANY_t,
        td: *mut asn_TYPE_descriptor_t,
        struct_ptr: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ANY_new_fromType(
        td: *mut asn_TYPE_descriptor_t,
        struct_ptr: *mut ::std::os::raw::c_void,
    ) -> *mut ANY_t;
}
unsafe extern "C" {
    pub fn ANY_to_type(
        arg1: *mut ANY_t,
        td: *mut asn_TYPE_descriptor_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_ioc_set_s {
    pub rows_count: usize,
    pub columns_count: usize,
    pub rows: *const asn_ioc_cell_s,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_ioc_set_s"][::std::mem::size_of::<asn_ioc_set_s>() - 24usize];
    ["Alignment of asn_ioc_set_s"][::std::mem::align_of::<asn_ioc_set_s>() - 8usize];
    ["Offset of field: asn_ioc_set_s::rows_count"]
        [::std::mem::offset_of!(asn_ioc_set_s, rows_count) - 0usize];
    ["Offset of field: asn_ioc_set_s::columns_count"]
        [::std::mem::offset_of!(asn_ioc_set_s, columns_count) - 8usize];
    ["Offset of field: asn_ioc_set_s::rows"][::std::mem::offset_of!(asn_ioc_set_s, rows) - 16usize];
};
pub type asn_ioc_set_t = asn_ioc_set_s;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_ioc_cell_s {
    pub field_name: *const ::std::os::raw::c_char,
    pub cell_kind: asn_ioc_cell_s__bindgen_ty_1,
    pub type_descriptor: *mut asn_TYPE_descriptor_s,
    pub value_sptr: *const ::std::os::raw::c_void,
    pub open_type: asn_ioc_cell_s__bindgen_ty_2,
}
pub const asn_ioc_cell_s_aioc__value: asn_ioc_cell_s__bindgen_ty_1 = 0;
pub const asn_ioc_cell_s_aioc__type: asn_ioc_cell_s__bindgen_ty_1 = 1;
pub const asn_ioc_cell_s_aioc__open_type: asn_ioc_cell_s__bindgen_ty_1 = 2;
pub type asn_ioc_cell_s__bindgen_ty_1 = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_ioc_cell_s__bindgen_ty_2 {
    pub types_count: usize,
    pub types: *mut asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1 {
    pub choice_position: ::std::os::raw::c_uint,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::size_of::<asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Alignment of asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1"]
        [::std::mem::align_of::<asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1>() - 4usize];
    ["Offset of field: asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1::choice_position"][::std::mem::offset_of!(
        asn_ioc_cell_s__bindgen_ty_2__bindgen_ty_1,
        choice_position
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_ioc_cell_s__bindgen_ty_2"]
        [::std::mem::size_of::<asn_ioc_cell_s__bindgen_ty_2>() - 16usize];
    ["Alignment of asn_ioc_cell_s__bindgen_ty_2"]
        [::std::mem::align_of::<asn_ioc_cell_s__bindgen_ty_2>() - 8usize];
    ["Offset of field: asn_ioc_cell_s__bindgen_ty_2::types_count"]
        [::std::mem::offset_of!(asn_ioc_cell_s__bindgen_ty_2, types_count) - 0usize];
    ["Offset of field: asn_ioc_cell_s__bindgen_ty_2::types"]
        [::std::mem::offset_of!(asn_ioc_cell_s__bindgen_ty_2, types) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_ioc_cell_s"][::std::mem::size_of::<asn_ioc_cell_s>() - 48usize];
    ["Alignment of asn_ioc_cell_s"][::std::mem::align_of::<asn_ioc_cell_s>() - 8usize];
    ["Offset of field: asn_ioc_cell_s::field_name"]
        [::std::mem::offset_of!(asn_ioc_cell_s, field_name) - 0usize];
    ["Offset of field: asn_ioc_cell_s::cell_kind"]
        [::std::mem::offset_of!(asn_ioc_cell_s, cell_kind) - 8usize];
    ["Offset of field: asn_ioc_cell_s::type_descriptor"]
        [::std::mem::offset_of!(asn_ioc_cell_s, type_descriptor) - 16usize];
    ["Offset of field: asn_ioc_cell_s::value_sptr"]
        [::std::mem::offset_of!(asn_ioc_cell_s, value_sptr) - 24usize];
    ["Offset of field: asn_ioc_cell_s::open_type"]
        [::std::mem::offset_of!(asn_ioc_cell_s, open_type) - 32usize];
};
pub type asn_ioc_cell_t = asn_ioc_cell_s;
unsafe extern "C" {
    pub static mut asn_OP_OPEN_TYPE: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn OPEN_TYPE_ber_get(
        opt_codec_ctx: *const asn_codec_ctx_t,
        parent_type: *const asn_TYPE_descriptor_t,
        parent_structure: *mut ::std::os::raw::c_void,
        element: *const asn_TYPE_member_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OPEN_TYPE_xer_get(
        opt_codec_ctx: *const asn_codec_ctx_t,
        parent_type: *const asn_TYPE_descriptor_t,
        parent_structure: *mut ::std::os::raw::c_void,
        element: *const asn_TYPE_member_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OPEN_TYPE_oer_get(
        opt_codec_ctx: *const asn_codec_ctx_t,
        parent_type: *const asn_TYPE_descriptor_t,
        parent_structure: *mut ::std::os::raw::c_void,
        element: *mut asn_TYPE_member_t,
        ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OPEN_TYPE_uper_get(
        opt_codec_ctx: *const asn_codec_ctx_t,
        parent_type: *const asn_TYPE_descriptor_t,
        parent_structure: *mut ::std::os::raw::c_void,
        element: *const asn_TYPE_member_t,
        pd: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OPEN_TYPE_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_t,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_CHOICE_specifics_s {
    pub struct_size: ::std::os::raw::c_uint,
    pub ctx_offset: ::std::os::raw::c_uint,
    pub pres_offset: ::std::os::raw::c_uint,
    pub pres_size: ::std::os::raw::c_uint,
    pub tag2el: *const asn_TYPE_tag2member_t,
    pub tag2el_count: ::std::os::raw::c_uint,
    pub to_canonical_order: *const ::std::os::raw::c_uint,
    pub from_canonical_order: *const ::std::os::raw::c_uint,
    pub ext_start: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_CHOICE_specifics_s"][::std::mem::size_of::<asn_CHOICE_specifics_s>() - 56usize];
    ["Alignment of asn_CHOICE_specifics_s"]
        [::std::mem::align_of::<asn_CHOICE_specifics_s>() - 8usize];
    ["Offset of field: asn_CHOICE_specifics_s::struct_size"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, struct_size) - 0usize];
    ["Offset of field: asn_CHOICE_specifics_s::ctx_offset"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, ctx_offset) - 4usize];
    ["Offset of field: asn_CHOICE_specifics_s::pres_offset"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, pres_offset) - 8usize];
    ["Offset of field: asn_CHOICE_specifics_s::pres_size"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, pres_size) - 12usize];
    ["Offset of field: asn_CHOICE_specifics_s::tag2el"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, tag2el) - 16usize];
    ["Offset of field: asn_CHOICE_specifics_s::tag2el_count"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, tag2el_count) - 24usize];
    ["Offset of field: asn_CHOICE_specifics_s::to_canonical_order"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, to_canonical_order) - 32usize];
    ["Offset of field: asn_CHOICE_specifics_s::from_canonical_order"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, from_canonical_order) - 40usize];
    ["Offset of field: asn_CHOICE_specifics_s::ext_start"]
        [::std::mem::offset_of!(asn_CHOICE_specifics_s, ext_start) - 48usize];
};
pub type asn_CHOICE_specifics_t = asn_CHOICE_specifics_s;
unsafe extern "C" {
    pub fn CHOICE_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CHOICE_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CHOICE_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CHOICE_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CHOICE_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CHOICE_outmost_tag(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
    ) -> ber_tlv_tag_t;
}
unsafe extern "C" {
    pub fn CHOICE_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
unsafe extern "C" {
    pub static mut asn_OP_CHOICE: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn CHOICE_variant_get_presence(
        td: *const asn_TYPE_descriptor_t,
        structure_ptr: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_uint;
}
unsafe extern "C" {
    pub fn CHOICE_variant_set_presence(
        td: *const asn_TYPE_descriptor_t,
        structure_ptr: *mut ::std::os::raw::c_void,
        present: ::std::os::raw::c_uint,
    ) -> ::std::os::raw::c_int;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct asn_SEQUENCE_specifics_s {
    pub struct_size: ::std::os::raw::c_uint,
    pub ctx_offset: ::std::os::raw::c_uint,
    pub tag2el: *const asn_TYPE_tag2member_t,
    pub tag2el_count: ::std::os::raw::c_uint,
    pub oms: *const ::std::os::raw::c_int,
    pub roms_count: ::std::os::raw::c_uint,
    pub aoms_count: ::std::os::raw::c_uint,
    pub first_extension: ::std::os::raw::c_int,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of asn_SEQUENCE_specifics_s"]
        [::std::mem::size_of::<asn_SEQUENCE_specifics_s>() - 48usize];
    ["Alignment of asn_SEQUENCE_specifics_s"]
        [::std::mem::align_of::<asn_SEQUENCE_specifics_s>() - 8usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::struct_size"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, struct_size) - 0usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::ctx_offset"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, ctx_offset) - 4usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::tag2el"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, tag2el) - 8usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::tag2el_count"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, tag2el_count) - 16usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::oms"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, oms) - 24usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::roms_count"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, roms_count) - 32usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::aoms_count"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, aoms_count) - 36usize];
    ["Offset of field: asn_SEQUENCE_specifics_s::first_extension"]
        [::std::mem::offset_of!(asn_SEQUENCE_specifics_s, first_extension) - 40usize];
};
pub type asn_SEQUENCE_specifics_t = asn_SEQUENCE_specifics_s;
unsafe extern "C" {
    pub fn SEQUENCE_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SEQUENCE_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SEQUENCE_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SEQUENCE_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SEQUENCE_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SEQUENCE_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
unsafe extern "C" {
    pub static mut asn_OP_SEQUENCE: asn_TYPE_operation_t;
}
pub const ProtocolIE_Field_8149P0__value_PR_ProtocolIE_Field_8149P0__value_PR_NOTHING:
    ProtocolIE_Field_8149P0__value_PR = 0;
pub type ProtocolIE_Field_8149P0__value_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProtocolIE_Field_8149P0 {
    pub id: ProtocolIE_ID_t,
    pub criticality: Criticality_t,
    pub value: ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value {
    pub present: ProtocolIE_Field_8149P0__value_PR,
    pub choice:
        ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value_ProtocolIE_Field_8149P0__value_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub struct ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value_ProtocolIE_Field_8149P0__value_u {
    pub bindgen_union_field: [u8; 0usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value_ProtocolIE_Field_8149P0__value_u"] [:: std :: mem :: size_of :: < ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value_ProtocolIE_Field_8149P0__value_u > () - 0usize] ;
    ["Alignment of ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value_ProtocolIE_Field_8149P0__value_u"] [:: std :: mem :: align_of :: < ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value_ProtocolIE_Field_8149P0__value_u > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value"]
        [::std::mem::size_of::<ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value>() - 32usize];
    ["Alignment of ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value"]
        [::std::mem::align_of::<ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value>() - 8usize];
    ["Offset of field: ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value::present"][::std::mem::offset_of!(
        ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value,
        present
    )
        - 0usize];
    ["Offset of field: ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value::choice"][::std::mem::offset_of!(
        ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value,
        choice
    ) - 4usize];
    ["Offset of field: ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value::_asn_ctx"][::std::mem::offset_of!(
        ProtocolIE_Field_8149P0_ProtocolIE_Field_8149P0__value,
        _asn_ctx
    )
        - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolIE_Field_8149P0"][::std::mem::size_of::<ProtocolIE_Field_8149P0>() - 72usize];
    ["Alignment of ProtocolIE_Field_8149P0"]
        [::std::mem::align_of::<ProtocolIE_Field_8149P0>() - 8usize];
    ["Offset of field: ProtocolIE_Field_8149P0::id"]
        [::std::mem::offset_of!(ProtocolIE_Field_8149P0, id) - 0usize];
    ["Offset of field: ProtocolIE_Field_8149P0::criticality"]
        [::std::mem::offset_of!(ProtocolIE_Field_8149P0, criticality) - 8usize];
    ["Offset of field: ProtocolIE_Field_8149P0::value"]
        [::std::mem::offset_of!(ProtocolIE_Field_8149P0, value) - 16usize];
    ["Offset of field: ProtocolIE_Field_8149P0::_asn_ctx"]
        [::std::mem::offset_of!(ProtocolIE_Field_8149P0, _asn_ctx) - 48usize];
};
pub type ProtocolIE_Field_8149P0_t = ProtocolIE_Field_8149P0;
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolIE_Field_8149P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ProtocolIE_Field_8149P0_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ProtocolIE_Field_8149P0_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkS1cdma2000tunnelling {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UplinkS1cdma2000tunnelling"]
        [::std::mem::size_of::<UplinkS1cdma2000tunnelling>() - 72usize];
    ["Alignment of UplinkS1cdma2000tunnelling"]
        [::std::mem::align_of::<UplinkS1cdma2000tunnelling>() - 8usize];
    ["Offset of field: UplinkS1cdma2000tunnelling::protocolIEs"]
        [::std::mem::offset_of!(UplinkS1cdma2000tunnelling, protocolIEs) - 0usize];
    ["Offset of field: UplinkS1cdma2000tunnelling::_asn_ctx"]
        [::std::mem::offset_of!(UplinkS1cdma2000tunnelling, _asn_ctx) - 48usize];
};
pub type UplinkS1cdma2000tunnelling_t = UplinkS1cdma2000tunnelling;
unsafe extern "C" {
    pub static mut asn_DEF_UplinkS1cdma2000tunnelling: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UplinkS1cdma2000tunnelling_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UplinkS1cdma2000tunnelling_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ErrorIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ErrorIndication"][::std::mem::size_of::<ErrorIndication>() - 72usize];
    ["Alignment of ErrorIndication"][::std::mem::align_of::<ErrorIndication>() - 8usize];
    ["Offset of field: ErrorIndication::protocolIEs"]
        [::std::mem::offset_of!(ErrorIndication, protocolIEs) - 0usize];
    ["Offset of field: ErrorIndication::_asn_ctx"]
        [::std::mem::offset_of!(ErrorIndication, _asn_ctx) - 48usize];
};
pub type ErrorIndication_t = ErrorIndication;
unsafe extern "C" {
    pub static mut asn_DEF_ErrorIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ErrorIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ErrorIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBConfigurationTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBConfigurationTransfer"]
        [::std::mem::size_of::<ENBConfigurationTransfer>() - 72usize];
    ["Alignment of ENBConfigurationTransfer"]
        [::std::mem::align_of::<ENBConfigurationTransfer>() - 8usize];
    ["Offset of field: ENBConfigurationTransfer::protocolIEs"]
        [::std::mem::offset_of!(ENBConfigurationTransfer, protocolIEs) - 0usize];
    ["Offset of field: ENBConfigurationTransfer::_asn_ctx"]
        [::std::mem::offset_of!(ENBConfigurationTransfer, _asn_ctx) - 48usize];
};
pub type ENBConfigurationTransfer_t = ENBConfigurationTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_ENBConfigurationTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBConfigurationTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBConfigurationTransfer_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBStatusTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBStatusTransfer"][::std::mem::size_of::<ENBStatusTransfer>() - 72usize];
    ["Alignment of ENBStatusTransfer"][::std::mem::align_of::<ENBStatusTransfer>() - 8usize];
    ["Offset of field: ENBStatusTransfer::protocolIEs"]
        [::std::mem::offset_of!(ENBStatusTransfer, protocolIEs) - 0usize];
    ["Offset of field: ENBStatusTransfer::_asn_ctx"]
        [::std::mem::offset_of!(ENBStatusTransfer, _asn_ctx) - 48usize];
};
pub type ENBStatusTransfer_t = ENBStatusTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_ENBStatusTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBStatusTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBStatusTransfer_1: [asn_TYPE_member_t; 1usize];
}
pub type asn_oid_arc_t = u32;
pub type OBJECT_IDENTIFIER_t = ASN__PRIMITIVE_TYPE_t;
unsafe extern "C" {
    pub static mut asn_DEF_OBJECT_IDENTIFIER: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_OBJECT_IDENTIFIER: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_get_arcs(
        oid: *const OBJECT_IDENTIFIER_t,
        arcs: *mut asn_oid_arc_t,
        arc_slots: usize,
    ) -> isize;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_set_arcs(
        oid: *mut OBJECT_IDENTIFIER_t,
        arcs: *const asn_oid_arc_t,
        arcs_count: usize,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_parse_arcs(
        oid_text: *const ::std::os::raw::c_char,
        oid_txt_length: isize,
        arcs: *mut asn_oid_arc_t,
        arcs_count: usize,
        opt_oid_text_end: *mut *const ::std::os::raw::c_char,
    ) -> isize;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_get_single_arc(
        arcbuf: *const u8,
        arcbuf_len: usize,
        ret_value: *mut asn_oid_arc_t,
    ) -> isize;
}
unsafe extern "C" {
    pub fn OBJECT_IDENTIFIER_set_single_arc(
        arcbuf: *mut u8,
        arcbuf_len: usize,
        arc_value: asn_oid_arc_t,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverRequestAcknowledge {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverRequestAcknowledge"]
        [::std::mem::size_of::<HandoverRequestAcknowledge>() - 72usize];
    ["Alignment of HandoverRequestAcknowledge"]
        [::std::mem::align_of::<HandoverRequestAcknowledge>() - 8usize];
    ["Offset of field: HandoverRequestAcknowledge::protocolIEs"]
        [::std::mem::offset_of!(HandoverRequestAcknowledge, protocolIEs) - 0usize];
    ["Offset of field: HandoverRequestAcknowledge::_asn_ctx"]
        [::std::mem::offset_of!(HandoverRequestAcknowledge, _asn_ctx) - 48usize];
};
pub type HandoverRequestAcknowledge_t = HandoverRequestAcknowledge;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverRequestAcknowledge: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverRequestAcknowledge_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverRequestAcknowledge_1: [asn_TYPE_member_t; 1usize];
}
pub const LTE_M_Indication_LTE_M_Indication_lte_m: LTE_M_Indication = 0;
pub type LTE_M_Indication = ::std::os::raw::c_uint;
pub use self::LTE_M_Indication as e_LTE_M_Indication;
pub type LTE_M_Indication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_LTE_M_Indication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LTE_M_Indication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LTE_M_Indication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type TBCD_STRING_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_TBCD_STRING_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_TBCD_STRING: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TBCD_STRING_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TBCD_STRING_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TBCD_STRING_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TBCD_STRING_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type PLMNidentity_t = TBCD_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_PLMNidentity_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PLMNidentity: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PLMNidentity_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PLMNidentity_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PLMNidentity_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PLMNidentity_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type LAC_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_LAC_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_LAC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn LAC_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LAC_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LAC_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LAC_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LAC_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LAC_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LAC_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LAC_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LAC_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LAC_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LAC_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type CI_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_CI_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CI_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CI_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CI_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CI_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CI_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CI_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CI_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CI_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CI_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CI_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CI_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type RAC_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_RAC_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_RAC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RAC_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RAC_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RAC_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RAC_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAC_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAC_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAC_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAC_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAC_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAC_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAC_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolExtensionContainer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CGI {
    pub pLMNidentity: PLMNidentity_t,
    pub lAC: LAC_t,
    pub cI: CI_t,
    pub rAC: *mut RAC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CGI"][::std::mem::size_of::<CGI>() - 160usize];
    ["Alignment of CGI"][::std::mem::align_of::<CGI>() - 8usize];
    ["Offset of field: CGI::pLMNidentity"][::std::mem::offset_of!(CGI, pLMNidentity) - 0usize];
    ["Offset of field: CGI::lAC"][::std::mem::offset_of!(CGI, lAC) - 40usize];
    ["Offset of field: CGI::cI"][::std::mem::offset_of!(CGI, cI) - 80usize];
    ["Offset of field: CGI::rAC"][::std::mem::offset_of!(CGI, rAC) - 120usize];
    ["Offset of field: CGI::iE_Extensions"][::std::mem::offset_of!(CGI, iE_Extensions) - 128usize];
    ["Offset of field: CGI::_asn_ctx"][::std::mem::offset_of!(CGI, _asn_ctx) - 136usize];
};
pub type CGI_t = CGI;
unsafe extern "C" {
    pub static mut asn_DEF_CGI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CGI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CGI_1: [asn_TYPE_member_t; 5usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolExtensionField {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolExtensionContainer_8194P0 {
    pub list: ProtocolExtensionContainer_8194P0__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolExtensionContainer_8194P0__bindgen_ty_1 {
    pub array: *mut *mut ProtocolExtensionField,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolExtensionField)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolExtensionContainer_8194P0__bindgen_ty_1"]
        [::std::mem::size_of::<ProtocolExtensionContainer_8194P0__bindgen_ty_1>() - 24usize];
    ["Alignment of ProtocolExtensionContainer_8194P0__bindgen_ty_1"]
        [::std::mem::align_of::<ProtocolExtensionContainer_8194P0__bindgen_ty_1>() - 8usize];
    ["Offset of field: ProtocolExtensionContainer_8194P0__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ProtocolExtensionContainer_8194P0__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ProtocolExtensionContainer_8194P0__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ProtocolExtensionContainer_8194P0__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ProtocolExtensionContainer_8194P0__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ProtocolExtensionContainer_8194P0__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ProtocolExtensionContainer_8194P0__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ProtocolExtensionContainer_8194P0__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolExtensionContainer_8194P0"]
        [::std::mem::size_of::<ProtocolExtensionContainer_8194P0>() - 48usize];
    ["Alignment of ProtocolExtensionContainer_8194P0"]
        [::std::mem::align_of::<ProtocolExtensionContainer_8194P0>() - 8usize];
    ["Offset of field: ProtocolExtensionContainer_8194P0::list"]
        [::std::mem::offset_of!(ProtocolExtensionContainer_8194P0, list) - 0usize];
    ["Offset of field: ProtocolExtensionContainer_8194P0::_asn_ctx"]
        [::std::mem::offset_of!(ProtocolExtensionContainer_8194P0, _asn_ctx) - 24usize];
};
pub type ProtocolExtensionContainer_8194P0_t = ProtocolExtensionContainer_8194P0;
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolExtensionContainer_8194P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ProtocolExtensionContainer_8194P0_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ProtocolExtensionContainer_8194P0_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ProtocolExtensionContainer_8194P0_constr_1: asn_per_constraints_t;
}
pub type ProtocolExtensionID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ProtocolExtensionID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolExtensionID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolExtensionID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ProtocolExtensionField_8197P0__extensionValue_PR_ProtocolExtensionField_8197P0__extensionValue_PR_NOTHING : ProtocolExtensionField_8197P0__extensionValue_PR = 0 ;
pub type ProtocolExtensionField_8197P0__extensionValue_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProtocolExtensionField_8197P0 {
    pub id: ProtocolExtensionID_t,
    pub criticality: Criticality_t,
    pub extensionValue: ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue { pub present : ProtocolExtensionField_8197P0__extensionValue_PR , pub choice : ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue_ProtocolExtensionField_8197P0__extensionValue_u , pub _asn_ctx : asn_struct_ctx_t , }
#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub struct ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue_ProtocolExtensionField_8197P0__extensionValue_u
{
    pub bindgen_union_field: [u8; 0usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue_ProtocolExtensionField_8197P0__extensionValue_u"] [:: std :: mem :: size_of :: < ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue_ProtocolExtensionField_8197P0__extensionValue_u > () - 0usize] ;
    ["Alignment of ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue_ProtocolExtensionField_8197P0__extensionValue_u"] [:: std :: mem :: align_of :: < ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue_ProtocolExtensionField_8197P0__extensionValue_u > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue"]
        [::std::mem::size_of::<
            ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue,
        >() - 32usize];
    ["Alignment of ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue"]
        [::std::mem::align_of::<
            ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue,
        >() - 8usize];
    ["Offset of field: ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue::present"] [:: std :: mem :: offset_of ! (ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue , present) - 0usize] ;
    ["Offset of field: ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue::choice"] [:: std :: mem :: offset_of ! (ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue , choice) - 4usize] ;
    ["Offset of field: ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue::_asn_ctx"] [:: std :: mem :: offset_of ! (ProtocolExtensionField_8197P0_ProtocolExtensionField_8197P0__extensionValue , _asn_ctx) - 8usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolExtensionField_8197P0"]
        [::std::mem::size_of::<ProtocolExtensionField_8197P0>() - 72usize];
    ["Alignment of ProtocolExtensionField_8197P0"]
        [::std::mem::align_of::<ProtocolExtensionField_8197P0>() - 8usize];
    ["Offset of field: ProtocolExtensionField_8197P0::id"]
        [::std::mem::offset_of!(ProtocolExtensionField_8197P0, id) - 0usize];
    ["Offset of field: ProtocolExtensionField_8197P0::criticality"]
        [::std::mem::offset_of!(ProtocolExtensionField_8197P0, criticality) - 8usize];
    ["Offset of field: ProtocolExtensionField_8197P0::extensionValue"]
        [::std::mem::offset_of!(ProtocolExtensionField_8197P0, extensionValue) - 16usize];
    ["Offset of field: ProtocolExtensionField_8197P0::_asn_ctx"]
        [::std::mem::offset_of!(ProtocolExtensionField_8197P0, _asn_ctx) - 48usize];
};
pub type ProtocolExtensionField_8197P0_t = ProtocolExtensionField_8197P0;
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolExtensionField_8197P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ProtocolExtensionField_8197P0_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ProtocolExtensionField_8197P0_1: [asn_TYPE_member_t; 3usize];
}
pub const BluetoothMeasConfig_BluetoothMeasConfig_setup: BluetoothMeasConfig = 0;
pub type BluetoothMeasConfig = ::std::os::raw::c_uint;
pub use self::BluetoothMeasConfig as e_BluetoothMeasConfig;
pub type BluetoothMeasConfig_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_BluetoothMeasConfig_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_BluetoothMeasConfig: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_BluetoothMeasConfig_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothMeasConfig_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type TAC_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_TAC_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_TAC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TAC_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TAC_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TAC_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TAC_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TAC_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TAC_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TAC_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TAC_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TAC_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TAC_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TAC_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MSClassmark3_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_MSClassmark3: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MSClassmark3_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MSClassmark3_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MSClassmark3_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark3_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BIT_STRING_s {
    pub buf: *mut u8,
    pub size: usize,
    pub bits_unused: ::std::os::raw::c_int,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BIT_STRING_s"][::std::mem::size_of::<BIT_STRING_s>() - 48usize];
    ["Alignment of BIT_STRING_s"][::std::mem::align_of::<BIT_STRING_s>() - 8usize];
    ["Offset of field: BIT_STRING_s::buf"][::std::mem::offset_of!(BIT_STRING_s, buf) - 0usize];
    ["Offset of field: BIT_STRING_s::size"][::std::mem::offset_of!(BIT_STRING_s, size) - 8usize];
    ["Offset of field: BIT_STRING_s::bits_unused"]
        [::std::mem::offset_of!(BIT_STRING_s, bits_unused) - 16usize];
    ["Offset of field: BIT_STRING_s::_asn_ctx"]
        [::std::mem::offset_of!(BIT_STRING_s, _asn_ctx) - 24usize];
};
pub type BIT_STRING_t = BIT_STRING_s;
unsafe extern "C" {
    pub static mut asn_DEF_BIT_STRING: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_BIT_STRING: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_BIT_STRING_specs: asn_OCTET_STRING_specifics_t;
}
unsafe extern "C" {
    pub fn BIT_STRING_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BIT_STRING_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BIT_STRING_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BIT_STRING_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BIT_STRING_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BIT_STRING_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BIT_STRING_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BIT_STRING_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BIT_STRING_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
pub type NRCellIdentity_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_NRCellIdentity_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NRCellIdentity: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NRCellIdentity_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRCellIdentity_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRCellIdentity_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRCellIdentity_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NR_CGI {
    pub pLMNIdentity: PLMNidentity_t,
    pub nRCellIdentity: NRCellIdentity_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NR_CGI"][::std::mem::size_of::<NR_CGI>() - 120usize];
    ["Alignment of NR_CGI"][::std::mem::align_of::<NR_CGI>() - 8usize];
    ["Offset of field: NR_CGI::pLMNIdentity"]
        [::std::mem::offset_of!(NR_CGI, pLMNIdentity) - 0usize];
    ["Offset of field: NR_CGI::nRCellIdentity"]
        [::std::mem::offset_of!(NR_CGI, nRCellIdentity) - 40usize];
    ["Offset of field: NR_CGI::iE_Extensions"]
        [::std::mem::offset_of!(NR_CGI, iE_Extensions) - 88usize];
    ["Offset of field: NR_CGI::_asn_ctx"][::std::mem::offset_of!(NR_CGI, _asn_ctx) - 96usize];
};
pub type NR_CGI_t = NR_CGI;
unsafe extern "C" {
    pub static mut asn_DEF_NR_CGI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_NR_CGI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_NR_CGI_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TACList_In_LTE_NTN {
    pub list: TACList_In_LTE_NTN__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TACList_In_LTE_NTN__bindgen_ty_1 {
    pub array: *mut *mut TAC_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAC_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TACList_In_LTE_NTN__bindgen_ty_1"]
        [::std::mem::size_of::<TACList_In_LTE_NTN__bindgen_ty_1>() - 24usize];
    ["Alignment of TACList_In_LTE_NTN__bindgen_ty_1"]
        [::std::mem::align_of::<TACList_In_LTE_NTN__bindgen_ty_1>() - 8usize];
    ["Offset of field: TACList_In_LTE_NTN__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TACList_In_LTE_NTN__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TACList_In_LTE_NTN__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TACList_In_LTE_NTN__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TACList_In_LTE_NTN__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TACList_In_LTE_NTN__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TACList_In_LTE_NTN__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TACList_In_LTE_NTN__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TACList_In_LTE_NTN"][::std::mem::size_of::<TACList_In_LTE_NTN>() - 48usize];
    ["Alignment of TACList_In_LTE_NTN"][::std::mem::align_of::<TACList_In_LTE_NTN>() - 8usize];
    ["Offset of field: TACList_In_LTE_NTN::list"]
        [::std::mem::offset_of!(TACList_In_LTE_NTN, list) - 0usize];
    ["Offset of field: TACList_In_LTE_NTN::_asn_ctx"]
        [::std::mem::offset_of!(TACList_In_LTE_NTN, _asn_ctx) - 24usize];
};
pub type TACList_In_LTE_NTN_t = TACList_In_LTE_NTN;
unsafe extern "C" {
    pub static mut asn_DEF_TACList_In_LTE_NTN: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TACList_In_LTE_NTN_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TACList_In_LTE_NTN_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TACList_In_LTE_NTN_constr_1: asn_per_constraints_t;
}
pub type ProcedureCode_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ProcedureCode_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ProcedureCode: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ProcedureCode_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProcedureCode_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProcedureCode_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProcedureCode_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const IntegrityProtectionIndication_IntegrityProtectionIndication_required:
    IntegrityProtectionIndication = 0;
pub const IntegrityProtectionIndication_IntegrityProtectionIndication_preferred:
    IntegrityProtectionIndication = 1;
pub const IntegrityProtectionIndication_IntegrityProtectionIndication_not_needed:
    IntegrityProtectionIndication = 2;
pub type IntegrityProtectionIndication = ::std::os::raw::c_uint;
pub use self::IntegrityProtectionIndication as e_IntegrityProtectionIndication;
pub type IntegrityProtectionIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_IntegrityProtectionIndication_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_IntegrityProtectionIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_IntegrityProtectionIndication_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecurityIndication {
    pub integrityProtectionIndication: IntegrityProtectionIndication_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecurityIndication"][::std::mem::size_of::<SecurityIndication>() - 40usize];
    ["Alignment of SecurityIndication"][::std::mem::align_of::<SecurityIndication>() - 8usize];
    ["Offset of field: SecurityIndication::integrityProtectionIndication"]
        [::std::mem::offset_of!(SecurityIndication, integrityProtectionIndication) - 0usize];
    ["Offset of field: SecurityIndication::iE_Extensions"]
        [::std::mem::offset_of!(SecurityIndication, iE_Extensions) - 8usize];
    ["Offset of field: SecurityIndication::_asn_ctx"]
        [::std::mem::offset_of!(SecurityIndication, _asn_ctx) - 16usize];
};
pub type SecurityIndication_t = SecurityIndication;
unsafe extern "C" {
    pub static mut asn_DEF_SecurityIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SecurityIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SecurityIndication_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UERadioCapabilityIDMappingRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UERadioCapabilityIDMappingRequest"]
        [::std::mem::size_of::<UERadioCapabilityIDMappingRequest>() - 72usize];
    ["Alignment of UERadioCapabilityIDMappingRequest"]
        [::std::mem::align_of::<UERadioCapabilityIDMappingRequest>() - 8usize];
    ["Offset of field: UERadioCapabilityIDMappingRequest::protocolIEs"]
        [::std::mem::offset_of!(UERadioCapabilityIDMappingRequest, protocolIEs) - 0usize];
    ["Offset of field: UERadioCapabilityIDMappingRequest::_asn_ctx"]
        [::std::mem::offset_of!(UERadioCapabilityIDMappingRequest, _asn_ctx) - 48usize];
};
pub type UERadioCapabilityIDMappingRequest_t = UERadioCapabilityIDMappingRequest;
unsafe extern "C" {
    pub static mut asn_DEF_UERadioCapabilityIDMappingRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UERadioCapabilityIDMappingRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UERadioCapabilityIDMappingRequest_1: [asn_TYPE_member_t; 1usize];
}
pub const CauseRadioNetwork_CauseRadioNetwork_unspecified: CauseRadioNetwork = 0;
pub const CauseRadioNetwork_CauseRadioNetwork_tx2relocoverall_expiry: CauseRadioNetwork = 1;
pub const CauseRadioNetwork_CauseRadioNetwork_successful_handover: CauseRadioNetwork = 2;
pub const CauseRadioNetwork_CauseRadioNetwork_release_due_to_eutran_generated_reason:
    CauseRadioNetwork = 3;
pub const CauseRadioNetwork_CauseRadioNetwork_handover_cancelled: CauseRadioNetwork = 4;
pub const CauseRadioNetwork_CauseRadioNetwork_partial_handover: CauseRadioNetwork = 5;
pub const CauseRadioNetwork_CauseRadioNetwork_ho_failure_in_target_EPC_eNB_or_target_system:
    CauseRadioNetwork = 6;
pub const CauseRadioNetwork_CauseRadioNetwork_ho_target_not_allowed: CauseRadioNetwork = 7;
pub const CauseRadioNetwork_CauseRadioNetwork_tS1relocoverall_expiry: CauseRadioNetwork = 8;
pub const CauseRadioNetwork_CauseRadioNetwork_tS1relocprep_expiry: CauseRadioNetwork = 9;
pub const CauseRadioNetwork_CauseRadioNetwork_cell_not_available: CauseRadioNetwork = 10;
pub const CauseRadioNetwork_CauseRadioNetwork_unknown_targetID: CauseRadioNetwork = 11;
pub const CauseRadioNetwork_CauseRadioNetwork_no_radio_resources_available_in_target_cell:
    CauseRadioNetwork = 12;
pub const CauseRadioNetwork_CauseRadioNetwork_unknown_mme_ue_s1ap_id: CauseRadioNetwork = 13;
pub const CauseRadioNetwork_CauseRadioNetwork_unknown_enb_ue_s1ap_id: CauseRadioNetwork = 14;
pub const CauseRadioNetwork_CauseRadioNetwork_unknown_pair_ue_s1ap_id: CauseRadioNetwork = 15;
pub const CauseRadioNetwork_CauseRadioNetwork_handover_desirable_for_radio_reason:
    CauseRadioNetwork = 16;
pub const CauseRadioNetwork_CauseRadioNetwork_time_critical_handover: CauseRadioNetwork = 17;
pub const CauseRadioNetwork_CauseRadioNetwork_resource_optimisation_handover: CauseRadioNetwork =
    18;
pub const CauseRadioNetwork_CauseRadioNetwork_reduce_load_in_serving_cell: CauseRadioNetwork = 19;
pub const CauseRadioNetwork_CauseRadioNetwork_user_inactivity: CauseRadioNetwork = 20;
pub const CauseRadioNetwork_CauseRadioNetwork_radio_connection_with_ue_lost: CauseRadioNetwork = 21;
pub const CauseRadioNetwork_CauseRadioNetwork_load_balancing_tau_required: CauseRadioNetwork = 22;
pub const CauseRadioNetwork_CauseRadioNetwork_cs_fallback_triggered: CauseRadioNetwork = 23;
pub const CauseRadioNetwork_CauseRadioNetwork_ue_not_available_for_ps_service: CauseRadioNetwork =
    24;
pub const CauseRadioNetwork_CauseRadioNetwork_radio_resources_not_available: CauseRadioNetwork = 25;
pub const CauseRadioNetwork_CauseRadioNetwork_failure_in_radio_interface_procedure:
    CauseRadioNetwork = 26;
pub const CauseRadioNetwork_CauseRadioNetwork_invalid_qos_combination: CauseRadioNetwork = 27;
pub const CauseRadioNetwork_CauseRadioNetwork_interrat_redirection: CauseRadioNetwork = 28;
pub const CauseRadioNetwork_CauseRadioNetwork_interaction_with_other_procedure: CauseRadioNetwork =
    29;
pub const CauseRadioNetwork_CauseRadioNetwork_unknown_E_RAB_ID: CauseRadioNetwork = 30;
pub const CauseRadioNetwork_CauseRadioNetwork_multiple_E_RAB_ID_instances: CauseRadioNetwork = 31;
pub const CauseRadioNetwork_CauseRadioNetwork_encryption_and_or_integrity_protection_algorithms_not_supported : CauseRadioNetwork = 32 ;
pub const CauseRadioNetwork_CauseRadioNetwork_s1_intra_system_handover_triggered:
    CauseRadioNetwork = 33;
pub const CauseRadioNetwork_CauseRadioNetwork_s1_inter_system_handover_triggered:
    CauseRadioNetwork = 34;
pub const CauseRadioNetwork_CauseRadioNetwork_x2_handover_triggered: CauseRadioNetwork = 35;
pub const CauseRadioNetwork_CauseRadioNetwork_redirection_towards_1xRTT: CauseRadioNetwork = 36;
pub const CauseRadioNetwork_CauseRadioNetwork_not_supported_QCI_value: CauseRadioNetwork = 37;
pub const CauseRadioNetwork_CauseRadioNetwork_invalid_CSG_Id: CauseRadioNetwork = 38;
pub const CauseRadioNetwork_CauseRadioNetwork_release_due_to_pre_emption: CauseRadioNetwork = 39;
pub const CauseRadioNetwork_CauseRadioNetwork_n26_interface_not_available: CauseRadioNetwork = 40;
pub const CauseRadioNetwork_CauseRadioNetwork_insufficient_ue_capabilities: CauseRadioNetwork = 41;
pub const CauseRadioNetwork_CauseRadioNetwork_maximum_bearer_pre_emption_rate_exceeded:
    CauseRadioNetwork = 42;
pub const CauseRadioNetwork_CauseRadioNetwork_up_integrity_protection_not_possible:
    CauseRadioNetwork = 43;
pub type CauseRadioNetwork = ::std::os::raw::c_uint;
pub use self::CauseRadioNetwork as e_CauseRadioNetwork;
pub type CauseRadioNetwork_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CauseRadioNetwork_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CauseRadioNetwork: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CauseRadioNetwork_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseRadioNetwork_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const CauseTransport_CauseTransport_transport_resource_unavailable: CauseTransport = 0;
pub const CauseTransport_CauseTransport_unspecified: CauseTransport = 1;
pub type CauseTransport = ::std::os::raw::c_uint;
pub use self::CauseTransport as e_CauseTransport;
pub type CauseTransport_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CauseTransport_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CauseTransport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CauseTransport_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CauseTransport_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CauseTransport_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseTransport_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseTransport_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseTransport_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseTransport_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseTransport_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseTransport_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseTransport_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseTransport_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseTransport_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const CauseNas_CauseNas_normal_release: CauseNas = 0;
pub const CauseNas_CauseNas_authentication_failure: CauseNas = 1;
pub const CauseNas_CauseNas_detach: CauseNas = 2;
pub const CauseNas_CauseNas_unspecified: CauseNas = 3;
pub const CauseNas_CauseNas_csg_subscription_expiry: CauseNas = 4;
pub const CauseNas_CauseNas_uE_not_in_PLMN_serving_area: CauseNas = 5;
pub type CauseNas = ::std::os::raw::c_uint;
pub use self::CauseNas as e_CauseNas;
pub type CauseNas_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CauseNas_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CauseNas: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CauseNas_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CauseNas_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CauseNas_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseNas_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseNas_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseNas_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseNas_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseNas_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseNas_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseNas_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseNas_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseNas_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const CauseProtocol_CauseProtocol_transfer_syntax_error: CauseProtocol = 0;
pub const CauseProtocol_CauseProtocol_abstract_syntax_error_reject: CauseProtocol = 1;
pub const CauseProtocol_CauseProtocol_abstract_syntax_error_ignore_and_notify: CauseProtocol = 2;
pub const CauseProtocol_CauseProtocol_message_not_compatible_with_receiver_state: CauseProtocol = 3;
pub const CauseProtocol_CauseProtocol_semantic_error: CauseProtocol = 4;
pub const CauseProtocol_CauseProtocol_abstract_syntax_error_falsely_constructed_message:
    CauseProtocol = 5;
pub const CauseProtocol_CauseProtocol_unspecified: CauseProtocol = 6;
pub type CauseProtocol = ::std::os::raw::c_uint;
pub use self::CauseProtocol as e_CauseProtocol;
pub type CauseProtocol_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CauseProtocol_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CauseProtocol: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CauseProtocol_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CauseProtocol_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseProtocol_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseProtocol_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseProtocol_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const CauseMisc_CauseMisc_control_processing_overload: CauseMisc = 0;
pub const CauseMisc_CauseMisc_not_enough_user_plane_processing_resources: CauseMisc = 1;
pub const CauseMisc_CauseMisc_hardware_failure: CauseMisc = 2;
pub const CauseMisc_CauseMisc_om_intervention: CauseMisc = 3;
pub const CauseMisc_CauseMisc_unspecified: CauseMisc = 4;
pub const CauseMisc_CauseMisc_unknown_PLMN: CauseMisc = 5;
pub type CauseMisc = ::std::os::raw::c_uint;
pub use self::CauseMisc as e_CauseMisc;
pub type CauseMisc_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CauseMisc_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CauseMisc: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CauseMisc_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CauseMisc_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CauseMisc_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseMisc_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CauseMisc_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseMisc_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseMisc_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseMisc_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseMisc_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseMisc_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CauseMisc_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CauseMisc_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Cause_PR_Cause_PR_NOTHING: Cause_PR = 0;
pub const Cause_PR_Cause_PR_radioNetwork: Cause_PR = 1;
pub const Cause_PR_Cause_PR_transport: Cause_PR = 2;
pub const Cause_PR_Cause_PR_nas: Cause_PR = 3;
pub const Cause_PR_Cause_PR_protocol: Cause_PR = 4;
pub const Cause_PR_Cause_PR_misc: Cause_PR = 5;
pub type Cause_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Cause {
    pub present: Cause_PR,
    pub choice: Cause_Cause_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Cause_Cause_u {
    pub radioNetwork: CauseRadioNetwork_t,
    pub transport: CauseTransport_t,
    pub nas: CauseNas_t,
    pub protocol: CauseProtocol_t,
    pub misc: CauseMisc_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cause_Cause_u"][::std::mem::size_of::<Cause_Cause_u>() - 8usize];
    ["Alignment of Cause_Cause_u"][::std::mem::align_of::<Cause_Cause_u>() - 8usize];
    ["Offset of field: Cause_Cause_u::radioNetwork"]
        [::std::mem::offset_of!(Cause_Cause_u, radioNetwork) - 0usize];
    ["Offset of field: Cause_Cause_u::transport"]
        [::std::mem::offset_of!(Cause_Cause_u, transport) - 0usize];
    ["Offset of field: Cause_Cause_u::nas"][::std::mem::offset_of!(Cause_Cause_u, nas) - 0usize];
    ["Offset of field: Cause_Cause_u::protocol"]
        [::std::mem::offset_of!(Cause_Cause_u, protocol) - 0usize];
    ["Offset of field: Cause_Cause_u::misc"][::std::mem::offset_of!(Cause_Cause_u, misc) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cause"][::std::mem::size_of::<Cause>() - 40usize];
    ["Alignment of Cause"][::std::mem::align_of::<Cause>() - 8usize];
    ["Offset of field: Cause::present"][::std::mem::offset_of!(Cause, present) - 0usize];
    ["Offset of field: Cause::choice"][::std::mem::offset_of!(Cause, choice) - 8usize];
    ["Offset of field: Cause::_asn_ctx"][::std::mem::offset_of!(Cause, _asn_ctx) - 16usize];
};
pub type Cause_t = Cause;
unsafe extern "C" {
    pub static mut asn_DEF_Cause: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Cause_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Cause_1: [asn_TYPE_member_t; 5usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_Cause_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModificationIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModificationIndication"]
        [::std::mem::size_of::<E_RABModificationIndication>() - 72usize];
    ["Alignment of E_RABModificationIndication"]
        [::std::mem::align_of::<E_RABModificationIndication>() - 8usize];
    ["Offset of field: E_RABModificationIndication::protocolIEs"]
        [::std::mem::offset_of!(E_RABModificationIndication, protocolIEs) - 0usize];
    ["Offset of field: E_RABModificationIndication::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModificationIndication, _asn_ctx) - 48usize];
};
pub type E_RABModificationIndication_t = E_RABModificationIndication;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModificationIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABModificationIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABModificationIndication_1: [asn_TYPE_member_t; 1usize];
}
pub type MME_Group_ID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_MME_Group_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_MME_Group_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MME_Group_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MME_Group_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MME_Group_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Group_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ScheduledCommunicationTime {
    pub dayofWeek: *mut BIT_STRING_t,
    pub timeofDayStart: *mut ::std::os::raw::c_long,
    pub timeofDayEnd: *mut ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ScheduledCommunicationTime"]
        [::std::mem::size_of::<ScheduledCommunicationTime>() - 56usize];
    ["Alignment of ScheduledCommunicationTime"]
        [::std::mem::align_of::<ScheduledCommunicationTime>() - 8usize];
    ["Offset of field: ScheduledCommunicationTime::dayofWeek"]
        [::std::mem::offset_of!(ScheduledCommunicationTime, dayofWeek) - 0usize];
    ["Offset of field: ScheduledCommunicationTime::timeofDayStart"]
        [::std::mem::offset_of!(ScheduledCommunicationTime, timeofDayStart) - 8usize];
    ["Offset of field: ScheduledCommunicationTime::timeofDayEnd"]
        [::std::mem::offset_of!(ScheduledCommunicationTime, timeofDayEnd) - 16usize];
    ["Offset of field: ScheduledCommunicationTime::iE_Extensions"]
        [::std::mem::offset_of!(ScheduledCommunicationTime, iE_Extensions) - 24usize];
    ["Offset of field: ScheduledCommunicationTime::_asn_ctx"]
        [::std::mem::offset_of!(ScheduledCommunicationTime, _asn_ctx) - 32usize];
};
pub type ScheduledCommunicationTime_t = ScheduledCommunicationTime;
unsafe extern "C" {
    pub static mut asn_DEF_ScheduledCommunicationTime: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ScheduledCommunicationTime_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ScheduledCommunicationTime_1: [asn_TYPE_member_t; 4usize];
}
pub type E_RAB_ID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_E_RAB_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_E_RAB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RAB_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RAB_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RAB_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type TransportLayerAddress_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_TransportLayerAddress_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_TransportLayerAddress: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TransportLayerAddress_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TransportLayerAddress_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type GTP_TEID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_GTP_TEID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_GTP_TEID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn GTP_TEID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GTP_TEID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GTP_TEID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GTP_TEID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupItemCtxtSURes {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupItemCtxtSURes"]
        [::std::mem::size_of::<E_RABSetupItemCtxtSURes>() - 128usize];
    ["Alignment of E_RABSetupItemCtxtSURes"]
        [::std::mem::align_of::<E_RABSetupItemCtxtSURes>() - 8usize];
    ["Offset of field: E_RABSetupItemCtxtSURes::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABSetupItemCtxtSURes, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABSetupItemCtxtSURes::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABSetupItemCtxtSURes, transportLayerAddress) - 8usize];
    ["Offset of field: E_RABSetupItemCtxtSURes::gTP_TEID"]
        [::std::mem::offset_of!(E_RABSetupItemCtxtSURes, gTP_TEID) - 56usize];
    ["Offset of field: E_RABSetupItemCtxtSURes::iE_Extensions"]
        [::std::mem::offset_of!(E_RABSetupItemCtxtSURes, iE_Extensions) - 96usize];
    ["Offset of field: E_RABSetupItemCtxtSURes::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSetupItemCtxtSURes, _asn_ctx) - 104usize];
};
pub type E_RABSetupItemCtxtSURes_t = E_RABSetupItemCtxtSURes;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSetupItemCtxtSURes: asn_TYPE_descriptor_t;
}
pub type Cdma2000OneXMSI_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000OneXMSI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMSI_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type NULL_t = ::std::os::raw::c_int;
unsafe extern "C" {
    pub static mut asn_DEF_NULL: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_NULL: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn NULL_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NULL_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NULL_compare(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_A: *const ::std::os::raw::c_void,
        struct_B: *const ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NULL_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NULL_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NULL_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NULL_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NULL_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NULL_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NULL_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NULL_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NULL_random_fill(
        td: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        memb_constraints: *const asn_encoding_constraints_s,
        max_length: usize,
    ) -> asn_random_fill_result_t;
}
pub type Source_ToTarget_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Source_ToTarget_TransparentContainer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Source_ToTarget_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABDataForwardingItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub dL_transportLayerAddress: *mut TransportLayerAddress_t,
    pub dL_gTP_TEID: *mut GTP_TEID_t,
    pub uL_TransportLayerAddress: *mut TransportLayerAddress_t,
    pub uL_GTP_TEID: *mut GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABDataForwardingItem"][::std::mem::size_of::<E_RABDataForwardingItem>() - 72usize];
    ["Alignment of E_RABDataForwardingItem"]
        [::std::mem::align_of::<E_RABDataForwardingItem>() - 8usize];
    ["Offset of field: E_RABDataForwardingItem::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABDataForwardingItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABDataForwardingItem::dL_transportLayerAddress"]
        [::std::mem::offset_of!(E_RABDataForwardingItem, dL_transportLayerAddress) - 8usize];
    ["Offset of field: E_RABDataForwardingItem::dL_gTP_TEID"]
        [::std::mem::offset_of!(E_RABDataForwardingItem, dL_gTP_TEID) - 16usize];
    ["Offset of field: E_RABDataForwardingItem::uL_TransportLayerAddress"]
        [::std::mem::offset_of!(E_RABDataForwardingItem, uL_TransportLayerAddress) - 24usize];
    ["Offset of field: E_RABDataForwardingItem::uL_GTP_TEID"]
        [::std::mem::offset_of!(E_RABDataForwardingItem, uL_GTP_TEID) - 32usize];
    ["Offset of field: E_RABDataForwardingItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABDataForwardingItem, iE_Extensions) - 40usize];
    ["Offset of field: E_RABDataForwardingItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABDataForwardingItem, _asn_ctx) - 48usize];
};
pub type E_RABDataForwardingItem_t = E_RABDataForwardingItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABDataForwardingItem: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverRequired {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverRequired"][::std::mem::size_of::<HandoverRequired>() - 72usize];
    ["Alignment of HandoverRequired"][::std::mem::align_of::<HandoverRequired>() - 8usize];
    ["Offset of field: HandoverRequired::protocolIEs"]
        [::std::mem::offset_of!(HandoverRequired, protocolIEs) - 0usize];
    ["Offset of field: HandoverRequired::_asn_ctx"]
        [::std::mem::offset_of!(HandoverRequired, _asn_ctx) - 48usize];
};
pub type HandoverRequired_t = HandoverRequired;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverRequired: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverRequired_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverRequired_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverCommand {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverCommand"][::std::mem::size_of::<HandoverCommand>() - 72usize];
    ["Alignment of HandoverCommand"][::std::mem::align_of::<HandoverCommand>() - 8usize];
    ["Offset of field: HandoverCommand::protocolIEs"]
        [::std::mem::offset_of!(HandoverCommand, protocolIEs) - 0usize];
    ["Offset of field: HandoverCommand::_asn_ctx"]
        [::std::mem::offset_of!(HandoverCommand, _asn_ctx) - 48usize];
};
pub type HandoverCommand_t = HandoverCommand;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverCommand: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverCommand_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverCommand_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverPreparationFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverPreparationFailure"]
        [::std::mem::size_of::<HandoverPreparationFailure>() - 72usize];
    ["Alignment of HandoverPreparationFailure"]
        [::std::mem::align_of::<HandoverPreparationFailure>() - 8usize];
    ["Offset of field: HandoverPreparationFailure::protocolIEs"]
        [::std::mem::offset_of!(HandoverPreparationFailure, protocolIEs) - 0usize];
    ["Offset of field: HandoverPreparationFailure::_asn_ctx"]
        [::std::mem::offset_of!(HandoverPreparationFailure, _asn_ctx) - 48usize];
};
pub type HandoverPreparationFailure_t = HandoverPreparationFailure;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverPreparationFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverPreparationFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverPreparationFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverRequest"][::std::mem::size_of::<HandoverRequest>() - 72usize];
    ["Alignment of HandoverRequest"][::std::mem::align_of::<HandoverRequest>() - 8usize];
    ["Offset of field: HandoverRequest::protocolIEs"]
        [::std::mem::offset_of!(HandoverRequest, protocolIEs) - 0usize];
    ["Offset of field: HandoverRequest::_asn_ctx"]
        [::std::mem::offset_of!(HandoverRequest, _asn_ctx) - 48usize];
};
pub type HandoverRequest_t = HandoverRequest;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverFailure"][::std::mem::size_of::<HandoverFailure>() - 72usize];
    ["Alignment of HandoverFailure"][::std::mem::align_of::<HandoverFailure>() - 8usize];
    ["Offset of field: HandoverFailure::protocolIEs"]
        [::std::mem::offset_of!(HandoverFailure, protocolIEs) - 0usize];
    ["Offset of field: HandoverFailure::_asn_ctx"]
        [::std::mem::offset_of!(HandoverFailure, _asn_ctx) - 48usize];
};
pub type HandoverFailure_t = HandoverFailure;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathSwitchRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PathSwitchRequest"][::std::mem::size_of::<PathSwitchRequest>() - 72usize];
    ["Alignment of PathSwitchRequest"][::std::mem::align_of::<PathSwitchRequest>() - 8usize];
    ["Offset of field: PathSwitchRequest::protocolIEs"]
        [::std::mem::offset_of!(PathSwitchRequest, protocolIEs) - 0usize];
    ["Offset of field: PathSwitchRequest::_asn_ctx"]
        [::std::mem::offset_of!(PathSwitchRequest, _asn_ctx) - 48usize];
};
pub type PathSwitchRequest_t = PathSwitchRequest;
unsafe extern "C" {
    pub static mut asn_DEF_PathSwitchRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PathSwitchRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PathSwitchRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathSwitchRequestAcknowledge {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PathSwitchRequestAcknowledge"]
        [::std::mem::size_of::<PathSwitchRequestAcknowledge>() - 72usize];
    ["Alignment of PathSwitchRequestAcknowledge"]
        [::std::mem::align_of::<PathSwitchRequestAcknowledge>() - 8usize];
    ["Offset of field: PathSwitchRequestAcknowledge::protocolIEs"]
        [::std::mem::offset_of!(PathSwitchRequestAcknowledge, protocolIEs) - 0usize];
    ["Offset of field: PathSwitchRequestAcknowledge::_asn_ctx"]
        [::std::mem::offset_of!(PathSwitchRequestAcknowledge, _asn_ctx) - 48usize];
};
pub type PathSwitchRequestAcknowledge_t = PathSwitchRequestAcknowledge;
unsafe extern "C" {
    pub static mut asn_DEF_PathSwitchRequestAcknowledge: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PathSwitchRequestAcknowledge_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PathSwitchRequestAcknowledge_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PathSwitchRequestFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PathSwitchRequestFailure"]
        [::std::mem::size_of::<PathSwitchRequestFailure>() - 72usize];
    ["Alignment of PathSwitchRequestFailure"]
        [::std::mem::align_of::<PathSwitchRequestFailure>() - 8usize];
    ["Offset of field: PathSwitchRequestFailure::protocolIEs"]
        [::std::mem::offset_of!(PathSwitchRequestFailure, protocolIEs) - 0usize];
    ["Offset of field: PathSwitchRequestFailure::_asn_ctx"]
        [::std::mem::offset_of!(PathSwitchRequestFailure, _asn_ctx) - 48usize];
};
pub type PathSwitchRequestFailure_t = PathSwitchRequestFailure;
unsafe extern "C" {
    pub static mut asn_DEF_PathSwitchRequestFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PathSwitchRequestFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PathSwitchRequestFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupRequest"][::std::mem::size_of::<E_RABSetupRequest>() - 72usize];
    ["Alignment of E_RABSetupRequest"][::std::mem::align_of::<E_RABSetupRequest>() - 8usize];
    ["Offset of field: E_RABSetupRequest::protocolIEs"]
        [::std::mem::offset_of!(E_RABSetupRequest, protocolIEs) - 0usize];
    ["Offset of field: E_RABSetupRequest::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSetupRequest, _asn_ctx) - 48usize];
};
pub type E_RABSetupRequest_t = E_RABSetupRequest;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSetupRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABSetupRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABSetupRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupResponse"][::std::mem::size_of::<E_RABSetupResponse>() - 72usize];
    ["Alignment of E_RABSetupResponse"][::std::mem::align_of::<E_RABSetupResponse>() - 8usize];
    ["Offset of field: E_RABSetupResponse::protocolIEs"]
        [::std::mem::offset_of!(E_RABSetupResponse, protocolIEs) - 0usize];
    ["Offset of field: E_RABSetupResponse::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSetupResponse, _asn_ctx) - 48usize];
};
pub type E_RABSetupResponse_t = E_RABSetupResponse;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSetupResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABSetupResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABSetupResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyRequest"][::std::mem::size_of::<E_RABModifyRequest>() - 72usize];
    ["Alignment of E_RABModifyRequest"][::std::mem::align_of::<E_RABModifyRequest>() - 8usize];
    ["Offset of field: E_RABModifyRequest::protocolIEs"]
        [::std::mem::offset_of!(E_RABModifyRequest, protocolIEs) - 0usize];
    ["Offset of field: E_RABModifyRequest::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModifyRequest, _asn_ctx) - 48usize];
};
pub type E_RABModifyRequest_t = E_RABModifyRequest;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModifyRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABModifyRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABModifyRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyResponse"][::std::mem::size_of::<E_RABModifyResponse>() - 72usize];
    ["Alignment of E_RABModifyResponse"][::std::mem::align_of::<E_RABModifyResponse>() - 8usize];
    ["Offset of field: E_RABModifyResponse::protocolIEs"]
        [::std::mem::offset_of!(E_RABModifyResponse, protocolIEs) - 0usize];
    ["Offset of field: E_RABModifyResponse::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModifyResponse, _asn_ctx) - 48usize];
};
pub type E_RABModifyResponse_t = E_RABModifyResponse;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModifyResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABModifyResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABModifyResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABReleaseCommand {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABReleaseCommand"][::std::mem::size_of::<E_RABReleaseCommand>() - 72usize];
    ["Alignment of E_RABReleaseCommand"][::std::mem::align_of::<E_RABReleaseCommand>() - 8usize];
    ["Offset of field: E_RABReleaseCommand::protocolIEs"]
        [::std::mem::offset_of!(E_RABReleaseCommand, protocolIEs) - 0usize];
    ["Offset of field: E_RABReleaseCommand::_asn_ctx"]
        [::std::mem::offset_of!(E_RABReleaseCommand, _asn_ctx) - 48usize];
};
pub type E_RABReleaseCommand_t = E_RABReleaseCommand;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABReleaseCommand: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABReleaseCommand_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABReleaseCommand_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABReleaseResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABReleaseResponse"][::std::mem::size_of::<E_RABReleaseResponse>() - 72usize];
    ["Alignment of E_RABReleaseResponse"][::std::mem::align_of::<E_RABReleaseResponse>() - 8usize];
    ["Offset of field: E_RABReleaseResponse::protocolIEs"]
        [::std::mem::offset_of!(E_RABReleaseResponse, protocolIEs) - 0usize];
    ["Offset of field: E_RABReleaseResponse::_asn_ctx"]
        [::std::mem::offset_of!(E_RABReleaseResponse, _asn_ctx) - 48usize];
};
pub type E_RABReleaseResponse_t = E_RABReleaseResponse;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABReleaseResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABReleaseResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABReleaseResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InitialContextSetupRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InitialContextSetupRequest"]
        [::std::mem::size_of::<InitialContextSetupRequest>() - 72usize];
    ["Alignment of InitialContextSetupRequest"]
        [::std::mem::align_of::<InitialContextSetupRequest>() - 8usize];
    ["Offset of field: InitialContextSetupRequest::protocolIEs"]
        [::std::mem::offset_of!(InitialContextSetupRequest, protocolIEs) - 0usize];
    ["Offset of field: InitialContextSetupRequest::_asn_ctx"]
        [::std::mem::offset_of!(InitialContextSetupRequest, _asn_ctx) - 48usize];
};
pub type InitialContextSetupRequest_t = InitialContextSetupRequest;
unsafe extern "C" {
    pub static mut asn_DEF_InitialContextSetupRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InitialContextSetupRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InitialContextSetupRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InitialContextSetupResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InitialContextSetupResponse"]
        [::std::mem::size_of::<InitialContextSetupResponse>() - 72usize];
    ["Alignment of InitialContextSetupResponse"]
        [::std::mem::align_of::<InitialContextSetupResponse>() - 8usize];
    ["Offset of field: InitialContextSetupResponse::protocolIEs"]
        [::std::mem::offset_of!(InitialContextSetupResponse, protocolIEs) - 0usize];
    ["Offset of field: InitialContextSetupResponse::_asn_ctx"]
        [::std::mem::offset_of!(InitialContextSetupResponse, _asn_ctx) - 48usize];
};
pub type InitialContextSetupResponse_t = InitialContextSetupResponse;
unsafe extern "C" {
    pub static mut asn_DEF_InitialContextSetupResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InitialContextSetupResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InitialContextSetupResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InitialContextSetupFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InitialContextSetupFailure"]
        [::std::mem::size_of::<InitialContextSetupFailure>() - 72usize];
    ["Alignment of InitialContextSetupFailure"]
        [::std::mem::align_of::<InitialContextSetupFailure>() - 8usize];
    ["Offset of field: InitialContextSetupFailure::protocolIEs"]
        [::std::mem::offset_of!(InitialContextSetupFailure, protocolIEs) - 0usize];
    ["Offset of field: InitialContextSetupFailure::_asn_ctx"]
        [::std::mem::offset_of!(InitialContextSetupFailure, _asn_ctx) - 48usize];
};
pub type InitialContextSetupFailure_t = InitialContextSetupFailure;
unsafe extern "C" {
    pub static mut asn_DEF_InitialContextSetupFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InitialContextSetupFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InitialContextSetupFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverCancel {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverCancel"][::std::mem::size_of::<HandoverCancel>() - 72usize];
    ["Alignment of HandoverCancel"][::std::mem::align_of::<HandoverCancel>() - 8usize];
    ["Offset of field: HandoverCancel::protocolIEs"]
        [::std::mem::offset_of!(HandoverCancel, protocolIEs) - 0usize];
    ["Offset of field: HandoverCancel::_asn_ctx"]
        [::std::mem::offset_of!(HandoverCancel, _asn_ctx) - 48usize];
};
pub type HandoverCancel_t = HandoverCancel;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverCancel: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverCancel_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverCancel_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverCancelAcknowledge {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverCancelAcknowledge"]
        [::std::mem::size_of::<HandoverCancelAcknowledge>() - 72usize];
    ["Alignment of HandoverCancelAcknowledge"]
        [::std::mem::align_of::<HandoverCancelAcknowledge>() - 8usize];
    ["Offset of field: HandoverCancelAcknowledge::protocolIEs"]
        [::std::mem::offset_of!(HandoverCancelAcknowledge, protocolIEs) - 0usize];
    ["Offset of field: HandoverCancelAcknowledge::_asn_ctx"]
        [::std::mem::offset_of!(HandoverCancelAcknowledge, _asn_ctx) - 48usize];
};
pub type HandoverCancelAcknowledge_t = HandoverCancelAcknowledge;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverCancelAcknowledge: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverCancelAcknowledge_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverCancelAcknowledge_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KillRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KillRequest"][::std::mem::size_of::<KillRequest>() - 72usize];
    ["Alignment of KillRequest"][::std::mem::align_of::<KillRequest>() - 8usize];
    ["Offset of field: KillRequest::protocolIEs"]
        [::std::mem::offset_of!(KillRequest, protocolIEs) - 0usize];
    ["Offset of field: KillRequest::_asn_ctx"]
        [::std::mem::offset_of!(KillRequest, _asn_ctx) - 48usize];
};
pub type KillRequest_t = KillRequest;
unsafe extern "C" {
    pub static mut asn_DEF_KillRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_KillRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_KillRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct KillResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of KillResponse"][::std::mem::size_of::<KillResponse>() - 72usize];
    ["Alignment of KillResponse"][::std::mem::align_of::<KillResponse>() - 8usize];
    ["Offset of field: KillResponse::protocolIEs"]
        [::std::mem::offset_of!(KillResponse, protocolIEs) - 0usize];
    ["Offset of field: KillResponse::_asn_ctx"]
        [::std::mem::offset_of!(KillResponse, _asn_ctx) - 48usize];
};
pub type KillResponse_t = KillResponse;
unsafe extern "C" {
    pub static mut asn_DEF_KillResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_KillResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_KillResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Reset {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Reset"][::std::mem::size_of::<Reset>() - 72usize];
    ["Alignment of Reset"][::std::mem::align_of::<Reset>() - 8usize];
    ["Offset of field: Reset::protocolIEs"][::std::mem::offset_of!(Reset, protocolIEs) - 0usize];
    ["Offset of field: Reset::_asn_ctx"][::std::mem::offset_of!(Reset, _asn_ctx) - 48usize];
};
pub type Reset_t = Reset;
unsafe extern "C" {
    pub static mut asn_DEF_Reset: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Reset_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Reset_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ResetAcknowledge {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ResetAcknowledge"][::std::mem::size_of::<ResetAcknowledge>() - 72usize];
    ["Alignment of ResetAcknowledge"][::std::mem::align_of::<ResetAcknowledge>() - 8usize];
    ["Offset of field: ResetAcknowledge::protocolIEs"]
        [::std::mem::offset_of!(ResetAcknowledge, protocolIEs) - 0usize];
    ["Offset of field: ResetAcknowledge::_asn_ctx"]
        [::std::mem::offset_of!(ResetAcknowledge, _asn_ctx) - 48usize];
};
pub type ResetAcknowledge_t = ResetAcknowledge;
unsafe extern "C" {
    pub static mut asn_DEF_ResetAcknowledge: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ResetAcknowledge_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ResetAcknowledge_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S1SetupRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S1SetupRequest"][::std::mem::size_of::<S1SetupRequest>() - 72usize];
    ["Alignment of S1SetupRequest"][::std::mem::align_of::<S1SetupRequest>() - 8usize];
    ["Offset of field: S1SetupRequest::protocolIEs"]
        [::std::mem::offset_of!(S1SetupRequest, protocolIEs) - 0usize];
    ["Offset of field: S1SetupRequest::_asn_ctx"]
        [::std::mem::offset_of!(S1SetupRequest, _asn_ctx) - 48usize];
};
pub type S1SetupRequest_t = S1SetupRequest;
unsafe extern "C" {
    pub static mut asn_DEF_S1SetupRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_S1SetupRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_S1SetupRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S1SetupResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S1SetupResponse"][::std::mem::size_of::<S1SetupResponse>() - 72usize];
    ["Alignment of S1SetupResponse"][::std::mem::align_of::<S1SetupResponse>() - 8usize];
    ["Offset of field: S1SetupResponse::protocolIEs"]
        [::std::mem::offset_of!(S1SetupResponse, protocolIEs) - 0usize];
    ["Offset of field: S1SetupResponse::_asn_ctx"]
        [::std::mem::offset_of!(S1SetupResponse, _asn_ctx) - 48usize];
};
pub type S1SetupResponse_t = S1SetupResponse;
unsafe extern "C" {
    pub static mut asn_DEF_S1SetupResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_S1SetupResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_S1SetupResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S1SetupFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S1SetupFailure"][::std::mem::size_of::<S1SetupFailure>() - 72usize];
    ["Alignment of S1SetupFailure"][::std::mem::align_of::<S1SetupFailure>() - 8usize];
    ["Offset of field: S1SetupFailure::protocolIEs"]
        [::std::mem::offset_of!(S1SetupFailure, protocolIEs) - 0usize];
    ["Offset of field: S1SetupFailure::_asn_ctx"]
        [::std::mem::offset_of!(S1SetupFailure, _asn_ctx) - 48usize];
};
pub type S1SetupFailure_t = S1SetupFailure;
unsafe extern "C" {
    pub static mut asn_DEF_S1SetupFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_S1SetupFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_S1SetupFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextModificationRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextModificationRequest"]
        [::std::mem::size_of::<UEContextModificationRequest>() - 72usize];
    ["Alignment of UEContextModificationRequest"]
        [::std::mem::align_of::<UEContextModificationRequest>() - 8usize];
    ["Offset of field: UEContextModificationRequest::protocolIEs"]
        [::std::mem::offset_of!(UEContextModificationRequest, protocolIEs) - 0usize];
    ["Offset of field: UEContextModificationRequest::_asn_ctx"]
        [::std::mem::offset_of!(UEContextModificationRequest, _asn_ctx) - 48usize];
};
pub type UEContextModificationRequest_t = UEContextModificationRequest;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextModificationRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextModificationRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextModificationRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextModificationResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextModificationResponse"]
        [::std::mem::size_of::<UEContextModificationResponse>() - 72usize];
    ["Alignment of UEContextModificationResponse"]
        [::std::mem::align_of::<UEContextModificationResponse>() - 8usize];
    ["Offset of field: UEContextModificationResponse::protocolIEs"]
        [::std::mem::offset_of!(UEContextModificationResponse, protocolIEs) - 0usize];
    ["Offset of field: UEContextModificationResponse::_asn_ctx"]
        [::std::mem::offset_of!(UEContextModificationResponse, _asn_ctx) - 48usize];
};
pub type UEContextModificationResponse_t = UEContextModificationResponse;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextModificationResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextModificationResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextModificationResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextModificationFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextModificationFailure"]
        [::std::mem::size_of::<UEContextModificationFailure>() - 72usize];
    ["Alignment of UEContextModificationFailure"]
        [::std::mem::align_of::<UEContextModificationFailure>() - 8usize];
    ["Offset of field: UEContextModificationFailure::protocolIEs"]
        [::std::mem::offset_of!(UEContextModificationFailure, protocolIEs) - 0usize];
    ["Offset of field: UEContextModificationFailure::_asn_ctx"]
        [::std::mem::offset_of!(UEContextModificationFailure, _asn_ctx) - 48usize];
};
pub type UEContextModificationFailure_t = UEContextModificationFailure;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextModificationFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextModificationFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextModificationFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextReleaseCommand {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextReleaseCommand"][::std::mem::size_of::<UEContextReleaseCommand>() - 72usize];
    ["Alignment of UEContextReleaseCommand"]
        [::std::mem::align_of::<UEContextReleaseCommand>() - 8usize];
    ["Offset of field: UEContextReleaseCommand::protocolIEs"]
        [::std::mem::offset_of!(UEContextReleaseCommand, protocolIEs) - 0usize];
    ["Offset of field: UEContextReleaseCommand::_asn_ctx"]
        [::std::mem::offset_of!(UEContextReleaseCommand, _asn_ctx) - 48usize];
};
pub type UEContextReleaseCommand_t = UEContextReleaseCommand;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextReleaseCommand: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextReleaseCommand_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextReleaseCommand_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextReleaseComplete {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextReleaseComplete"]
        [::std::mem::size_of::<UEContextReleaseComplete>() - 72usize];
    ["Alignment of UEContextReleaseComplete"]
        [::std::mem::align_of::<UEContextReleaseComplete>() - 8usize];
    ["Offset of field: UEContextReleaseComplete::protocolIEs"]
        [::std::mem::offset_of!(UEContextReleaseComplete, protocolIEs) - 0usize];
    ["Offset of field: UEContextReleaseComplete::_asn_ctx"]
        [::std::mem::offset_of!(UEContextReleaseComplete, _asn_ctx) - 48usize];
};
pub type UEContextReleaseComplete_t = UEContextReleaseComplete;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextReleaseComplete: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextReleaseComplete_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextReleaseComplete_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBConfigurationUpdate {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBConfigurationUpdate"][::std::mem::size_of::<ENBConfigurationUpdate>() - 72usize];
    ["Alignment of ENBConfigurationUpdate"]
        [::std::mem::align_of::<ENBConfigurationUpdate>() - 8usize];
    ["Offset of field: ENBConfigurationUpdate::protocolIEs"]
        [::std::mem::offset_of!(ENBConfigurationUpdate, protocolIEs) - 0usize];
    ["Offset of field: ENBConfigurationUpdate::_asn_ctx"]
        [::std::mem::offset_of!(ENBConfigurationUpdate, _asn_ctx) - 48usize];
};
pub type ENBConfigurationUpdate_t = ENBConfigurationUpdate;
unsafe extern "C" {
    pub static mut asn_DEF_ENBConfigurationUpdate: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBConfigurationUpdate_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBConfigurationUpdate_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBConfigurationUpdateAcknowledge {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBConfigurationUpdateAcknowledge"]
        [::std::mem::size_of::<ENBConfigurationUpdateAcknowledge>() - 72usize];
    ["Alignment of ENBConfigurationUpdateAcknowledge"]
        [::std::mem::align_of::<ENBConfigurationUpdateAcknowledge>() - 8usize];
    ["Offset of field: ENBConfigurationUpdateAcknowledge::protocolIEs"]
        [::std::mem::offset_of!(ENBConfigurationUpdateAcknowledge, protocolIEs) - 0usize];
    ["Offset of field: ENBConfigurationUpdateAcknowledge::_asn_ctx"]
        [::std::mem::offset_of!(ENBConfigurationUpdateAcknowledge, _asn_ctx) - 48usize];
};
pub type ENBConfigurationUpdateAcknowledge_t = ENBConfigurationUpdateAcknowledge;
unsafe extern "C" {
    pub static mut asn_DEF_ENBConfigurationUpdateAcknowledge: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBConfigurationUpdateAcknowledge_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBConfigurationUpdateAcknowledge_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBConfigurationUpdateFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBConfigurationUpdateFailure"]
        [::std::mem::size_of::<ENBConfigurationUpdateFailure>() - 72usize];
    ["Alignment of ENBConfigurationUpdateFailure"]
        [::std::mem::align_of::<ENBConfigurationUpdateFailure>() - 8usize];
    ["Offset of field: ENBConfigurationUpdateFailure::protocolIEs"]
        [::std::mem::offset_of!(ENBConfigurationUpdateFailure, protocolIEs) - 0usize];
    ["Offset of field: ENBConfigurationUpdateFailure::_asn_ctx"]
        [::std::mem::offset_of!(ENBConfigurationUpdateFailure, _asn_ctx) - 48usize];
};
pub type ENBConfigurationUpdateFailure_t = ENBConfigurationUpdateFailure;
unsafe extern "C" {
    pub static mut asn_DEF_ENBConfigurationUpdateFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBConfigurationUpdateFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBConfigurationUpdateFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMEConfigurationUpdate {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEConfigurationUpdate"][::std::mem::size_of::<MMEConfigurationUpdate>() - 72usize];
    ["Alignment of MMEConfigurationUpdate"]
        [::std::mem::align_of::<MMEConfigurationUpdate>() - 8usize];
    ["Offset of field: MMEConfigurationUpdate::protocolIEs"]
        [::std::mem::offset_of!(MMEConfigurationUpdate, protocolIEs) - 0usize];
    ["Offset of field: MMEConfigurationUpdate::_asn_ctx"]
        [::std::mem::offset_of!(MMEConfigurationUpdate, _asn_ctx) - 48usize];
};
pub type MMEConfigurationUpdate_t = MMEConfigurationUpdate;
unsafe extern "C" {
    pub static mut asn_DEF_MMEConfigurationUpdate: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEConfigurationUpdate_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEConfigurationUpdate_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMEConfigurationUpdateAcknowledge {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEConfigurationUpdateAcknowledge"]
        [::std::mem::size_of::<MMEConfigurationUpdateAcknowledge>() - 72usize];
    ["Alignment of MMEConfigurationUpdateAcknowledge"]
        [::std::mem::align_of::<MMEConfigurationUpdateAcknowledge>() - 8usize];
    ["Offset of field: MMEConfigurationUpdateAcknowledge::protocolIEs"]
        [::std::mem::offset_of!(MMEConfigurationUpdateAcknowledge, protocolIEs) - 0usize];
    ["Offset of field: MMEConfigurationUpdateAcknowledge::_asn_ctx"]
        [::std::mem::offset_of!(MMEConfigurationUpdateAcknowledge, _asn_ctx) - 48usize];
};
pub type MMEConfigurationUpdateAcknowledge_t = MMEConfigurationUpdateAcknowledge;
unsafe extern "C" {
    pub static mut asn_DEF_MMEConfigurationUpdateAcknowledge: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEConfigurationUpdateAcknowledge_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEConfigurationUpdateAcknowledge_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMEConfigurationUpdateFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEConfigurationUpdateFailure"]
        [::std::mem::size_of::<MMEConfigurationUpdateFailure>() - 72usize];
    ["Alignment of MMEConfigurationUpdateFailure"]
        [::std::mem::align_of::<MMEConfigurationUpdateFailure>() - 8usize];
    ["Offset of field: MMEConfigurationUpdateFailure::protocolIEs"]
        [::std::mem::offset_of!(MMEConfigurationUpdateFailure, protocolIEs) - 0usize];
    ["Offset of field: MMEConfigurationUpdateFailure::_asn_ctx"]
        [::std::mem::offset_of!(MMEConfigurationUpdateFailure, _asn_ctx) - 48usize];
};
pub type MMEConfigurationUpdateFailure_t = MMEConfigurationUpdateFailure;
unsafe extern "C" {
    pub static mut asn_DEF_MMEConfigurationUpdateFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEConfigurationUpdateFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEConfigurationUpdateFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WriteReplaceWarningRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WriteReplaceWarningRequest"]
        [::std::mem::size_of::<WriteReplaceWarningRequest>() - 72usize];
    ["Alignment of WriteReplaceWarningRequest"]
        [::std::mem::align_of::<WriteReplaceWarningRequest>() - 8usize];
    ["Offset of field: WriteReplaceWarningRequest::protocolIEs"]
        [::std::mem::offset_of!(WriteReplaceWarningRequest, protocolIEs) - 0usize];
    ["Offset of field: WriteReplaceWarningRequest::_asn_ctx"]
        [::std::mem::offset_of!(WriteReplaceWarningRequest, _asn_ctx) - 48usize];
};
pub type WriteReplaceWarningRequest_t = WriteReplaceWarningRequest;
unsafe extern "C" {
    pub static mut asn_DEF_WriteReplaceWarningRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_WriteReplaceWarningRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_WriteReplaceWarningRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WriteReplaceWarningResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WriteReplaceWarningResponse"]
        [::std::mem::size_of::<WriteReplaceWarningResponse>() - 72usize];
    ["Alignment of WriteReplaceWarningResponse"]
        [::std::mem::align_of::<WriteReplaceWarningResponse>() - 8usize];
    ["Offset of field: WriteReplaceWarningResponse::protocolIEs"]
        [::std::mem::offset_of!(WriteReplaceWarningResponse, protocolIEs) - 0usize];
    ["Offset of field: WriteReplaceWarningResponse::_asn_ctx"]
        [::std::mem::offset_of!(WriteReplaceWarningResponse, _asn_ctx) - 48usize];
};
pub type WriteReplaceWarningResponse_t = WriteReplaceWarningResponse;
unsafe extern "C" {
    pub static mut asn_DEF_WriteReplaceWarningResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_WriteReplaceWarningResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_WriteReplaceWarningResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UERadioCapabilityMatchRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UERadioCapabilityMatchRequest"]
        [::std::mem::size_of::<UERadioCapabilityMatchRequest>() - 72usize];
    ["Alignment of UERadioCapabilityMatchRequest"]
        [::std::mem::align_of::<UERadioCapabilityMatchRequest>() - 8usize];
    ["Offset of field: UERadioCapabilityMatchRequest::protocolIEs"]
        [::std::mem::offset_of!(UERadioCapabilityMatchRequest, protocolIEs) - 0usize];
    ["Offset of field: UERadioCapabilityMatchRequest::_asn_ctx"]
        [::std::mem::offset_of!(UERadioCapabilityMatchRequest, _asn_ctx) - 48usize];
};
pub type UERadioCapabilityMatchRequest_t = UERadioCapabilityMatchRequest;
unsafe extern "C" {
    pub static mut asn_DEF_UERadioCapabilityMatchRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UERadioCapabilityMatchRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UERadioCapabilityMatchRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UERadioCapabilityMatchResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UERadioCapabilityMatchResponse"]
        [::std::mem::size_of::<UERadioCapabilityMatchResponse>() - 72usize];
    ["Alignment of UERadioCapabilityMatchResponse"]
        [::std::mem::align_of::<UERadioCapabilityMatchResponse>() - 8usize];
    ["Offset of field: UERadioCapabilityMatchResponse::protocolIEs"]
        [::std::mem::offset_of!(UERadioCapabilityMatchResponse, protocolIEs) - 0usize];
    ["Offset of field: UERadioCapabilityMatchResponse::_asn_ctx"]
        [::std::mem::offset_of!(UERadioCapabilityMatchResponse, _asn_ctx) - 48usize];
};
pub type UERadioCapabilityMatchResponse_t = UERadioCapabilityMatchResponse;
unsafe extern "C" {
    pub static mut asn_DEF_UERadioCapabilityMatchResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UERadioCapabilityMatchResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UERadioCapabilityMatchResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModificationConfirm {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModificationConfirm"]
        [::std::mem::size_of::<E_RABModificationConfirm>() - 72usize];
    ["Alignment of E_RABModificationConfirm"]
        [::std::mem::align_of::<E_RABModificationConfirm>() - 8usize];
    ["Offset of field: E_RABModificationConfirm::protocolIEs"]
        [::std::mem::offset_of!(E_RABModificationConfirm, protocolIEs) - 0usize];
    ["Offset of field: E_RABModificationConfirm::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModificationConfirm, _asn_ctx) - 48usize];
};
pub type E_RABModificationConfirm_t = E_RABModificationConfirm;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModificationConfirm: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABModificationConfirm_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABModificationConfirm_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextModificationIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextModificationIndication"]
        [::std::mem::size_of::<UEContextModificationIndication>() - 72usize];
    ["Alignment of UEContextModificationIndication"]
        [::std::mem::align_of::<UEContextModificationIndication>() - 8usize];
    ["Offset of field: UEContextModificationIndication::protocolIEs"]
        [::std::mem::offset_of!(UEContextModificationIndication, protocolIEs) - 0usize];
    ["Offset of field: UEContextModificationIndication::_asn_ctx"]
        [::std::mem::offset_of!(UEContextModificationIndication, _asn_ctx) - 48usize];
};
pub type UEContextModificationIndication_t = UEContextModificationIndication;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextModificationIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextModificationIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextModificationIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextModificationConfirm {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextModificationConfirm"]
        [::std::mem::size_of::<UEContextModificationConfirm>() - 72usize];
    ["Alignment of UEContextModificationConfirm"]
        [::std::mem::align_of::<UEContextModificationConfirm>() - 8usize];
    ["Offset of field: UEContextModificationConfirm::protocolIEs"]
        [::std::mem::offset_of!(UEContextModificationConfirm, protocolIEs) - 0usize];
    ["Offset of field: UEContextModificationConfirm::_asn_ctx"]
        [::std::mem::offset_of!(UEContextModificationConfirm, _asn_ctx) - 48usize];
};
pub type UEContextModificationConfirm_t = UEContextModificationConfirm;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextModificationConfirm: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextModificationConfirm_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextModificationConfirm_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextSuspendRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextSuspendRequest"][::std::mem::size_of::<UEContextSuspendRequest>() - 72usize];
    ["Alignment of UEContextSuspendRequest"]
        [::std::mem::align_of::<UEContextSuspendRequest>() - 8usize];
    ["Offset of field: UEContextSuspendRequest::protocolIEs"]
        [::std::mem::offset_of!(UEContextSuspendRequest, protocolIEs) - 0usize];
    ["Offset of field: UEContextSuspendRequest::_asn_ctx"]
        [::std::mem::offset_of!(UEContextSuspendRequest, _asn_ctx) - 48usize];
};
pub type UEContextSuspendRequest_t = UEContextSuspendRequest;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextSuspendRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextSuspendRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextSuspendRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextSuspendResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextSuspendResponse"]
        [::std::mem::size_of::<UEContextSuspendResponse>() - 72usize];
    ["Alignment of UEContextSuspendResponse"]
        [::std::mem::align_of::<UEContextSuspendResponse>() - 8usize];
    ["Offset of field: UEContextSuspendResponse::protocolIEs"]
        [::std::mem::offset_of!(UEContextSuspendResponse, protocolIEs) - 0usize];
    ["Offset of field: UEContextSuspendResponse::_asn_ctx"]
        [::std::mem::offset_of!(UEContextSuspendResponse, _asn_ctx) - 48usize];
};
pub type UEContextSuspendResponse_t = UEContextSuspendResponse;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextSuspendResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextSuspendResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextSuspendResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextResumeRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextResumeRequest"][::std::mem::size_of::<UEContextResumeRequest>() - 72usize];
    ["Alignment of UEContextResumeRequest"]
        [::std::mem::align_of::<UEContextResumeRequest>() - 8usize];
    ["Offset of field: UEContextResumeRequest::protocolIEs"]
        [::std::mem::offset_of!(UEContextResumeRequest, protocolIEs) - 0usize];
    ["Offset of field: UEContextResumeRequest::_asn_ctx"]
        [::std::mem::offset_of!(UEContextResumeRequest, _asn_ctx) - 48usize];
};
pub type UEContextResumeRequest_t = UEContextResumeRequest;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextResumeRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextResumeRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextResumeRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextResumeResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextResumeResponse"][::std::mem::size_of::<UEContextResumeResponse>() - 72usize];
    ["Alignment of UEContextResumeResponse"]
        [::std::mem::align_of::<UEContextResumeResponse>() - 8usize];
    ["Offset of field: UEContextResumeResponse::protocolIEs"]
        [::std::mem::offset_of!(UEContextResumeResponse, protocolIEs) - 0usize];
    ["Offset of field: UEContextResumeResponse::_asn_ctx"]
        [::std::mem::offset_of!(UEContextResumeResponse, _asn_ctx) - 48usize];
};
pub type UEContextResumeResponse_t = UEContextResumeResponse;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextResumeResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextResumeResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextResumeResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextResumeFailure {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextResumeFailure"][::std::mem::size_of::<UEContextResumeFailure>() - 72usize];
    ["Alignment of UEContextResumeFailure"]
        [::std::mem::align_of::<UEContextResumeFailure>() - 8usize];
    ["Offset of field: UEContextResumeFailure::protocolIEs"]
        [::std::mem::offset_of!(UEContextResumeFailure, protocolIEs) - 0usize];
    ["Offset of field: UEContextResumeFailure::_asn_ctx"]
        [::std::mem::offset_of!(UEContextResumeFailure, _asn_ctx) - 48usize];
};
pub type UEContextResumeFailure_t = UEContextResumeFailure;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextResumeFailure: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextResumeFailure_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextResumeFailure_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UERadioCapabilityIDMappingResponse {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UERadioCapabilityIDMappingResponse"]
        [::std::mem::size_of::<UERadioCapabilityIDMappingResponse>() - 72usize];
    ["Alignment of UERadioCapabilityIDMappingResponse"]
        [::std::mem::align_of::<UERadioCapabilityIDMappingResponse>() - 8usize];
    ["Offset of field: UERadioCapabilityIDMappingResponse::protocolIEs"]
        [::std::mem::offset_of!(UERadioCapabilityIDMappingResponse, protocolIEs) - 0usize];
    ["Offset of field: UERadioCapabilityIDMappingResponse::_asn_ctx"]
        [::std::mem::offset_of!(UERadioCapabilityIDMappingResponse, _asn_ctx) - 48usize];
};
pub type UERadioCapabilityIDMappingResponse_t = UERadioCapabilityIDMappingResponse;
unsafe extern "C" {
    pub static mut asn_DEF_UERadioCapabilityIDMappingResponse: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UERadioCapabilityIDMappingResponse_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UERadioCapabilityIDMappingResponse_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverNotify {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverNotify"][::std::mem::size_of::<HandoverNotify>() - 72usize];
    ["Alignment of HandoverNotify"][::std::mem::align_of::<HandoverNotify>() - 8usize];
    ["Offset of field: HandoverNotify::protocolIEs"]
        [::std::mem::offset_of!(HandoverNotify, protocolIEs) - 0usize];
    ["Offset of field: HandoverNotify::_asn_ctx"]
        [::std::mem::offset_of!(HandoverNotify, _asn_ctx) - 48usize];
};
pub type HandoverNotify_t = HandoverNotify;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverNotify: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverNotify_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverNotify_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABReleaseIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABReleaseIndication"][::std::mem::size_of::<E_RABReleaseIndication>() - 72usize];
    ["Alignment of E_RABReleaseIndication"]
        [::std::mem::align_of::<E_RABReleaseIndication>() - 8usize];
    ["Offset of field: E_RABReleaseIndication::protocolIEs"]
        [::std::mem::offset_of!(E_RABReleaseIndication, protocolIEs) - 0usize];
    ["Offset of field: E_RABReleaseIndication::_asn_ctx"]
        [::std::mem::offset_of!(E_RABReleaseIndication, _asn_ctx) - 48usize];
};
pub type E_RABReleaseIndication_t = E_RABReleaseIndication;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABReleaseIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABReleaseIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABReleaseIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Paging {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Paging"][::std::mem::size_of::<Paging>() - 72usize];
    ["Alignment of Paging"][::std::mem::align_of::<Paging>() - 8usize];
    ["Offset of field: Paging::protocolIEs"][::std::mem::offset_of!(Paging, protocolIEs) - 0usize];
    ["Offset of field: Paging::_asn_ctx"][::std::mem::offset_of!(Paging, _asn_ctx) - 48usize];
};
pub type Paging_t = Paging;
unsafe extern "C" {
    pub static mut asn_DEF_Paging: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Paging_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Paging_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DownlinkNASTransport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DownlinkNASTransport"][::std::mem::size_of::<DownlinkNASTransport>() - 72usize];
    ["Alignment of DownlinkNASTransport"][::std::mem::align_of::<DownlinkNASTransport>() - 8usize];
    ["Offset of field: DownlinkNASTransport::protocolIEs"]
        [::std::mem::offset_of!(DownlinkNASTransport, protocolIEs) - 0usize];
    ["Offset of field: DownlinkNASTransport::_asn_ctx"]
        [::std::mem::offset_of!(DownlinkNASTransport, _asn_ctx) - 48usize];
};
pub type DownlinkNASTransport_t = DownlinkNASTransport;
unsafe extern "C" {
    pub static mut asn_DEF_DownlinkNASTransport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_DownlinkNASTransport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_DownlinkNASTransport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InitialUEMessage {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InitialUEMessage"][::std::mem::size_of::<InitialUEMessage>() - 72usize];
    ["Alignment of InitialUEMessage"][::std::mem::align_of::<InitialUEMessage>() - 8usize];
    ["Offset of field: InitialUEMessage::protocolIEs"]
        [::std::mem::offset_of!(InitialUEMessage, protocolIEs) - 0usize];
    ["Offset of field: InitialUEMessage::_asn_ctx"]
        [::std::mem::offset_of!(InitialUEMessage, _asn_ctx) - 48usize];
};
pub type InitialUEMessage_t = InitialUEMessage;
unsafe extern "C" {
    pub static mut asn_DEF_InitialUEMessage: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InitialUEMessage_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InitialUEMessage_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkNASTransport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UplinkNASTransport"][::std::mem::size_of::<UplinkNASTransport>() - 72usize];
    ["Alignment of UplinkNASTransport"][::std::mem::align_of::<UplinkNASTransport>() - 8usize];
    ["Offset of field: UplinkNASTransport::protocolIEs"]
        [::std::mem::offset_of!(UplinkNASTransport, protocolIEs) - 0usize];
    ["Offset of field: UplinkNASTransport::_asn_ctx"]
        [::std::mem::offset_of!(UplinkNASTransport, _asn_ctx) - 48usize];
};
pub type UplinkNASTransport_t = UplinkNASTransport;
unsafe extern "C" {
    pub static mut asn_DEF_UplinkNASTransport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UplinkNASTransport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UplinkNASTransport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NASNonDeliveryIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NASNonDeliveryIndication"]
        [::std::mem::size_of::<NASNonDeliveryIndication>() - 72usize];
    ["Alignment of NASNonDeliveryIndication"]
        [::std::mem::align_of::<NASNonDeliveryIndication>() - 8usize];
    ["Offset of field: NASNonDeliveryIndication::protocolIEs"]
        [::std::mem::offset_of!(NASNonDeliveryIndication, protocolIEs) - 0usize];
    ["Offset of field: NASNonDeliveryIndication::_asn_ctx"]
        [::std::mem::offset_of!(NASNonDeliveryIndication, _asn_ctx) - 48usize];
};
pub type NASNonDeliveryIndication_t = NASNonDeliveryIndication;
unsafe extern "C" {
    pub static mut asn_DEF_NASNonDeliveryIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_NASNonDeliveryIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_NASNonDeliveryIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEContextReleaseRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEContextReleaseRequest"][::std::mem::size_of::<UEContextReleaseRequest>() - 72usize];
    ["Alignment of UEContextReleaseRequest"]
        [::std::mem::align_of::<UEContextReleaseRequest>() - 8usize];
    ["Offset of field: UEContextReleaseRequest::protocolIEs"]
        [::std::mem::offset_of!(UEContextReleaseRequest, protocolIEs) - 0usize];
    ["Offset of field: UEContextReleaseRequest::_asn_ctx"]
        [::std::mem::offset_of!(UEContextReleaseRequest, _asn_ctx) - 48usize];
};
pub type UEContextReleaseRequest_t = UEContextReleaseRequest;
unsafe extern "C" {
    pub static mut asn_DEF_UEContextReleaseRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEContextReleaseRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEContextReleaseRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DownlinkS1cdma2000tunnelling {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DownlinkS1cdma2000tunnelling"]
        [::std::mem::size_of::<DownlinkS1cdma2000tunnelling>() - 72usize];
    ["Alignment of DownlinkS1cdma2000tunnelling"]
        [::std::mem::align_of::<DownlinkS1cdma2000tunnelling>() - 8usize];
    ["Offset of field: DownlinkS1cdma2000tunnelling::protocolIEs"]
        [::std::mem::offset_of!(DownlinkS1cdma2000tunnelling, protocolIEs) - 0usize];
    ["Offset of field: DownlinkS1cdma2000tunnelling::_asn_ctx"]
        [::std::mem::offset_of!(DownlinkS1cdma2000tunnelling, _asn_ctx) - 48usize];
};
pub type DownlinkS1cdma2000tunnelling_t = DownlinkS1cdma2000tunnelling;
unsafe extern "C" {
    pub static mut asn_DEF_DownlinkS1cdma2000tunnelling: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_DownlinkS1cdma2000tunnelling_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_DownlinkS1cdma2000tunnelling_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UECapabilityInfoIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UECapabilityInfoIndication"]
        [::std::mem::size_of::<UECapabilityInfoIndication>() - 72usize];
    ["Alignment of UECapabilityInfoIndication"]
        [::std::mem::align_of::<UECapabilityInfoIndication>() - 8usize];
    ["Offset of field: UECapabilityInfoIndication::protocolIEs"]
        [::std::mem::offset_of!(UECapabilityInfoIndication, protocolIEs) - 0usize];
    ["Offset of field: UECapabilityInfoIndication::_asn_ctx"]
        [::std::mem::offset_of!(UECapabilityInfoIndication, _asn_ctx) - 48usize];
};
pub type UECapabilityInfoIndication_t = UECapabilityInfoIndication;
unsafe extern "C" {
    pub static mut asn_DEF_UECapabilityInfoIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UECapabilityInfoIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UECapabilityInfoIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMEStatusTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEStatusTransfer"][::std::mem::size_of::<MMEStatusTransfer>() - 72usize];
    ["Alignment of MMEStatusTransfer"][::std::mem::align_of::<MMEStatusTransfer>() - 8usize];
    ["Offset of field: MMEStatusTransfer::protocolIEs"]
        [::std::mem::offset_of!(MMEStatusTransfer, protocolIEs) - 0usize];
    ["Offset of field: MMEStatusTransfer::_asn_ctx"]
        [::std::mem::offset_of!(MMEStatusTransfer, _asn_ctx) - 48usize];
};
pub type MMEStatusTransfer_t = MMEStatusTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_MMEStatusTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEStatusTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEStatusTransfer_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DeactivateTrace {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DeactivateTrace"][::std::mem::size_of::<DeactivateTrace>() - 72usize];
    ["Alignment of DeactivateTrace"][::std::mem::align_of::<DeactivateTrace>() - 8usize];
    ["Offset of field: DeactivateTrace::protocolIEs"]
        [::std::mem::offset_of!(DeactivateTrace, protocolIEs) - 0usize];
    ["Offset of field: DeactivateTrace::_asn_ctx"]
        [::std::mem::offset_of!(DeactivateTrace, _asn_ctx) - 48usize];
};
pub type DeactivateTrace_t = DeactivateTrace;
unsafe extern "C" {
    pub static mut asn_DEF_DeactivateTrace: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_DeactivateTrace_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_DeactivateTrace_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TraceStart {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TraceStart"][::std::mem::size_of::<TraceStart>() - 72usize];
    ["Alignment of TraceStart"][::std::mem::align_of::<TraceStart>() - 8usize];
    ["Offset of field: TraceStart::protocolIEs"]
        [::std::mem::offset_of!(TraceStart, protocolIEs) - 0usize];
    ["Offset of field: TraceStart::_asn_ctx"]
        [::std::mem::offset_of!(TraceStart, _asn_ctx) - 48usize];
};
pub type TraceStart_t = TraceStart;
unsafe extern "C" {
    pub static mut asn_DEF_TraceStart: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TraceStart_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TraceStart_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TraceFailureIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TraceFailureIndication"][::std::mem::size_of::<TraceFailureIndication>() - 72usize];
    ["Alignment of TraceFailureIndication"]
        [::std::mem::align_of::<TraceFailureIndication>() - 8usize];
    ["Offset of field: TraceFailureIndication::protocolIEs"]
        [::std::mem::offset_of!(TraceFailureIndication, protocolIEs) - 0usize];
    ["Offset of field: TraceFailureIndication::_asn_ctx"]
        [::std::mem::offset_of!(TraceFailureIndication, _asn_ctx) - 48usize];
};
pub type TraceFailureIndication_t = TraceFailureIndication;
unsafe extern "C" {
    pub static mut asn_DEF_TraceFailureIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TraceFailureIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TraceFailureIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellTrafficTrace {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellTrafficTrace"][::std::mem::size_of::<CellTrafficTrace>() - 72usize];
    ["Alignment of CellTrafficTrace"][::std::mem::align_of::<CellTrafficTrace>() - 8usize];
    ["Offset of field: CellTrafficTrace::protocolIEs"]
        [::std::mem::offset_of!(CellTrafficTrace, protocolIEs) - 0usize];
    ["Offset of field: CellTrafficTrace::_asn_ctx"]
        [::std::mem::offset_of!(CellTrafficTrace, _asn_ctx) - 48usize];
};
pub type CellTrafficTrace_t = CellTrafficTrace;
unsafe extern "C" {
    pub static mut asn_DEF_CellTrafficTrace: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellTrafficTrace_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellTrafficTrace_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LocationReportingControl {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LocationReportingControl"]
        [::std::mem::size_of::<LocationReportingControl>() - 72usize];
    ["Alignment of LocationReportingControl"]
        [::std::mem::align_of::<LocationReportingControl>() - 8usize];
    ["Offset of field: LocationReportingControl::protocolIEs"]
        [::std::mem::offset_of!(LocationReportingControl, protocolIEs) - 0usize];
    ["Offset of field: LocationReportingControl::_asn_ctx"]
        [::std::mem::offset_of!(LocationReportingControl, _asn_ctx) - 48usize];
};
pub type LocationReportingControl_t = LocationReportingControl;
unsafe extern "C" {
    pub static mut asn_DEF_LocationReportingControl: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LocationReportingControl_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LocationReportingControl_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LocationReportingFailureIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LocationReportingFailureIndication"]
        [::std::mem::size_of::<LocationReportingFailureIndication>() - 72usize];
    ["Alignment of LocationReportingFailureIndication"]
        [::std::mem::align_of::<LocationReportingFailureIndication>() - 8usize];
    ["Offset of field: LocationReportingFailureIndication::protocolIEs"]
        [::std::mem::offset_of!(LocationReportingFailureIndication, protocolIEs) - 0usize];
    ["Offset of field: LocationReportingFailureIndication::_asn_ctx"]
        [::std::mem::offset_of!(LocationReportingFailureIndication, _asn_ctx) - 48usize];
};
pub type LocationReportingFailureIndication_t = LocationReportingFailureIndication;
unsafe extern "C" {
    pub static mut asn_DEF_LocationReportingFailureIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LocationReportingFailureIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LocationReportingFailureIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LocationReport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LocationReport"][::std::mem::size_of::<LocationReport>() - 72usize];
    ["Alignment of LocationReport"][::std::mem::align_of::<LocationReport>() - 8usize];
    ["Offset of field: LocationReport::protocolIEs"]
        [::std::mem::offset_of!(LocationReport, protocolIEs) - 0usize];
    ["Offset of field: LocationReport::_asn_ctx"]
        [::std::mem::offset_of!(LocationReport, _asn_ctx) - 48usize];
};
pub type LocationReport_t = LocationReport;
unsafe extern "C" {
    pub static mut asn_DEF_LocationReport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LocationReport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LocationReport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OverloadStart {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OverloadStart"][::std::mem::size_of::<OverloadStart>() - 72usize];
    ["Alignment of OverloadStart"][::std::mem::align_of::<OverloadStart>() - 8usize];
    ["Offset of field: OverloadStart::protocolIEs"]
        [::std::mem::offset_of!(OverloadStart, protocolIEs) - 0usize];
    ["Offset of field: OverloadStart::_asn_ctx"]
        [::std::mem::offset_of!(OverloadStart, _asn_ctx) - 48usize];
};
pub type OverloadStart_t = OverloadStart;
unsafe extern "C" {
    pub static mut asn_DEF_OverloadStart: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_OverloadStart_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_OverloadStart_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct OverloadStop {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OverloadStop"][::std::mem::size_of::<OverloadStop>() - 72usize];
    ["Alignment of OverloadStop"][::std::mem::align_of::<OverloadStop>() - 8usize];
    ["Offset of field: OverloadStop::protocolIEs"]
        [::std::mem::offset_of!(OverloadStop, protocolIEs) - 0usize];
    ["Offset of field: OverloadStop::_asn_ctx"]
        [::std::mem::offset_of!(OverloadStop, _asn_ctx) - 48usize];
};
pub type OverloadStop_t = OverloadStop;
unsafe extern "C" {
    pub static mut asn_DEF_OverloadStop: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_OverloadStop_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_OverloadStop_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBDirectInformationTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBDirectInformationTransfer"]
        [::std::mem::size_of::<ENBDirectInformationTransfer>() - 72usize];
    ["Alignment of ENBDirectInformationTransfer"]
        [::std::mem::align_of::<ENBDirectInformationTransfer>() - 8usize];
    ["Offset of field: ENBDirectInformationTransfer::protocolIEs"]
        [::std::mem::offset_of!(ENBDirectInformationTransfer, protocolIEs) - 0usize];
    ["Offset of field: ENBDirectInformationTransfer::_asn_ctx"]
        [::std::mem::offset_of!(ENBDirectInformationTransfer, _asn_ctx) - 48usize];
};
pub type ENBDirectInformationTransfer_t = ENBDirectInformationTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_ENBDirectInformationTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBDirectInformationTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBDirectInformationTransfer_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMEDirectInformationTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEDirectInformationTransfer"]
        [::std::mem::size_of::<MMEDirectInformationTransfer>() - 72usize];
    ["Alignment of MMEDirectInformationTransfer"]
        [::std::mem::align_of::<MMEDirectInformationTransfer>() - 8usize];
    ["Offset of field: MMEDirectInformationTransfer::protocolIEs"]
        [::std::mem::offset_of!(MMEDirectInformationTransfer, protocolIEs) - 0usize];
    ["Offset of field: MMEDirectInformationTransfer::_asn_ctx"]
        [::std::mem::offset_of!(MMEDirectInformationTransfer, _asn_ctx) - 48usize];
};
pub type MMEDirectInformationTransfer_t = MMEDirectInformationTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_MMEDirectInformationTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEDirectInformationTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEDirectInformationTransfer_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMEConfigurationTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEConfigurationTransfer"]
        [::std::mem::size_of::<MMEConfigurationTransfer>() - 72usize];
    ["Alignment of MMEConfigurationTransfer"]
        [::std::mem::align_of::<MMEConfigurationTransfer>() - 8usize];
    ["Offset of field: MMEConfigurationTransfer::protocolIEs"]
        [::std::mem::offset_of!(MMEConfigurationTransfer, protocolIEs) - 0usize];
    ["Offset of field: MMEConfigurationTransfer::_asn_ctx"]
        [::std::mem::offset_of!(MMEConfigurationTransfer, _asn_ctx) - 48usize];
};
pub type MMEConfigurationTransfer_t = MMEConfigurationTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_MMEConfigurationTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEConfigurationTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEConfigurationTransfer_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrivateIE_Field {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrivateIE_Container_8210P0 {
    pub list: PrivateIE_Container_8210P0__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrivateIE_Container_8210P0__bindgen_ty_1 {
    pub array: *mut *mut PrivateIE_Field,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PrivateIE_Field)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateIE_Container_8210P0__bindgen_ty_1"]
        [::std::mem::size_of::<PrivateIE_Container_8210P0__bindgen_ty_1>() - 24usize];
    ["Alignment of PrivateIE_Container_8210P0__bindgen_ty_1"]
        [::std::mem::align_of::<PrivateIE_Container_8210P0__bindgen_ty_1>() - 8usize];
    ["Offset of field: PrivateIE_Container_8210P0__bindgen_ty_1::array"]
        [::std::mem::offset_of!(PrivateIE_Container_8210P0__bindgen_ty_1, array) - 0usize];
    ["Offset of field: PrivateIE_Container_8210P0__bindgen_ty_1::count"]
        [::std::mem::offset_of!(PrivateIE_Container_8210P0__bindgen_ty_1, count) - 8usize];
    ["Offset of field: PrivateIE_Container_8210P0__bindgen_ty_1::size"]
        [::std::mem::offset_of!(PrivateIE_Container_8210P0__bindgen_ty_1, size) - 12usize];
    ["Offset of field: PrivateIE_Container_8210P0__bindgen_ty_1::free"]
        [::std::mem::offset_of!(PrivateIE_Container_8210P0__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateIE_Container_8210P0"]
        [::std::mem::size_of::<PrivateIE_Container_8210P0>() - 48usize];
    ["Alignment of PrivateIE_Container_8210P0"]
        [::std::mem::align_of::<PrivateIE_Container_8210P0>() - 8usize];
    ["Offset of field: PrivateIE_Container_8210P0::list"]
        [::std::mem::offset_of!(PrivateIE_Container_8210P0, list) - 0usize];
    ["Offset of field: PrivateIE_Container_8210P0::_asn_ctx"]
        [::std::mem::offset_of!(PrivateIE_Container_8210P0, _asn_ctx) - 24usize];
};
pub type PrivateIE_Container_8210P0_t = PrivateIE_Container_8210P0;
unsafe extern "C" {
    pub static mut asn_DEF_PrivateIE_Container_8210P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PrivateIE_Container_8210P0_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PrivateIE_Container_8210P0_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_PrivateIE_Container_8210P0_constr_1: asn_per_constraints_t;
}
pub const PrivateIE_ID_PR_PrivateIE_ID_PR_NOTHING: PrivateIE_ID_PR = 0;
pub const PrivateIE_ID_PR_PrivateIE_ID_PR_local: PrivateIE_ID_PR = 1;
pub const PrivateIE_ID_PR_PrivateIE_ID_PR_global: PrivateIE_ID_PR = 2;
pub type PrivateIE_ID_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PrivateIE_ID {
    pub present: PrivateIE_ID_PR,
    pub choice: PrivateIE_ID_PrivateIE_ID_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union PrivateIE_ID_PrivateIE_ID_u {
    pub local: ::std::os::raw::c_long,
    pub global: OBJECT_IDENTIFIER_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateIE_ID_PrivateIE_ID_u"]
        [::std::mem::size_of::<PrivateIE_ID_PrivateIE_ID_u>() - 16usize];
    ["Alignment of PrivateIE_ID_PrivateIE_ID_u"]
        [::std::mem::align_of::<PrivateIE_ID_PrivateIE_ID_u>() - 8usize];
    ["Offset of field: PrivateIE_ID_PrivateIE_ID_u::local"]
        [::std::mem::offset_of!(PrivateIE_ID_PrivateIE_ID_u, local) - 0usize];
    ["Offset of field: PrivateIE_ID_PrivateIE_ID_u::global"]
        [::std::mem::offset_of!(PrivateIE_ID_PrivateIE_ID_u, global) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateIE_ID"][::std::mem::size_of::<PrivateIE_ID>() - 48usize];
    ["Alignment of PrivateIE_ID"][::std::mem::align_of::<PrivateIE_ID>() - 8usize];
    ["Offset of field: PrivateIE_ID::present"]
        [::std::mem::offset_of!(PrivateIE_ID, present) - 0usize];
    ["Offset of field: PrivateIE_ID::choice"]
        [::std::mem::offset_of!(PrivateIE_ID, choice) - 8usize];
    ["Offset of field: PrivateIE_ID::_asn_ctx"]
        [::std::mem::offset_of!(PrivateIE_ID, _asn_ctx) - 24usize];
};
pub type PrivateIE_ID_t = PrivateIE_ID;
unsafe extern "C" {
    pub static mut asn_DEF_PrivateIE_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PrivateIE_ID_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PrivateIE_ID_1: [asn_TYPE_member_t; 2usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_PrivateIE_ID_constr_1: asn_per_constraints_t;
}
pub const PrivateIE_Field_8213P0__value_PR_PrivateIE_Field_8213P0__value_PR_NOTHING:
    PrivateIE_Field_8213P0__value_PR = 0;
pub type PrivateIE_Field_8213P0__value_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PrivateIE_Field_8213P0 {
    pub id: PrivateIE_ID_t,
    pub criticality: Criticality_t,
    pub value: PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value {
    pub present: PrivateIE_Field_8213P0__value_PR,
    pub choice:
        PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value_PrivateIE_Field_8213P0__value_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[repr(align(1))]
#[derive(Copy, Clone)]
pub struct PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value_PrivateIE_Field_8213P0__value_u {
    pub bindgen_union_field: [u8; 0usize],
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value_PrivateIE_Field_8213P0__value_u"] [:: std :: mem :: size_of :: < PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value_PrivateIE_Field_8213P0__value_u > () - 0usize] ;
    ["Alignment of PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value_PrivateIE_Field_8213P0__value_u"] [:: std :: mem :: align_of :: < PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value_PrivateIE_Field_8213P0__value_u > () - 1usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value"]
        [::std::mem::size_of::<PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value>() - 32usize];
    ["Alignment of PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value"]
        [::std::mem::align_of::<PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value>() - 8usize];
    ["Offset of field: PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value::present"][::std::mem::offset_of!(
        PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value,
        present
    ) - 0usize];
    ["Offset of field: PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value::choice"][::std::mem::offset_of!(
        PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value,
        choice
    ) - 4usize];
    ["Offset of field: PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value::_asn_ctx"][::std::mem::offset_of!(
        PrivateIE_Field_8213P0_PrivateIE_Field_8213P0__value,
        _asn_ctx
    ) - 8usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateIE_Field_8213P0"][::std::mem::size_of::<PrivateIE_Field_8213P0>() - 112usize];
    ["Alignment of PrivateIE_Field_8213P0"]
        [::std::mem::align_of::<PrivateIE_Field_8213P0>() - 8usize];
    ["Offset of field: PrivateIE_Field_8213P0::id"]
        [::std::mem::offset_of!(PrivateIE_Field_8213P0, id) - 0usize];
    ["Offset of field: PrivateIE_Field_8213P0::criticality"]
        [::std::mem::offset_of!(PrivateIE_Field_8213P0, criticality) - 48usize];
    ["Offset of field: PrivateIE_Field_8213P0::value"]
        [::std::mem::offset_of!(PrivateIE_Field_8213P0, value) - 56usize];
    ["Offset of field: PrivateIE_Field_8213P0::_asn_ctx"]
        [::std::mem::offset_of!(PrivateIE_Field_8213P0, _asn_ctx) - 88usize];
};
pub type PrivateIE_Field_8213P0_t = PrivateIE_Field_8213P0;
unsafe extern "C" {
    pub static mut asn_DEF_PrivateIE_Field_8213P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PrivateIE_Field_8213P0_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PrivateIE_Field_8213P0_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PrivateMessage {
    pub privateIEs: PrivateIE_Container_8210P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PrivateMessage"][::std::mem::size_of::<PrivateMessage>() - 72usize];
    ["Alignment of PrivateMessage"][::std::mem::align_of::<PrivateMessage>() - 8usize];
    ["Offset of field: PrivateMessage::privateIEs"]
        [::std::mem::offset_of!(PrivateMessage, privateIEs) - 0usize];
    ["Offset of field: PrivateMessage::_asn_ctx"]
        [::std::mem::offset_of!(PrivateMessage, _asn_ctx) - 48usize];
};
pub type PrivateMessage_t = PrivateMessage;
unsafe extern "C" {
    pub static mut asn_DEF_PrivateMessage: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PrivateMessage_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PrivateMessage_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DownlinkUEAssociatedLPPaTransport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DownlinkUEAssociatedLPPaTransport"]
        [::std::mem::size_of::<DownlinkUEAssociatedLPPaTransport>() - 72usize];
    ["Alignment of DownlinkUEAssociatedLPPaTransport"]
        [::std::mem::align_of::<DownlinkUEAssociatedLPPaTransport>() - 8usize];
    ["Offset of field: DownlinkUEAssociatedLPPaTransport::protocolIEs"]
        [::std::mem::offset_of!(DownlinkUEAssociatedLPPaTransport, protocolIEs) - 0usize];
    ["Offset of field: DownlinkUEAssociatedLPPaTransport::_asn_ctx"]
        [::std::mem::offset_of!(DownlinkUEAssociatedLPPaTransport, _asn_ctx) - 48usize];
};
pub type DownlinkUEAssociatedLPPaTransport_t = DownlinkUEAssociatedLPPaTransport;
unsafe extern "C" {
    pub static mut asn_DEF_DownlinkUEAssociatedLPPaTransport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_DownlinkUEAssociatedLPPaTransport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_DownlinkUEAssociatedLPPaTransport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkUEAssociatedLPPaTransport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UplinkUEAssociatedLPPaTransport"]
        [::std::mem::size_of::<UplinkUEAssociatedLPPaTransport>() - 72usize];
    ["Alignment of UplinkUEAssociatedLPPaTransport"]
        [::std::mem::align_of::<UplinkUEAssociatedLPPaTransport>() - 8usize];
    ["Offset of field: UplinkUEAssociatedLPPaTransport::protocolIEs"]
        [::std::mem::offset_of!(UplinkUEAssociatedLPPaTransport, protocolIEs) - 0usize];
    ["Offset of field: UplinkUEAssociatedLPPaTransport::_asn_ctx"]
        [::std::mem::offset_of!(UplinkUEAssociatedLPPaTransport, _asn_ctx) - 48usize];
};
pub type UplinkUEAssociatedLPPaTransport_t = UplinkUEAssociatedLPPaTransport;
unsafe extern "C" {
    pub static mut asn_DEF_UplinkUEAssociatedLPPaTransport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UplinkUEAssociatedLPPaTransport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UplinkUEAssociatedLPPaTransport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DownlinkNonUEAssociatedLPPaTransport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DownlinkNonUEAssociatedLPPaTransport"]
        [::std::mem::size_of::<DownlinkNonUEAssociatedLPPaTransport>() - 72usize];
    ["Alignment of DownlinkNonUEAssociatedLPPaTransport"]
        [::std::mem::align_of::<DownlinkNonUEAssociatedLPPaTransport>() - 8usize];
    ["Offset of field: DownlinkNonUEAssociatedLPPaTransport::protocolIEs"]
        [::std::mem::offset_of!(DownlinkNonUEAssociatedLPPaTransport, protocolIEs) - 0usize];
    ["Offset of field: DownlinkNonUEAssociatedLPPaTransport::_asn_ctx"]
        [::std::mem::offset_of!(DownlinkNonUEAssociatedLPPaTransport, _asn_ctx) - 48usize];
};
pub type DownlinkNonUEAssociatedLPPaTransport_t = DownlinkNonUEAssociatedLPPaTransport;
unsafe extern "C" {
    pub static mut asn_DEF_DownlinkNonUEAssociatedLPPaTransport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_DownlinkNonUEAssociatedLPPaTransport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_DownlinkNonUEAssociatedLPPaTransport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UplinkNonUEAssociatedLPPaTransport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UplinkNonUEAssociatedLPPaTransport"]
        [::std::mem::size_of::<UplinkNonUEAssociatedLPPaTransport>() - 72usize];
    ["Alignment of UplinkNonUEAssociatedLPPaTransport"]
        [::std::mem::align_of::<UplinkNonUEAssociatedLPPaTransport>() - 8usize];
    ["Offset of field: UplinkNonUEAssociatedLPPaTransport::protocolIEs"]
        [::std::mem::offset_of!(UplinkNonUEAssociatedLPPaTransport, protocolIEs) - 0usize];
    ["Offset of field: UplinkNonUEAssociatedLPPaTransport::_asn_ctx"]
        [::std::mem::offset_of!(UplinkNonUEAssociatedLPPaTransport, _asn_ctx) - 48usize];
};
pub type UplinkNonUEAssociatedLPPaTransport_t = UplinkNonUEAssociatedLPPaTransport;
unsafe extern "C" {
    pub static mut asn_DEF_UplinkNonUEAssociatedLPPaTransport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UplinkNonUEAssociatedLPPaTransport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UplinkNonUEAssociatedLPPaTransport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWSRestartIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PWSRestartIndication"][::std::mem::size_of::<PWSRestartIndication>() - 72usize];
    ["Alignment of PWSRestartIndication"][::std::mem::align_of::<PWSRestartIndication>() - 8usize];
    ["Offset of field: PWSRestartIndication::protocolIEs"]
        [::std::mem::offset_of!(PWSRestartIndication, protocolIEs) - 0usize];
    ["Offset of field: PWSRestartIndication::_asn_ctx"]
        [::std::mem::offset_of!(PWSRestartIndication, _asn_ctx) - 48usize];
};
pub type PWSRestartIndication_t = PWSRestartIndication;
unsafe extern "C" {
    pub static mut asn_DEF_PWSRestartIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PWSRestartIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PWSRestartIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RerouteNASRequest {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RerouteNASRequest"][::std::mem::size_of::<RerouteNASRequest>() - 72usize];
    ["Alignment of RerouteNASRequest"][::std::mem::align_of::<RerouteNASRequest>() - 8usize];
    ["Offset of field: RerouteNASRequest::protocolIEs"]
        [::std::mem::offset_of!(RerouteNASRequest, protocolIEs) - 0usize];
    ["Offset of field: RerouteNASRequest::_asn_ctx"]
        [::std::mem::offset_of!(RerouteNASRequest, _asn_ctx) - 48usize];
};
pub type RerouteNASRequest_t = RerouteNASRequest;
unsafe extern "C" {
    pub static mut asn_DEF_RerouteNASRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RerouteNASRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RerouteNASRequest_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWSFailureIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PWSFailureIndication"][::std::mem::size_of::<PWSFailureIndication>() - 72usize];
    ["Alignment of PWSFailureIndication"][::std::mem::align_of::<PWSFailureIndication>() - 8usize];
    ["Offset of field: PWSFailureIndication::protocolIEs"]
        [::std::mem::offset_of!(PWSFailureIndication, protocolIEs) - 0usize];
    ["Offset of field: PWSFailureIndication::_asn_ctx"]
        [::std::mem::offset_of!(PWSFailureIndication, _asn_ctx) - 48usize];
};
pub type PWSFailureIndication_t = PWSFailureIndication;
unsafe extern "C" {
    pub static mut asn_DEF_PWSFailureIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PWSFailureIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PWSFailureIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConnectionEstablishmentIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ConnectionEstablishmentIndication"]
        [::std::mem::size_of::<ConnectionEstablishmentIndication>() - 72usize];
    ["Alignment of ConnectionEstablishmentIndication"]
        [::std::mem::align_of::<ConnectionEstablishmentIndication>() - 8usize];
    ["Offset of field: ConnectionEstablishmentIndication::protocolIEs"]
        [::std::mem::offset_of!(ConnectionEstablishmentIndication, protocolIEs) - 0usize];
    ["Offset of field: ConnectionEstablishmentIndication::_asn_ctx"]
        [::std::mem::offset_of!(ConnectionEstablishmentIndication, _asn_ctx) - 48usize];
};
pub type ConnectionEstablishmentIndication_t = ConnectionEstablishmentIndication;
unsafe extern "C" {
    pub static mut asn_DEF_ConnectionEstablishmentIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ConnectionEstablishmentIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ConnectionEstablishmentIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NASDeliveryIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NASDeliveryIndication"][::std::mem::size_of::<NASDeliveryIndication>() - 72usize];
    ["Alignment of NASDeliveryIndication"]
        [::std::mem::align_of::<NASDeliveryIndication>() - 8usize];
    ["Offset of field: NASDeliveryIndication::protocolIEs"]
        [::std::mem::offset_of!(NASDeliveryIndication, protocolIEs) - 0usize];
    ["Offset of field: NASDeliveryIndication::_asn_ctx"]
        [::std::mem::offset_of!(NASDeliveryIndication, _asn_ctx) - 48usize];
};
pub type NASDeliveryIndication_t = NASDeliveryIndication;
unsafe extern "C" {
    pub static mut asn_DEF_NASDeliveryIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_NASDeliveryIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_NASDeliveryIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RetrieveUEInformation {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RetrieveUEInformation"][::std::mem::size_of::<RetrieveUEInformation>() - 72usize];
    ["Alignment of RetrieveUEInformation"]
        [::std::mem::align_of::<RetrieveUEInformation>() - 8usize];
    ["Offset of field: RetrieveUEInformation::protocolIEs"]
        [::std::mem::offset_of!(RetrieveUEInformation, protocolIEs) - 0usize];
    ["Offset of field: RetrieveUEInformation::_asn_ctx"]
        [::std::mem::offset_of!(RetrieveUEInformation, _asn_ctx) - 48usize];
};
pub type RetrieveUEInformation_t = RetrieveUEInformation;
unsafe extern "C" {
    pub static mut asn_DEF_RetrieveUEInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RetrieveUEInformation_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RetrieveUEInformation_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEInformationTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEInformationTransfer"][::std::mem::size_of::<UEInformationTransfer>() - 72usize];
    ["Alignment of UEInformationTransfer"]
        [::std::mem::align_of::<UEInformationTransfer>() - 8usize];
    ["Offset of field: UEInformationTransfer::protocolIEs"]
        [::std::mem::offset_of!(UEInformationTransfer, protocolIEs) - 0usize];
    ["Offset of field: UEInformationTransfer::_asn_ctx"]
        [::std::mem::offset_of!(UEInformationTransfer, _asn_ctx) - 48usize];
};
pub type UEInformationTransfer_t = UEInformationTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_UEInformationTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UEInformationTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UEInformationTransfer_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBCPRelocationIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBCPRelocationIndication"]
        [::std::mem::size_of::<ENBCPRelocationIndication>() - 72usize];
    ["Alignment of ENBCPRelocationIndication"]
        [::std::mem::align_of::<ENBCPRelocationIndication>() - 8usize];
    ["Offset of field: ENBCPRelocationIndication::protocolIEs"]
        [::std::mem::offset_of!(ENBCPRelocationIndication, protocolIEs) - 0usize];
    ["Offset of field: ENBCPRelocationIndication::_asn_ctx"]
        [::std::mem::offset_of!(ENBCPRelocationIndication, _asn_ctx) - 48usize];
};
pub type ENBCPRelocationIndication_t = ENBCPRelocationIndication;
unsafe extern "C" {
    pub static mut asn_DEF_ENBCPRelocationIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBCPRelocationIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBCPRelocationIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMECPRelocationIndication {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMECPRelocationIndication"]
        [::std::mem::size_of::<MMECPRelocationIndication>() - 72usize];
    ["Alignment of MMECPRelocationIndication"]
        [::std::mem::align_of::<MMECPRelocationIndication>() - 8usize];
    ["Offset of field: MMECPRelocationIndication::protocolIEs"]
        [::std::mem::offset_of!(MMECPRelocationIndication, protocolIEs) - 0usize];
    ["Offset of field: MMECPRelocationIndication::_asn_ctx"]
        [::std::mem::offset_of!(MMECPRelocationIndication, _asn_ctx) - 48usize];
};
pub type MMECPRelocationIndication_t = MMECPRelocationIndication;
unsafe extern "C" {
    pub static mut asn_DEF_MMECPRelocationIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMECPRelocationIndication_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMECPRelocationIndication_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecondaryRATDataUsageReport {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecondaryRATDataUsageReport"]
        [::std::mem::size_of::<SecondaryRATDataUsageReport>() - 72usize];
    ["Alignment of SecondaryRATDataUsageReport"]
        [::std::mem::align_of::<SecondaryRATDataUsageReport>() - 8usize];
    ["Offset of field: SecondaryRATDataUsageReport::protocolIEs"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReport, protocolIEs) - 0usize];
    ["Offset of field: SecondaryRATDataUsageReport::_asn_ctx"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReport, _asn_ctx) - 48usize];
};
pub type SecondaryRATDataUsageReport_t = SecondaryRATDataUsageReport;
unsafe extern "C" {
    pub static mut asn_DEF_SecondaryRATDataUsageReport: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SecondaryRATDataUsageReport_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SecondaryRATDataUsageReport_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverSuccess {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverSuccess"][::std::mem::size_of::<HandoverSuccess>() - 72usize];
    ["Alignment of HandoverSuccess"][::std::mem::align_of::<HandoverSuccess>() - 8usize];
    ["Offset of field: HandoverSuccess::protocolIEs"]
        [::std::mem::offset_of!(HandoverSuccess, protocolIEs) - 0usize];
    ["Offset of field: HandoverSuccess::_asn_ctx"]
        [::std::mem::offset_of!(HandoverSuccess, _asn_ctx) - 48usize];
};
pub type HandoverSuccess_t = HandoverSuccess;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverSuccess: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_HandoverSuccess_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_HandoverSuccess_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBEarlyStatusTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBEarlyStatusTransfer"][::std::mem::size_of::<ENBEarlyStatusTransfer>() - 72usize];
    ["Alignment of ENBEarlyStatusTransfer"]
        [::std::mem::align_of::<ENBEarlyStatusTransfer>() - 8usize];
    ["Offset of field: ENBEarlyStatusTransfer::protocolIEs"]
        [::std::mem::offset_of!(ENBEarlyStatusTransfer, protocolIEs) - 0usize];
    ["Offset of field: ENBEarlyStatusTransfer::_asn_ctx"]
        [::std::mem::offset_of!(ENBEarlyStatusTransfer, _asn_ctx) - 48usize];
};
pub type ENBEarlyStatusTransfer_t = ENBEarlyStatusTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_ENBEarlyStatusTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBEarlyStatusTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBEarlyStatusTransfer_1: [asn_TYPE_member_t; 1usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MMEEarlyStatusTransfer {
    pub protocolIEs: ProtocolIE_Container_8143P0_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEEarlyStatusTransfer"][::std::mem::size_of::<MMEEarlyStatusTransfer>() - 72usize];
    ["Alignment of MMEEarlyStatusTransfer"]
        [::std::mem::align_of::<MMEEarlyStatusTransfer>() - 8usize];
    ["Offset of field: MMEEarlyStatusTransfer::protocolIEs"]
        [::std::mem::offset_of!(MMEEarlyStatusTransfer, protocolIEs) - 0usize];
    ["Offset of field: MMEEarlyStatusTransfer::_asn_ctx"]
        [::std::mem::offset_of!(MMEEarlyStatusTransfer, _asn_ctx) - 48usize];
};
pub type MMEEarlyStatusTransfer_t = MMEEarlyStatusTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_MMEEarlyStatusTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEEarlyStatusTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEEarlyStatusTransfer_1: [asn_TYPE_member_t; 1usize];
}
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_NOTHING:
    InitiatingMessage__value_PR = 0;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_HandoverRequired:
    InitiatingMessage__value_PR = 1;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_HandoverRequest:
    InitiatingMessage__value_PR = 2;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_PathSwitchRequest:
    InitiatingMessage__value_PR = 3;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_E_RABSetupRequest:
    InitiatingMessage__value_PR = 4;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_E_RABModifyRequest:
    InitiatingMessage__value_PR = 5;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_E_RABReleaseCommand:
    InitiatingMessage__value_PR = 6;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_InitialContextSetupRequest:
    InitiatingMessage__value_PR = 7;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_HandoverCancel:
    InitiatingMessage__value_PR = 8;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_KillRequest:
    InitiatingMessage__value_PR = 9;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_Reset:
    InitiatingMessage__value_PR = 10;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_S1SetupRequest:
    InitiatingMessage__value_PR = 11;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UEContextModificationRequest:
    InitiatingMessage__value_PR = 12;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UEContextReleaseCommand:
    InitiatingMessage__value_PR = 13;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ENBConfigurationUpdate:
    InitiatingMessage__value_PR = 14;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_MMEConfigurationUpdate:
    InitiatingMessage__value_PR = 15;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_WriteReplaceWarningRequest:
    InitiatingMessage__value_PR = 16;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UERadioCapabilityMatchRequest:
    InitiatingMessage__value_PR = 17;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_E_RABModificationIndication:
    InitiatingMessage__value_PR = 18;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UEContextModificationIndication : InitiatingMessage__value_PR = 19 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UEContextSuspendRequest:
    InitiatingMessage__value_PR = 20;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UEContextResumeRequest:
    InitiatingMessage__value_PR = 21;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UERadioCapabilityIDMappingRequest : InitiatingMessage__value_PR = 22 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_HandoverNotify:
    InitiatingMessage__value_PR = 23;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_E_RABReleaseIndication:
    InitiatingMessage__value_PR = 24;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_Paging:
    InitiatingMessage__value_PR = 25;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_DownlinkNASTransport:
    InitiatingMessage__value_PR = 26;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_InitialUEMessage:
    InitiatingMessage__value_PR = 27;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UplinkNASTransport:
    InitiatingMessage__value_PR = 28;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ErrorIndication:
    InitiatingMessage__value_PR = 29;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_NASNonDeliveryIndication:
    InitiatingMessage__value_PR = 30;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UEContextReleaseRequest:
    InitiatingMessage__value_PR = 31;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_DownlinkS1cdma2000tunnelling:
    InitiatingMessage__value_PR = 32;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UplinkS1cdma2000tunnelling:
    InitiatingMessage__value_PR = 33;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UECapabilityInfoIndication:
    InitiatingMessage__value_PR = 34;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ENBStatusTransfer:
    InitiatingMessage__value_PR = 35;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_MMEStatusTransfer:
    InitiatingMessage__value_PR = 36;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_DeactivateTrace:
    InitiatingMessage__value_PR = 37;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_TraceStart:
    InitiatingMessage__value_PR = 38;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_TraceFailureIndication:
    InitiatingMessage__value_PR = 39;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_CellTrafficTrace:
    InitiatingMessage__value_PR = 40;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_LocationReportingControl:
    InitiatingMessage__value_PR = 41;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_LocationReportingFailureIndication : InitiatingMessage__value_PR = 42 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_LocationReport:
    InitiatingMessage__value_PR = 43;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_OverloadStart:
    InitiatingMessage__value_PR = 44;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_OverloadStop:
    InitiatingMessage__value_PR = 45;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ENBDirectInformationTransfer:
    InitiatingMessage__value_PR = 46;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_MMEDirectInformationTransfer:
    InitiatingMessage__value_PR = 47;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ENBConfigurationTransfer:
    InitiatingMessage__value_PR = 48;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_MMEConfigurationTransfer:
    InitiatingMessage__value_PR = 49;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_PrivateMessage:
    InitiatingMessage__value_PR = 50;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_DownlinkUEAssociatedLPPaTransport : InitiatingMessage__value_PR = 51 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UplinkUEAssociatedLPPaTransport : InitiatingMessage__value_PR = 52 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_DownlinkNonUEAssociatedLPPaTransport : InitiatingMessage__value_PR = 53 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UplinkNonUEAssociatedLPPaTransport : InitiatingMessage__value_PR = 54 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_PWSRestartIndication:
    InitiatingMessage__value_PR = 55;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_RerouteNASRequest:
    InitiatingMessage__value_PR = 56;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_PWSFailureIndication:
    InitiatingMessage__value_PR = 57;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ConnectionEstablishmentIndication : InitiatingMessage__value_PR = 58 ;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_NASDeliveryIndication:
    InitiatingMessage__value_PR = 59;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_RetrieveUEInformation:
    InitiatingMessage__value_PR = 60;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_UEInformationTransfer:
    InitiatingMessage__value_PR = 61;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ENBCPRelocationIndication:
    InitiatingMessage__value_PR = 62;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_MMECPRelocationIndication:
    InitiatingMessage__value_PR = 63;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_SecondaryRATDataUsageReport:
    InitiatingMessage__value_PR = 64;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_HandoverSuccess:
    InitiatingMessage__value_PR = 65;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_ENBEarlyStatusTransfer:
    InitiatingMessage__value_PR = 66;
pub const InitiatingMessage__value_PR_InitiatingMessage__value_PR_MMEEarlyStatusTransfer:
    InitiatingMessage__value_PR = 67;
pub type InitiatingMessage__value_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct InitiatingMessage {
    pub procedureCode: ProcedureCode_t,
    pub criticality: Criticality_t,
    pub value: InitiatingMessage_InitiatingMessage__value,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct InitiatingMessage_InitiatingMessage__value {
    pub present: InitiatingMessage__value_PR,
    pub choice: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u {
    pub HandoverRequired: HandoverRequired_t,
    pub HandoverRequest: HandoverRequest_t,
    pub PathSwitchRequest: PathSwitchRequest_t,
    pub E_RABSetupRequest: E_RABSetupRequest_t,
    pub E_RABModifyRequest: E_RABModifyRequest_t,
    pub E_RABReleaseCommand: E_RABReleaseCommand_t,
    pub InitialContextSetupRequest: InitialContextSetupRequest_t,
    pub HandoverCancel: HandoverCancel_t,
    pub KillRequest: KillRequest_t,
    pub Reset: Reset_t,
    pub S1SetupRequest: S1SetupRequest_t,
    pub UEContextModificationRequest: UEContextModificationRequest_t,
    pub UEContextReleaseCommand: UEContextReleaseCommand_t,
    pub ENBConfigurationUpdate: ENBConfigurationUpdate_t,
    pub MMEConfigurationUpdate: MMEConfigurationUpdate_t,
    pub WriteReplaceWarningRequest: WriteReplaceWarningRequest_t,
    pub UERadioCapabilityMatchRequest: UERadioCapabilityMatchRequest_t,
    pub E_RABModificationIndication: E_RABModificationIndication_t,
    pub UEContextModificationIndication: UEContextModificationIndication_t,
    pub UEContextSuspendRequest: UEContextSuspendRequest_t,
    pub UEContextResumeRequest: UEContextResumeRequest_t,
    pub UERadioCapabilityIDMappingRequest: UERadioCapabilityIDMappingRequest_t,
    pub HandoverNotify: HandoverNotify_t,
    pub E_RABReleaseIndication: E_RABReleaseIndication_t,
    pub Paging: Paging_t,
    pub DownlinkNASTransport: DownlinkNASTransport_t,
    pub InitialUEMessage: InitialUEMessage_t,
    pub UplinkNASTransport: UplinkNASTransport_t,
    pub ErrorIndication: ErrorIndication_t,
    pub NASNonDeliveryIndication: NASNonDeliveryIndication_t,
    pub UEContextReleaseRequest: UEContextReleaseRequest_t,
    pub DownlinkS1cdma2000tunnelling: DownlinkS1cdma2000tunnelling_t,
    pub UplinkS1cdma2000tunnelling: UplinkS1cdma2000tunnelling_t,
    pub UECapabilityInfoIndication: UECapabilityInfoIndication_t,
    pub ENBStatusTransfer: ENBStatusTransfer_t,
    pub MMEStatusTransfer: MMEStatusTransfer_t,
    pub DeactivateTrace: DeactivateTrace_t,
    pub TraceStart: TraceStart_t,
    pub TraceFailureIndication: TraceFailureIndication_t,
    pub CellTrafficTrace: CellTrafficTrace_t,
    pub LocationReportingControl: LocationReportingControl_t,
    pub LocationReportingFailureIndication: LocationReportingFailureIndication_t,
    pub LocationReport: LocationReport_t,
    pub OverloadStart: OverloadStart_t,
    pub OverloadStop: OverloadStop_t,
    pub ENBDirectInformationTransfer: ENBDirectInformationTransfer_t,
    pub MMEDirectInformationTransfer: MMEDirectInformationTransfer_t,
    pub ENBConfigurationTransfer: ENBConfigurationTransfer_t,
    pub MMEConfigurationTransfer: MMEConfigurationTransfer_t,
    pub PrivateMessage: PrivateMessage_t,
    pub DownlinkUEAssociatedLPPaTransport: DownlinkUEAssociatedLPPaTransport_t,
    pub UplinkUEAssociatedLPPaTransport: UplinkUEAssociatedLPPaTransport_t,
    pub DownlinkNonUEAssociatedLPPaTransport: DownlinkNonUEAssociatedLPPaTransport_t,
    pub UplinkNonUEAssociatedLPPaTransport: UplinkNonUEAssociatedLPPaTransport_t,
    pub PWSRestartIndication: PWSRestartIndication_t,
    pub RerouteNASRequest: RerouteNASRequest_t,
    pub PWSFailureIndication: PWSFailureIndication_t,
    pub ConnectionEstablishmentIndication: ConnectionEstablishmentIndication_t,
    pub NASDeliveryIndication: NASDeliveryIndication_t,
    pub RetrieveUEInformation: RetrieveUEInformation_t,
    pub UEInformationTransfer: UEInformationTransfer_t,
    pub ENBCPRelocationIndication: ENBCPRelocationIndication_t,
    pub MMECPRelocationIndication: MMECPRelocationIndication_t,
    pub SecondaryRATDataUsageReport: SecondaryRATDataUsageReport_t,
    pub HandoverSuccess: HandoverSuccess_t,
    pub ENBEarlyStatusTransfer: ENBEarlyStatusTransfer_t,
    pub MMEEarlyStatusTransfer: MMEEarlyStatusTransfer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u"]
        [::std::mem::size_of::<
            InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u,
        >() - 72usize];
    ["Alignment of InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u"]
        [::std::mem::align_of::<
            InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u,
        >() - 8usize];
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::HandoverRequired"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , HandoverRequired) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::HandoverRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , HandoverRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::PathSwitchRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , PathSwitchRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::E_RABSetupRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , E_RABSetupRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::E_RABModifyRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , E_RABModifyRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::E_RABReleaseCommand"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , E_RABReleaseCommand) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::InitialContextSetupRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , InitialContextSetupRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::HandoverCancel"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , HandoverCancel) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::KillRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , KillRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::Reset"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , Reset) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::S1SetupRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , S1SetupRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UEContextModificationRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UEContextModificationRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UEContextReleaseCommand"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UEContextReleaseCommand) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ENBConfigurationUpdate"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ENBConfigurationUpdate) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::MMEConfigurationUpdate"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , MMEConfigurationUpdate) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::WriteReplaceWarningRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , WriteReplaceWarningRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UERadioCapabilityMatchRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UERadioCapabilityMatchRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::E_RABModificationIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , E_RABModificationIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UEContextModificationIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UEContextModificationIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UEContextSuspendRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UEContextSuspendRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UEContextResumeRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UEContextResumeRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UERadioCapabilityIDMappingRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UERadioCapabilityIDMappingRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::HandoverNotify"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , HandoverNotify) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::E_RABReleaseIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , E_RABReleaseIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::Paging"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , Paging) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::DownlinkNASTransport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , DownlinkNASTransport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::InitialUEMessage"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , InitialUEMessage) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UplinkNASTransport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UplinkNASTransport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ErrorIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ErrorIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::NASNonDeliveryIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , NASNonDeliveryIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UEContextReleaseRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UEContextReleaseRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::DownlinkS1cdma2000tunnelling"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , DownlinkS1cdma2000tunnelling) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UplinkS1cdma2000tunnelling"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UplinkS1cdma2000tunnelling) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UECapabilityInfoIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UECapabilityInfoIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ENBStatusTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ENBStatusTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::MMEStatusTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , MMEStatusTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::DeactivateTrace"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , DeactivateTrace) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::TraceStart"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , TraceStart) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::TraceFailureIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , TraceFailureIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::CellTrafficTrace"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , CellTrafficTrace) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::LocationReportingControl"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , LocationReportingControl) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::LocationReportingFailureIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , LocationReportingFailureIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::LocationReport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , LocationReport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::OverloadStart"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , OverloadStart) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::OverloadStop"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , OverloadStop) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ENBDirectInformationTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ENBDirectInformationTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::MMEDirectInformationTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , MMEDirectInformationTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ENBConfigurationTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ENBConfigurationTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::MMEConfigurationTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , MMEConfigurationTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::PrivateMessage"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , PrivateMessage) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::DownlinkUEAssociatedLPPaTransport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , DownlinkUEAssociatedLPPaTransport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UplinkUEAssociatedLPPaTransport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UplinkUEAssociatedLPPaTransport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::DownlinkNonUEAssociatedLPPaTransport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , DownlinkNonUEAssociatedLPPaTransport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UplinkNonUEAssociatedLPPaTransport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UplinkNonUEAssociatedLPPaTransport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::PWSRestartIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , PWSRestartIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::RerouteNASRequest"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , RerouteNASRequest) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::PWSFailureIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , PWSFailureIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ConnectionEstablishmentIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ConnectionEstablishmentIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::NASDeliveryIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , NASDeliveryIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::RetrieveUEInformation"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , RetrieveUEInformation) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::UEInformationTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , UEInformationTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ENBCPRelocationIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ENBCPRelocationIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::MMECPRelocationIndication"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , MMECPRelocationIndication) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::SecondaryRATDataUsageReport"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , SecondaryRATDataUsageReport) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::HandoverSuccess"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , HandoverSuccess) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::ENBEarlyStatusTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , ENBEarlyStatusTransfer) - 0usize] ;
    ["Offset of field: InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u::MMEEarlyStatusTransfer"] [:: std :: mem :: offset_of ! (InitiatingMessage_InitiatingMessage__value_InitiatingMessage__value_u , MMEEarlyStatusTransfer) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InitiatingMessage_InitiatingMessage__value"]
        [::std::mem::size_of::<InitiatingMessage_InitiatingMessage__value>() - 104usize];
    ["Alignment of InitiatingMessage_InitiatingMessage__value"]
        [::std::mem::align_of::<InitiatingMessage_InitiatingMessage__value>() - 8usize];
    ["Offset of field: InitiatingMessage_InitiatingMessage__value::present"]
        [::std::mem::offset_of!(InitiatingMessage_InitiatingMessage__value, present) - 0usize];
    ["Offset of field: InitiatingMessage_InitiatingMessage__value::choice"]
        [::std::mem::offset_of!(InitiatingMessage_InitiatingMessage__value, choice) - 8usize];
    ["Offset of field: InitiatingMessage_InitiatingMessage__value::_asn_ctx"]
        [::std::mem::offset_of!(InitiatingMessage_InitiatingMessage__value, _asn_ctx) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InitiatingMessage"][::std::mem::size_of::<InitiatingMessage>() - 144usize];
    ["Alignment of InitiatingMessage"][::std::mem::align_of::<InitiatingMessage>() - 8usize];
    ["Offset of field: InitiatingMessage::procedureCode"]
        [::std::mem::offset_of!(InitiatingMessage, procedureCode) - 0usize];
    ["Offset of field: InitiatingMessage::criticality"]
        [::std::mem::offset_of!(InitiatingMessage, criticality) - 8usize];
    ["Offset of field: InitiatingMessage::value"]
        [::std::mem::offset_of!(InitiatingMessage, value) - 16usize];
    ["Offset of field: InitiatingMessage::_asn_ctx"]
        [::std::mem::offset_of!(InitiatingMessage, _asn_ctx) - 120usize];
};
pub type InitiatingMessage_t = InitiatingMessage;
unsafe extern "C" {
    pub static mut asn_DEF_InitiatingMessage: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InitiatingMessage_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InitiatingMessage_1: [asn_TYPE_member_t; 3usize];
}
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_NOTHING:
    SuccessfulOutcome__value_PR = 0;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_HandoverCommand:
    SuccessfulOutcome__value_PR = 1;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_HandoverRequestAcknowledge:
    SuccessfulOutcome__value_PR = 2;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_PathSwitchRequestAcknowledge:
    SuccessfulOutcome__value_PR = 3;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_E_RABSetupResponse:
    SuccessfulOutcome__value_PR = 4;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_E_RABModifyResponse:
    SuccessfulOutcome__value_PR = 5;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_E_RABReleaseResponse:
    SuccessfulOutcome__value_PR = 6;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_InitialContextSetupResponse:
    SuccessfulOutcome__value_PR = 7;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_HandoverCancelAcknowledge:
    SuccessfulOutcome__value_PR = 8;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_KillResponse:
    SuccessfulOutcome__value_PR = 9;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_ResetAcknowledge:
    SuccessfulOutcome__value_PR = 10;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_S1SetupResponse:
    SuccessfulOutcome__value_PR = 11;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_UEContextModificationResponse:
    SuccessfulOutcome__value_PR = 12;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_UEContextReleaseComplete:
    SuccessfulOutcome__value_PR = 13;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_ENBConfigurationUpdateAcknowledge : SuccessfulOutcome__value_PR = 14 ;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_MMEConfigurationUpdateAcknowledge : SuccessfulOutcome__value_PR = 15 ;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_WriteReplaceWarningResponse:
    SuccessfulOutcome__value_PR = 16;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_UERadioCapabilityMatchResponse:
    SuccessfulOutcome__value_PR = 17;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_E_RABModificationConfirm:
    SuccessfulOutcome__value_PR = 18;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_UEContextModificationConfirm:
    SuccessfulOutcome__value_PR = 19;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_UEContextSuspendResponse:
    SuccessfulOutcome__value_PR = 20;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_UEContextResumeResponse:
    SuccessfulOutcome__value_PR = 21;
pub const SuccessfulOutcome__value_PR_SuccessfulOutcome__value_PR_UERadioCapabilityIDMappingResponse : SuccessfulOutcome__value_PR = 22 ;
pub type SuccessfulOutcome__value_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SuccessfulOutcome {
    pub procedureCode: ProcedureCode_t,
    pub criticality: Criticality_t,
    pub value: SuccessfulOutcome_SuccessfulOutcome__value,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SuccessfulOutcome_SuccessfulOutcome__value {
    pub present: SuccessfulOutcome__value_PR,
    pub choice: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u {
    pub HandoverCommand: HandoverCommand_t,
    pub HandoverRequestAcknowledge: HandoverRequestAcknowledge_t,
    pub PathSwitchRequestAcknowledge: PathSwitchRequestAcknowledge_t,
    pub E_RABSetupResponse: E_RABSetupResponse_t,
    pub E_RABModifyResponse: E_RABModifyResponse_t,
    pub E_RABReleaseResponse: E_RABReleaseResponse_t,
    pub InitialContextSetupResponse: InitialContextSetupResponse_t,
    pub HandoverCancelAcknowledge: HandoverCancelAcknowledge_t,
    pub KillResponse: KillResponse_t,
    pub ResetAcknowledge: ResetAcknowledge_t,
    pub S1SetupResponse: S1SetupResponse_t,
    pub UEContextModificationResponse: UEContextModificationResponse_t,
    pub UEContextReleaseComplete: UEContextReleaseComplete_t,
    pub ENBConfigurationUpdateAcknowledge: ENBConfigurationUpdateAcknowledge_t,
    pub MMEConfigurationUpdateAcknowledge: MMEConfigurationUpdateAcknowledge_t,
    pub WriteReplaceWarningResponse: WriteReplaceWarningResponse_t,
    pub UERadioCapabilityMatchResponse: UERadioCapabilityMatchResponse_t,
    pub E_RABModificationConfirm: E_RABModificationConfirm_t,
    pub UEContextModificationConfirm: UEContextModificationConfirm_t,
    pub UEContextSuspendResponse: UEContextSuspendResponse_t,
    pub UEContextResumeResponse: UEContextResumeResponse_t,
    pub UERadioCapabilityIDMappingResponse: UERadioCapabilityIDMappingResponse_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u"]
        [::std::mem::size_of::<
            SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u,
        >() - 72usize];
    ["Alignment of SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u"]
        [::std::mem::align_of::<
            SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u,
        >() - 8usize];
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::HandoverCommand"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , HandoverCommand) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::HandoverRequestAcknowledge"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , HandoverRequestAcknowledge) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::PathSwitchRequestAcknowledge"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , PathSwitchRequestAcknowledge) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::E_RABSetupResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , E_RABSetupResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::E_RABModifyResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , E_RABModifyResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::E_RABReleaseResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , E_RABReleaseResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::InitialContextSetupResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , InitialContextSetupResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::HandoverCancelAcknowledge"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , HandoverCancelAcknowledge) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::KillResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , KillResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::ResetAcknowledge"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , ResetAcknowledge) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::S1SetupResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , S1SetupResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::UEContextModificationResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , UEContextModificationResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::UEContextReleaseComplete"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , UEContextReleaseComplete) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::ENBConfigurationUpdateAcknowledge"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , ENBConfigurationUpdateAcknowledge) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::MMEConfigurationUpdateAcknowledge"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , MMEConfigurationUpdateAcknowledge) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::WriteReplaceWarningResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , WriteReplaceWarningResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::UERadioCapabilityMatchResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , UERadioCapabilityMatchResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::E_RABModificationConfirm"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , E_RABModificationConfirm) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::UEContextModificationConfirm"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , UEContextModificationConfirm) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::UEContextSuspendResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , UEContextSuspendResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::UEContextResumeResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , UEContextResumeResponse) - 0usize] ;
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u::UERadioCapabilityIDMappingResponse"] [:: std :: mem :: offset_of ! (SuccessfulOutcome_SuccessfulOutcome__value_SuccessfulOutcome__value_u , UERadioCapabilityIDMappingResponse) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SuccessfulOutcome_SuccessfulOutcome__value"]
        [::std::mem::size_of::<SuccessfulOutcome_SuccessfulOutcome__value>() - 104usize];
    ["Alignment of SuccessfulOutcome_SuccessfulOutcome__value"]
        [::std::mem::align_of::<SuccessfulOutcome_SuccessfulOutcome__value>() - 8usize];
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value::present"]
        [::std::mem::offset_of!(SuccessfulOutcome_SuccessfulOutcome__value, present) - 0usize];
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value::choice"]
        [::std::mem::offset_of!(SuccessfulOutcome_SuccessfulOutcome__value, choice) - 8usize];
    ["Offset of field: SuccessfulOutcome_SuccessfulOutcome__value::_asn_ctx"]
        [::std::mem::offset_of!(SuccessfulOutcome_SuccessfulOutcome__value, _asn_ctx) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SuccessfulOutcome"][::std::mem::size_of::<SuccessfulOutcome>() - 144usize];
    ["Alignment of SuccessfulOutcome"][::std::mem::align_of::<SuccessfulOutcome>() - 8usize];
    ["Offset of field: SuccessfulOutcome::procedureCode"]
        [::std::mem::offset_of!(SuccessfulOutcome, procedureCode) - 0usize];
    ["Offset of field: SuccessfulOutcome::criticality"]
        [::std::mem::offset_of!(SuccessfulOutcome, criticality) - 8usize];
    ["Offset of field: SuccessfulOutcome::value"]
        [::std::mem::offset_of!(SuccessfulOutcome, value) - 16usize];
    ["Offset of field: SuccessfulOutcome::_asn_ctx"]
        [::std::mem::offset_of!(SuccessfulOutcome, _asn_ctx) - 120usize];
};
pub type SuccessfulOutcome_t = SuccessfulOutcome;
unsafe extern "C" {
    pub static mut asn_DEF_SuccessfulOutcome: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SuccessfulOutcome_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SuccessfulOutcome_1: [asn_TYPE_member_t; 3usize];
}
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_NOTHING:
    UnsuccessfulOutcome__value_PR = 0;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_HandoverPreparationFailure:
    UnsuccessfulOutcome__value_PR = 1;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_HandoverFailure:
    UnsuccessfulOutcome__value_PR = 2;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_PathSwitchRequestFailure:
    UnsuccessfulOutcome__value_PR = 3;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_InitialContextSetupFailure:
    UnsuccessfulOutcome__value_PR = 4;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_S1SetupFailure:
    UnsuccessfulOutcome__value_PR = 5;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_UEContextModificationFailure : UnsuccessfulOutcome__value_PR = 6 ;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_ENBConfigurationUpdateFailure : UnsuccessfulOutcome__value_PR = 7 ;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_MMEConfigurationUpdateFailure : UnsuccessfulOutcome__value_PR = 8 ;
pub const UnsuccessfulOutcome__value_PR_UnsuccessfulOutcome__value_PR_UEContextResumeFailure:
    UnsuccessfulOutcome__value_PR = 9;
pub type UnsuccessfulOutcome__value_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnsuccessfulOutcome {
    pub procedureCode: ProcedureCode_t,
    pub criticality: Criticality_t,
    pub value: UnsuccessfulOutcome_UnsuccessfulOutcome__value,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UnsuccessfulOutcome_UnsuccessfulOutcome__value {
    pub present: UnsuccessfulOutcome__value_PR,
    pub choice: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u {
    pub HandoverPreparationFailure: HandoverPreparationFailure_t,
    pub HandoverFailure: HandoverFailure_t,
    pub PathSwitchRequestFailure: PathSwitchRequestFailure_t,
    pub InitialContextSetupFailure: InitialContextSetupFailure_t,
    pub S1SetupFailure: S1SetupFailure_t,
    pub UEContextModificationFailure: UEContextModificationFailure_t,
    pub ENBConfigurationUpdateFailure: ENBConfigurationUpdateFailure_t,
    pub MMEConfigurationUpdateFailure: MMEConfigurationUpdateFailure_t,
    pub UEContextResumeFailure: UEContextResumeFailure_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u"]
        [::std::mem::size_of::<
            UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u,
        >() - 72usize];
    ["Alignment of UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u"]
        [::std::mem::align_of::<
            UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u,
        >() - 8usize];
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::HandoverPreparationFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , HandoverPreparationFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::HandoverFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , HandoverFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::PathSwitchRequestFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , PathSwitchRequestFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::InitialContextSetupFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , InitialContextSetupFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::S1SetupFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , S1SetupFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::UEContextModificationFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , UEContextModificationFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::ENBConfigurationUpdateFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , ENBConfigurationUpdateFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::MMEConfigurationUpdateFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , MMEConfigurationUpdateFailure) - 0usize] ;
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u::UEContextResumeFailure"] [:: std :: mem :: offset_of ! (UnsuccessfulOutcome_UnsuccessfulOutcome__value_UnsuccessfulOutcome__value_u , UEContextResumeFailure) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnsuccessfulOutcome_UnsuccessfulOutcome__value"]
        [::std::mem::size_of::<UnsuccessfulOutcome_UnsuccessfulOutcome__value>() - 104usize];
    ["Alignment of UnsuccessfulOutcome_UnsuccessfulOutcome__value"]
        [::std::mem::align_of::<UnsuccessfulOutcome_UnsuccessfulOutcome__value>() - 8usize];
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value::present"]
        [::std::mem::offset_of!(UnsuccessfulOutcome_UnsuccessfulOutcome__value, present) - 0usize];
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value::choice"]
        [::std::mem::offset_of!(UnsuccessfulOutcome_UnsuccessfulOutcome__value, choice) - 8usize];
    ["Offset of field: UnsuccessfulOutcome_UnsuccessfulOutcome__value::_asn_ctx"][::std::mem::offset_of!(
        UnsuccessfulOutcome_UnsuccessfulOutcome__value,
        _asn_ctx
    ) - 80usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UnsuccessfulOutcome"][::std::mem::size_of::<UnsuccessfulOutcome>() - 144usize];
    ["Alignment of UnsuccessfulOutcome"][::std::mem::align_of::<UnsuccessfulOutcome>() - 8usize];
    ["Offset of field: UnsuccessfulOutcome::procedureCode"]
        [::std::mem::offset_of!(UnsuccessfulOutcome, procedureCode) - 0usize];
    ["Offset of field: UnsuccessfulOutcome::criticality"]
        [::std::mem::offset_of!(UnsuccessfulOutcome, criticality) - 8usize];
    ["Offset of field: UnsuccessfulOutcome::value"]
        [::std::mem::offset_of!(UnsuccessfulOutcome, value) - 16usize];
    ["Offset of field: UnsuccessfulOutcome::_asn_ctx"]
        [::std::mem::offset_of!(UnsuccessfulOutcome, _asn_ctx) - 120usize];
};
pub type UnsuccessfulOutcome_t = UnsuccessfulOutcome;
unsafe extern "C" {
    pub static mut asn_DEF_UnsuccessfulOutcome: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UnsuccessfulOutcome_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UnsuccessfulOutcome_1: [asn_TYPE_member_t; 3usize];
}
pub const S1AP_PDU_PR_S1AP_PDU_PR_NOTHING: S1AP_PDU_PR = 0;
pub const S1AP_PDU_PR_S1AP_PDU_PR_initiatingMessage: S1AP_PDU_PR = 1;
pub const S1AP_PDU_PR_S1AP_PDU_PR_successfulOutcome: S1AP_PDU_PR = 2;
pub const S1AP_PDU_PR_S1AP_PDU_PR_unsuccessfulOutcome: S1AP_PDU_PR = 3;
pub type S1AP_PDU_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct S1AP_PDU {
    pub present: S1AP_PDU_PR,
    pub choice: S1AP_PDU_S1AP_PDU_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union S1AP_PDU_S1AP_PDU_u {
    pub initiatingMessage: InitiatingMessage_t,
    pub successfulOutcome: SuccessfulOutcome_t,
    pub unsuccessfulOutcome: UnsuccessfulOutcome_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S1AP_PDU_S1AP_PDU_u"][::std::mem::size_of::<S1AP_PDU_S1AP_PDU_u>() - 144usize];
    ["Alignment of S1AP_PDU_S1AP_PDU_u"][::std::mem::align_of::<S1AP_PDU_S1AP_PDU_u>() - 8usize];
    ["Offset of field: S1AP_PDU_S1AP_PDU_u::initiatingMessage"]
        [::std::mem::offset_of!(S1AP_PDU_S1AP_PDU_u, initiatingMessage) - 0usize];
    ["Offset of field: S1AP_PDU_S1AP_PDU_u::successfulOutcome"]
        [::std::mem::offset_of!(S1AP_PDU_S1AP_PDU_u, successfulOutcome) - 0usize];
    ["Offset of field: S1AP_PDU_S1AP_PDU_u::unsuccessfulOutcome"]
        [::std::mem::offset_of!(S1AP_PDU_S1AP_PDU_u, unsuccessfulOutcome) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S1AP_PDU"][::std::mem::size_of::<S1AP_PDU>() - 176usize];
    ["Alignment of S1AP_PDU"][::std::mem::align_of::<S1AP_PDU>() - 8usize];
    ["Offset of field: S1AP_PDU::present"][::std::mem::offset_of!(S1AP_PDU, present) - 0usize];
    ["Offset of field: S1AP_PDU::choice"][::std::mem::offset_of!(S1AP_PDU, choice) - 8usize];
    ["Offset of field: S1AP_PDU::_asn_ctx"][::std::mem::offset_of!(S1AP_PDU, _asn_ctx) - 152usize];
};
pub type S1AP_PDU_t = S1AP_PDU;
unsafe extern "C" {
    pub static mut asn_DEF_S1AP_PDU: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolIE_SingleContainer {
    _unused: [u8; 0],
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSetupListBearerSUReq {
    pub list: E_RABToBeSetupListBearerSUReq__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSetupListBearerSUReq__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSetupListBearerSUReq__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABToBeSetupListBearerSUReq__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABToBeSetupListBearerSUReq__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABToBeSetupListBearerSUReq__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABToBeSetupListBearerSUReq__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABToBeSetupListBearerSUReq__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABToBeSetupListBearerSUReq__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABToBeSetupListBearerSUReq__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABToBeSetupListBearerSUReq__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABToBeSetupListBearerSUReq__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABToBeSetupListBearerSUReq__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABToBeSetupListBearerSUReq__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSetupListBearerSUReq"]
        [::std::mem::size_of::<E_RABToBeSetupListBearerSUReq>() - 48usize];
    ["Alignment of E_RABToBeSetupListBearerSUReq"]
        [::std::mem::align_of::<E_RABToBeSetupListBearerSUReq>() - 8usize];
    ["Offset of field: E_RABToBeSetupListBearerSUReq::list"]
        [::std::mem::offset_of!(E_RABToBeSetupListBearerSUReq, list) - 0usize];
    ["Offset of field: E_RABToBeSetupListBearerSUReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeSetupListBearerSUReq, _asn_ctx) - 24usize];
};
pub type E_RABToBeSetupListBearerSUReq_t = E_RABToBeSetupListBearerSUReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSetupListBearerSUReq: asn_TYPE_descriptor_t;
}
pub type ProtocolIE_SingleContainer_8146P0_t = ProtocolIE_Field_8149P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolIE_SingleContainer_8146P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProtocolIE_SingleContainer_8146P0_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const PriorityLevel_PriorityLevel_spare: PriorityLevel = 0;
pub const PriorityLevel_PriorityLevel_highest: PriorityLevel = 1;
pub const PriorityLevel_PriorityLevel_lowest: PriorityLevel = 14;
pub const PriorityLevel_PriorityLevel_no_priority: PriorityLevel = 15;
pub type PriorityLevel = ::std::os::raw::c_uint;
pub use self::PriorityLevel as e_PriorityLevel;
pub type PriorityLevel_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PriorityLevel_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PriorityLevel: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PriorityLevel_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PriorityLevel_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PriorityLevel_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PriorityLevel_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MME_Code_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_MME_Code_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_MME_Code: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MME_Code_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MME_Code_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MME_Code_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MME_Code_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Code_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_Code_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Code_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_Code_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Code_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_Code_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_Code_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type M_TMSI_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_M_TMSI_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M_TMSI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn M_TMSI_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M_TMSI_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M_TMSI_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M_TMSI_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M_TMSI_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M_TMSI_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M_TMSI_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M_TMSI_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M_TMSI_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M_TMSI_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M_TMSI_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct S_TMSI {
    pub mMEC: MME_Code_t,
    pub m_TMSI: M_TMSI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of S_TMSI"][::std::mem::size_of::<S_TMSI>() - 112usize];
    ["Alignment of S_TMSI"][::std::mem::align_of::<S_TMSI>() - 8usize];
    ["Offset of field: S_TMSI::mMEC"][::std::mem::offset_of!(S_TMSI, mMEC) - 0usize];
    ["Offset of field: S_TMSI::m_TMSI"][::std::mem::offset_of!(S_TMSI, m_TMSI) - 40usize];
    ["Offset of field: S_TMSI::iE_Extensions"]
        [::std::mem::offset_of!(S_TMSI, iE_Extensions) - 80usize];
    ["Offset of field: S_TMSI::_asn_ctx"][::std::mem::offset_of!(S_TMSI, _asn_ctx) - 88usize];
};
pub type S_TMSI_t = S_TMSI;
unsafe extern "C" {
    pub static mut asn_DEF_S_TMSI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_S_TMSI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_S_TMSI_1: [asn_TYPE_member_t; 3usize];
}
pub type IMSI_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_IMSI_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_IMSI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IMSI_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IMSI_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IMSI_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IMSI_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSI_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IMSI_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSI_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IMSI_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSI_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IMSI_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSI_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const UEPagingID_PR_UEPagingID_PR_NOTHING: UEPagingID_PR = 0;
pub const UEPagingID_PR_UEPagingID_PR_s_TMSI: UEPagingID_PR = 1;
pub const UEPagingID_PR_UEPagingID_PR_iMSI: UEPagingID_PR = 2;
pub type UEPagingID_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UEPagingID {
    pub present: UEPagingID_PR,
    pub choice: UEPagingID_UEPagingID_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union UEPagingID_UEPagingID_u {
    pub s_TMSI: S_TMSI_t,
    pub iMSI: IMSI_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEPagingID_UEPagingID_u"]
        [::std::mem::size_of::<UEPagingID_UEPagingID_u>() - 112usize];
    ["Alignment of UEPagingID_UEPagingID_u"]
        [::std::mem::align_of::<UEPagingID_UEPagingID_u>() - 8usize];
    ["Offset of field: UEPagingID_UEPagingID_u::s_TMSI"]
        [::std::mem::offset_of!(UEPagingID_UEPagingID_u, s_TMSI) - 0usize];
    ["Offset of field: UEPagingID_UEPagingID_u::iMSI"]
        [::std::mem::offset_of!(UEPagingID_UEPagingID_u, iMSI) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEPagingID"][::std::mem::size_of::<UEPagingID>() - 144usize];
    ["Alignment of UEPagingID"][::std::mem::align_of::<UEPagingID>() - 8usize];
    ["Offset of field: UEPagingID::present"][::std::mem::offset_of!(UEPagingID, present) - 0usize];
    ["Offset of field: UEPagingID::choice"][::std::mem::offset_of!(UEPagingID, choice) - 8usize];
    ["Offset of field: UEPagingID::_asn_ctx"]
        [::std::mem::offset_of!(UEPagingID, _asn_ctx) - 120usize];
};
pub type UEPagingID_t = UEPagingID;
unsafe extern "C" {
    pub static mut asn_DEF_UEPagingID: asn_TYPE_descriptor_t;
}
pub const EDT_Session_EDT_Session_true: EDT_Session = 0;
pub type EDT_Session = ::std::os::raw::c_uint;
pub use self::EDT_Session as e_EDT_Session;
pub type EDT_Session_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_EDT_Session: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EDT_Session_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EDT_Session_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EDT_Session_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EDT_Session_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EDT_Session_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EDT_Session_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EDT_Session_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EDT_Session_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EDT_Session_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EDT_Session_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EDT_Session_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecommendedENBList {
    pub list: RecommendedENBList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecommendedENBList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedENBList__bindgen_ty_1"]
        [::std::mem::size_of::<RecommendedENBList__bindgen_ty_1>() - 24usize];
    ["Alignment of RecommendedENBList__bindgen_ty_1"]
        [::std::mem::align_of::<RecommendedENBList__bindgen_ty_1>() - 8usize];
    ["Offset of field: RecommendedENBList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(RecommendedENBList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: RecommendedENBList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(RecommendedENBList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: RecommendedENBList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(RecommendedENBList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: RecommendedENBList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(RecommendedENBList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedENBList"][::std::mem::size_of::<RecommendedENBList>() - 48usize];
    ["Alignment of RecommendedENBList"][::std::mem::align_of::<RecommendedENBList>() - 8usize];
    ["Offset of field: RecommendedENBList::list"]
        [::std::mem::offset_of!(RecommendedENBList, list) - 0usize];
    ["Offset of field: RecommendedENBList::_asn_ctx"]
        [::std::mem::offset_of!(RecommendedENBList, _asn_ctx) - 24usize];
};
pub type RecommendedENBList_t = RecommendedENBList;
unsafe extern "C" {
    pub static mut asn_DEF_RecommendedENBList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RecommendedENBList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RecommendedENBList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_RecommendedENBList_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompletedCellinTAI {
    pub list: CompletedCellinTAI__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompletedCellinTAI__bindgen_ty_1 {
    pub array: *mut *mut CompletedCellinTAI_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CompletedCellinTAI_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompletedCellinTAI__bindgen_ty_1"]
        [::std::mem::size_of::<CompletedCellinTAI__bindgen_ty_1>() - 24usize];
    ["Alignment of CompletedCellinTAI__bindgen_ty_1"]
        [::std::mem::align_of::<CompletedCellinTAI__bindgen_ty_1>() - 8usize];
    ["Offset of field: CompletedCellinTAI__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CompletedCellinTAI__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CompletedCellinTAI__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CompletedCellinTAI__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CompletedCellinTAI__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CompletedCellinTAI__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CompletedCellinTAI__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CompletedCellinTAI__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompletedCellinTAI"][::std::mem::size_of::<CompletedCellinTAI>() - 48usize];
    ["Alignment of CompletedCellinTAI"][::std::mem::align_of::<CompletedCellinTAI>() - 8usize];
    ["Offset of field: CompletedCellinTAI::list"]
        [::std::mem::offset_of!(CompletedCellinTAI, list) - 0usize];
    ["Offset of field: CompletedCellinTAI::_asn_ctx"]
        [::std::mem::offset_of!(CompletedCellinTAI, _asn_ctx) - 24usize];
};
pub type CompletedCellinTAI_t = CompletedCellinTAI;
unsafe extern "C" {
    pub static mut asn_DEF_CompletedCellinTAI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CompletedCellinTAI_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CompletedCellinTAI_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CompletedCellinTAI_constr_1: asn_per_constraints_t;
}
pub type CellIdentity_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_CellIdentity_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CellIdentity: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CellIdentity_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CellIdentity_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CellIdentity_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CellIdentity_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellIdentity_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CellIdentity_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellIdentity_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CellIdentity_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellIdentity_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CellIdentity_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellIdentity_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EUTRAN_CGI {
    pub pLMNidentity: PLMNidentity_t,
    pub cell_ID: CellIdentity_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EUTRAN_CGI"][::std::mem::size_of::<EUTRAN_CGI>() - 120usize];
    ["Alignment of EUTRAN_CGI"][::std::mem::align_of::<EUTRAN_CGI>() - 8usize];
    ["Offset of field: EUTRAN_CGI::pLMNidentity"]
        [::std::mem::offset_of!(EUTRAN_CGI, pLMNidentity) - 0usize];
    ["Offset of field: EUTRAN_CGI::cell_ID"][::std::mem::offset_of!(EUTRAN_CGI, cell_ID) - 40usize];
    ["Offset of field: EUTRAN_CGI::iE_Extensions"]
        [::std::mem::offset_of!(EUTRAN_CGI, iE_Extensions) - 88usize];
    ["Offset of field: EUTRAN_CGI::_asn_ctx"]
        [::std::mem::offset_of!(EUTRAN_CGI, _asn_ctx) - 96usize];
};
pub type EUTRAN_CGI_t = EUTRAN_CGI;
unsafe extern "C" {
    pub static mut asn_DEF_EUTRAN_CGI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EUTRAN_CGI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EUTRAN_CGI_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompletedCellinTAI_Item {
    pub eCGI: EUTRAN_CGI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompletedCellinTAI_Item"]
        [::std::mem::size_of::<CompletedCellinTAI_Item>() - 152usize];
    ["Alignment of CompletedCellinTAI_Item"]
        [::std::mem::align_of::<CompletedCellinTAI_Item>() - 8usize];
    ["Offset of field: CompletedCellinTAI_Item::eCGI"]
        [::std::mem::offset_of!(CompletedCellinTAI_Item, eCGI) - 0usize];
    ["Offset of field: CompletedCellinTAI_Item::iE_Extensions"]
        [::std::mem::offset_of!(CompletedCellinTAI_Item, iE_Extensions) - 120usize];
    ["Offset of field: CompletedCellinTAI_Item::_asn_ctx"]
        [::std::mem::offset_of!(CompletedCellinTAI_Item, _asn_ctx) - 128usize];
};
pub type CompletedCellinTAI_Item_t = CompletedCellinTAI_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CompletedCellinTAI_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CompletedCellinTAI_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CompletedCellinTAI_Item_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolIE_ContainerList_8180P0 {
    pub list: ProtocolIE_ContainerList_8180P0__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProtocolIE_ContainerList_8180P0__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolIE_ContainerList_8180P0__bindgen_ty_1"]
        [::std::mem::size_of::<ProtocolIE_ContainerList_8180P0__bindgen_ty_1>() - 24usize];
    ["Alignment of ProtocolIE_ContainerList_8180P0__bindgen_ty_1"]
        [::std::mem::align_of::<ProtocolIE_ContainerList_8180P0__bindgen_ty_1>() - 8usize];
    ["Offset of field: ProtocolIE_ContainerList_8180P0__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ProtocolIE_ContainerList_8180P0__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ProtocolIE_ContainerList_8180P0__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ProtocolIE_ContainerList_8180P0__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ProtocolIE_ContainerList_8180P0__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ProtocolIE_ContainerList_8180P0__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ProtocolIE_ContainerList_8180P0__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ProtocolIE_ContainerList_8180P0__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProtocolIE_ContainerList_8180P0"]
        [::std::mem::size_of::<ProtocolIE_ContainerList_8180P0>() - 48usize];
    ["Alignment of ProtocolIE_ContainerList_8180P0"]
        [::std::mem::align_of::<ProtocolIE_ContainerList_8180P0>() - 8usize];
    ["Offset of field: ProtocolIE_ContainerList_8180P0::list"]
        [::std::mem::offset_of!(ProtocolIE_ContainerList_8180P0, list) - 0usize];
    ["Offset of field: ProtocolIE_ContainerList_8180P0::_asn_ctx"]
        [::std::mem::offset_of!(ProtocolIE_ContainerList_8180P0, _asn_ctx) - 24usize];
};
pub type ProtocolIE_ContainerList_8180P0_t = ProtocolIE_ContainerList_8180P0;
unsafe extern "C" {
    pub static mut asn_DEF_ProtocolIE_ContainerList_8180P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ProtocolIE_ContainerList_8180P0_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ProtocolIE_ContainerList_8180P0_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ProtocolIE_ContainerList_8180P0_constr_1: asn_per_constraints_t;
}
pub type E_RAB_IE_ContainerList_1280P0_t = ProtocolIE_ContainerList_8180P0_t;
unsafe extern "C" {
    pub static mut asn_PER_type_E_RAB_IE_ContainerList_1280P0_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_E_RAB_IE_ContainerList_1280P0: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RAB_IE_ContainerList_1280P0_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABAdmittedList_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABAdmittedList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABAdmittedList_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const IAB_Supported_IAB_Supported_true: IAB_Supported = 0;
pub type IAB_Supported = ::std::os::raw::c_uint;
pub use self::IAB_Supported as e_IAB_Supported;
pub type IAB_Supported_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_IAB_Supported: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IAB_Supported_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IAB_Supported_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IAB_Supported_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Supported_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const LoggingInterval_LoggingInterval_ms128: LoggingInterval = 0;
pub const LoggingInterval_LoggingInterval_ms256: LoggingInterval = 1;
pub const LoggingInterval_LoggingInterval_ms512: LoggingInterval = 2;
pub const LoggingInterval_LoggingInterval_ms1024: LoggingInterval = 3;
pub const LoggingInterval_LoggingInterval_ms2048: LoggingInterval = 4;
pub const LoggingInterval_LoggingInterval_ms3072: LoggingInterval = 5;
pub const LoggingInterval_LoggingInterval_ms4096: LoggingInterval = 6;
pub const LoggingInterval_LoggingInterval_ms6144: LoggingInterval = 7;
pub type LoggingInterval = ::std::os::raw::c_uint;
pub use self::LoggingInterval as e_LoggingInterval;
pub type LoggingInterval_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_LoggingInterval_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_LoggingInterval: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_LoggingInterval_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LoggingInterval_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LoggingInterval_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LoggingInterval_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingInterval_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const LoggingDuration_LoggingDuration_m10: LoggingDuration = 0;
pub const LoggingDuration_LoggingDuration_m20: LoggingDuration = 1;
pub const LoggingDuration_LoggingDuration_m40: LoggingDuration = 2;
pub const LoggingDuration_LoggingDuration_m60: LoggingDuration = 3;
pub const LoggingDuration_LoggingDuration_m90: LoggingDuration = 4;
pub const LoggingDuration_LoggingDuration_m120: LoggingDuration = 5;
pub type LoggingDuration = ::std::os::raw::c_uint;
pub use self::LoggingDuration as e_LoggingDuration;
pub type LoggingDuration_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_LoggingDuration_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_LoggingDuration: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_LoggingDuration_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LoggingDuration_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LoggingDuration_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LoggingDuration_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LoggingDuration_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LoggedMDT {
    pub loggingInterval: LoggingInterval_t,
    pub loggingDuration: LoggingDuration_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LoggedMDT"][::std::mem::size_of::<LoggedMDT>() - 48usize];
    ["Alignment of LoggedMDT"][::std::mem::align_of::<LoggedMDT>() - 8usize];
    ["Offset of field: LoggedMDT::loggingInterval"]
        [::std::mem::offset_of!(LoggedMDT, loggingInterval) - 0usize];
    ["Offset of field: LoggedMDT::loggingDuration"]
        [::std::mem::offset_of!(LoggedMDT, loggingDuration) - 8usize];
    ["Offset of field: LoggedMDT::iE_Extensions"]
        [::std::mem::offset_of!(LoggedMDT, iE_Extensions) - 16usize];
    ["Offset of field: LoggedMDT::_asn_ctx"][::std::mem::offset_of!(LoggedMDT, _asn_ctx) - 24usize];
};
pub type LoggedMDT_t = LoggedMDT;
unsafe extern "C" {
    pub static mut asn_DEF_LoggedMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LoggedMDT_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LoggedMDT_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABUsageReportItem {
    pub startTimestamp: OCTET_STRING_t,
    pub endTimestamp: OCTET_STRING_t,
    pub usageCountUL: INTEGER_t,
    pub usageCountDL: INTEGER_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABUsageReportItem"][::std::mem::size_of::<E_RABUsageReportItem>() - 144usize];
    ["Alignment of E_RABUsageReportItem"][::std::mem::align_of::<E_RABUsageReportItem>() - 8usize];
    ["Offset of field: E_RABUsageReportItem::startTimestamp"]
        [::std::mem::offset_of!(E_RABUsageReportItem, startTimestamp) - 0usize];
    ["Offset of field: E_RABUsageReportItem::endTimestamp"]
        [::std::mem::offset_of!(E_RABUsageReportItem, endTimestamp) - 40usize];
    ["Offset of field: E_RABUsageReportItem::usageCountUL"]
        [::std::mem::offset_of!(E_RABUsageReportItem, usageCountUL) - 80usize];
    ["Offset of field: E_RABUsageReportItem::usageCountDL"]
        [::std::mem::offset_of!(E_RABUsageReportItem, usageCountDL) - 96usize];
    ["Offset of field: E_RABUsageReportItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABUsageReportItem, iE_Extensions) - 112usize];
    ["Offset of field: E_RABUsageReportItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABUsageReportItem, _asn_ctx) - 120usize];
};
pub type E_RABUsageReportItem_t = E_RABUsageReportItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABUsageReportItem: asn_TYPE_descriptor_t;
}
pub const IAB_Authorized_IAB_Authorized_authorized: IAB_Authorized = 0;
pub const IAB_Authorized_IAB_Authorized_not_authorized: IAB_Authorized = 1;
pub type IAB_Authorized = ::std::os::raw::c_uint;
pub use self::IAB_Authorized as e_IAB_Authorized;
pub type IAB_Authorized_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_IAB_Authorized: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IAB_Authorized_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IAB_Authorized_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IAB_Authorized_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Authorized_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SecondaryRATType_SecondaryRATType_nR: SecondaryRATType = 0;
pub const SecondaryRATType_SecondaryRATType_unlicensed: SecondaryRATType = 1;
pub type SecondaryRATType = ::std::os::raw::c_uint;
pub use self::SecondaryRATType as e_SecondaryRATType;
pub type SecondaryRATType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_SecondaryRATType_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_SecondaryRATType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_SecondaryRATType_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SecondaryRATType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SecondaryRATType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SecondaryRATType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABUsageReportList {
    pub list: E_RABUsageReportList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABUsageReportList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABUsageReportList__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABUsageReportList__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABUsageReportList__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABUsageReportList__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABUsageReportList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABUsageReportList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABUsageReportList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABUsageReportList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABUsageReportList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABUsageReportList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABUsageReportList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABUsageReportList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABUsageReportList"][::std::mem::size_of::<E_RABUsageReportList>() - 48usize];
    ["Alignment of E_RABUsageReportList"][::std::mem::align_of::<E_RABUsageReportList>() - 8usize];
    ["Offset of field: E_RABUsageReportList::list"]
        [::std::mem::offset_of!(E_RABUsageReportList, list) - 0usize];
    ["Offset of field: E_RABUsageReportList::_asn_ctx"]
        [::std::mem::offset_of!(E_RABUsageReportList, _asn_ctx) - 24usize];
};
pub type E_RABUsageReportList_t = E_RABUsageReportList;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABUsageReportList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABUsageReportList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABUsageReportList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_E_RABUsageReportList_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecondaryRATDataUsageReportItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub secondaryRATType: SecondaryRATType_t,
    pub e_RABUsageReportList: E_RABUsageReportList_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecondaryRATDataUsageReportItem"]
        [::std::mem::size_of::<SecondaryRATDataUsageReportItem>() - 96usize];
    ["Alignment of SecondaryRATDataUsageReportItem"]
        [::std::mem::align_of::<SecondaryRATDataUsageReportItem>() - 8usize];
    ["Offset of field: SecondaryRATDataUsageReportItem::e_RAB_ID"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportItem, e_RAB_ID) - 0usize];
    ["Offset of field: SecondaryRATDataUsageReportItem::secondaryRATType"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportItem, secondaryRATType) - 8usize];
    ["Offset of field: SecondaryRATDataUsageReportItem::e_RABUsageReportList"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportItem, e_RABUsageReportList) - 16usize];
    ["Offset of field: SecondaryRATDataUsageReportItem::iE_Extensions"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportItem, iE_Extensions) - 64usize];
    ["Offset of field: SecondaryRATDataUsageReportItem::_asn_ctx"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportItem, _asn_ctx) - 72usize];
};
pub type SecondaryRATDataUsageReportItem_t = SecondaryRATDataUsageReportItem;
unsafe extern "C" {
    pub static mut asn_DEF_SecondaryRATDataUsageReportItem: asn_TYPE_descriptor_t;
}
pub type PrintableString_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_PrintableString: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_PrintableString: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn PrintableString_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type MMEname_t = PrintableString_t;
unsafe extern "C" {
    pub static mut asn_DEF_MMEname: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MMEname_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MMEname_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MMEname_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MMEname_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMEname_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MMEname_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMEname_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MMEname_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMEname_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MMEname_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMEname_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SensorMeasConfig_SensorMeasConfig_setup: SensorMeasConfig = 0;
pub type SensorMeasConfig = ::std::os::raw::c_uint;
pub use self::SensorMeasConfig as e_SensorMeasConfig;
pub type SensorMeasConfig_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_SensorMeasConfig_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_SensorMeasConfig: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_SensorMeasConfig_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SensorMeasConfig_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SensorMeasConfig_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorMeasurementConfiguration {
    pub sensorMeasConfig: SensorMeasConfig_t,
    pub sensorMeasConfigNameList: *mut SensorMeasConfigNameList,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SensorMeasurementConfiguration"]
        [::std::mem::size_of::<SensorMeasurementConfiguration>() - 48usize];
    ["Alignment of SensorMeasurementConfiguration"]
        [::std::mem::align_of::<SensorMeasurementConfiguration>() - 8usize];
    ["Offset of field: SensorMeasurementConfiguration::sensorMeasConfig"]
        [::std::mem::offset_of!(SensorMeasurementConfiguration, sensorMeasConfig) - 0usize];
    ["Offset of field: SensorMeasurementConfiguration::sensorMeasConfigNameList"]
        [::std::mem::offset_of!(SensorMeasurementConfiguration, sensorMeasConfigNameList) - 8usize];
    ["Offset of field: SensorMeasurementConfiguration::iE_Extensions"]
        [::std::mem::offset_of!(SensorMeasurementConfiguration, iE_Extensions) - 16usize];
    ["Offset of field: SensorMeasurementConfiguration::_asn_ctx"]
        [::std::mem::offset_of!(SensorMeasurementConfiguration, _asn_ctx) - 24usize];
};
pub type SensorMeasurementConfiguration_t = SensorMeasurementConfiguration;
unsafe extern "C" {
    pub static mut asn_DEF_SensorMeasurementConfiguration: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorMeasConfigNameList {
    pub list: SensorMeasConfigNameList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SensorMeasConfigNameList__bindgen_ty_1 {
    pub array: *mut *mut SensorMeasConfigNameItem,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut SensorMeasConfigNameItem)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SensorMeasConfigNameList__bindgen_ty_1"]
        [::std::mem::size_of::<SensorMeasConfigNameList__bindgen_ty_1>() - 24usize];
    ["Alignment of SensorMeasConfigNameList__bindgen_ty_1"]
        [::std::mem::align_of::<SensorMeasConfigNameList__bindgen_ty_1>() - 8usize];
    ["Offset of field: SensorMeasConfigNameList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(SensorMeasConfigNameList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: SensorMeasConfigNameList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(SensorMeasConfigNameList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: SensorMeasConfigNameList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(SensorMeasConfigNameList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: SensorMeasConfigNameList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(SensorMeasConfigNameList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SensorMeasConfigNameList"]
        [::std::mem::size_of::<SensorMeasConfigNameList>() - 48usize];
    ["Alignment of SensorMeasConfigNameList"]
        [::std::mem::align_of::<SensorMeasConfigNameList>() - 8usize];
    ["Offset of field: SensorMeasConfigNameList::list"]
        [::std::mem::offset_of!(SensorMeasConfigNameList, list) - 0usize];
    ["Offset of field: SensorMeasConfigNameList::_asn_ctx"]
        [::std::mem::offset_of!(SensorMeasConfigNameList, _asn_ctx) - 24usize];
};
pub type SensorMeasConfigNameList_t = SensorMeasConfigNameList;
unsafe extern "C" {
    pub static mut asn_DEF_SensorMeasConfigNameList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SensorMeasConfigNameList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SensorMeasConfigNameList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_SensorMeasConfigNameList_constr_1: asn_per_constraints_t;
}
pub const SensorNameConfig_PR_SensorNameConfig_PR_NOTHING: SensorNameConfig_PR = 0;
pub const SensorNameConfig_PR_SensorNameConfig_PR_uncompensatedBarometricConfig:
    SensorNameConfig_PR = 1;
pub const SensorNameConfig_PR_SensorNameConfig_PR_choice_Extensions: SensorNameConfig_PR = 2;
pub type SensorNameConfig_PR = ::std::os::raw::c_uint;
pub const SensorNameConfig__uncompensatedBarometricConfig_SensorNameConfig__uncompensatedBarometricConfig_true : SensorNameConfig__uncompensatedBarometricConfig = 0 ;
pub type SensorNameConfig__uncompensatedBarometricConfig = ::std::os::raw::c_uint;
pub use self::SensorNameConfig__uncompensatedBarometricConfig as e_SensorNameConfig__uncompensatedBarometricConfig;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SensorNameConfig {
    pub present: SensorNameConfig_PR,
    pub choice: SensorNameConfig_SensorNameConfig_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SensorNameConfig_SensorNameConfig_u {
    pub uncompensatedBarometricConfig: ::std::os::raw::c_long,
    pub choice_Extensions: ProtocolIE_SingleContainer_8146P0_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SensorNameConfig_SensorNameConfig_u"]
        [::std::mem::size_of::<SensorNameConfig_SensorNameConfig_u>() - 72usize];
    ["Alignment of SensorNameConfig_SensorNameConfig_u"]
        [::std::mem::align_of::<SensorNameConfig_SensorNameConfig_u>() - 8usize];
    ["Offset of field: SensorNameConfig_SensorNameConfig_u::uncompensatedBarometricConfig"][::std::mem::offset_of!(
        SensorNameConfig_SensorNameConfig_u,
        uncompensatedBarometricConfig
    )
        - 0usize];
    ["Offset of field: SensorNameConfig_SensorNameConfig_u::choice_Extensions"]
        [::std::mem::offset_of!(SensorNameConfig_SensorNameConfig_u, choice_Extensions) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SensorNameConfig"][::std::mem::size_of::<SensorNameConfig>() - 104usize];
    ["Alignment of SensorNameConfig"][::std::mem::align_of::<SensorNameConfig>() - 8usize];
    ["Offset of field: SensorNameConfig::present"]
        [::std::mem::offset_of!(SensorNameConfig, present) - 0usize];
    ["Offset of field: SensorNameConfig::choice"]
        [::std::mem::offset_of!(SensorNameConfig, choice) - 8usize];
    ["Offset of field: SensorNameConfig::_asn_ctx"]
        [::std::mem::offset_of!(SensorNameConfig, _asn_ctx) - 80usize];
};
pub type SensorNameConfig_t = SensorNameConfig;
unsafe extern "C" {
    pub static mut asn_DEF_SensorNameConfig: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SensorNameConfig_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SensorNameConfig_1: [asn_TYPE_member_t; 2usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_SensorNameConfig_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SensorMeasConfigNameItem {
    pub sensorNameConfig: SensorNameConfig_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SensorMeasConfigNameItem"]
        [::std::mem::size_of::<SensorMeasConfigNameItem>() - 136usize];
    ["Alignment of SensorMeasConfigNameItem"]
        [::std::mem::align_of::<SensorMeasConfigNameItem>() - 8usize];
    ["Offset of field: SensorMeasConfigNameItem::sensorNameConfig"]
        [::std::mem::offset_of!(SensorMeasConfigNameItem, sensorNameConfig) - 0usize];
    ["Offset of field: SensorMeasConfigNameItem::iE_Extensions"]
        [::std::mem::offset_of!(SensorMeasConfigNameItem, iE_Extensions) - 104usize];
    ["Offset of field: SensorMeasConfigNameItem::_asn_ctx"]
        [::std::mem::offset_of!(SensorMeasConfigNameItem, _asn_ctx) - 112usize];
};
pub type SensorMeasConfigNameItem_t = SensorMeasConfigNameItem;
unsafe extern "C" {
    pub static mut asn_DEF_SensorMeasConfigNameItem: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SensorMeasConfigNameItem_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SensorMeasConfigNameItem_1: [asn_TYPE_member_t; 2usize];
}
pub const ProSeDirectCommunication_ProSeDirectCommunication_authorized: ProSeDirectCommunication =
    0;
pub const ProSeDirectCommunication_ProSeDirectCommunication_not_authorized:
    ProSeDirectCommunication = 1;
pub type ProSeDirectCommunication = ::std::os::raw::c_uint;
pub use self::ProSeDirectCommunication as e_ProSeDirectCommunication;
pub type ProSeDirectCommunication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ProSeDirectCommunication_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ProSeDirectCommunication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ProSeDirectCommunication_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectCommunication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecommendedENBsForPaging {
    pub recommendedENBList: RecommendedENBList_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedENBsForPaging"]
        [::std::mem::size_of::<RecommendedENBsForPaging>() - 80usize];
    ["Alignment of RecommendedENBsForPaging"]
        [::std::mem::align_of::<RecommendedENBsForPaging>() - 8usize];
    ["Offset of field: RecommendedENBsForPaging::recommendedENBList"]
        [::std::mem::offset_of!(RecommendedENBsForPaging, recommendedENBList) - 0usize];
    ["Offset of field: RecommendedENBsForPaging::iE_Extensions"]
        [::std::mem::offset_of!(RecommendedENBsForPaging, iE_Extensions) - 48usize];
    ["Offset of field: RecommendedENBsForPaging::_asn_ctx"]
        [::std::mem::offset_of!(RecommendedENBsForPaging, _asn_ctx) - 56usize];
};
pub type RecommendedENBsForPaging_t = RecommendedENBsForPaging;
unsafe extern "C" {
    pub static mut asn_DEF_RecommendedENBsForPaging: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RecommendedENBsForPaging_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RecommendedENBsForPaging_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeModifiedListBearerModReq {
    pub list: E_RABToBeModifiedListBearerModReq__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeModifiedListBearerModReq__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeModifiedListBearerModReq__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABToBeModifiedListBearerModReq__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABToBeModifiedListBearerModReq__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABToBeModifiedListBearerModReq__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABToBeModifiedListBearerModReq__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABToBeModifiedListBearerModReq__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABToBeModifiedListBearerModReq__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABToBeModifiedListBearerModReq__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABToBeModifiedListBearerModReq__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABToBeModifiedListBearerModReq__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABToBeModifiedListBearerModReq__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABToBeModifiedListBearerModReq__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeModifiedListBearerModReq"]
        [::std::mem::size_of::<E_RABToBeModifiedListBearerModReq>() - 48usize];
    ["Alignment of E_RABToBeModifiedListBearerModReq"]
        [::std::mem::align_of::<E_RABToBeModifiedListBearerModReq>() - 8usize];
    ["Offset of field: E_RABToBeModifiedListBearerModReq::list"]
        [::std::mem::offset_of!(E_RABToBeModifiedListBearerModReq, list) - 0usize];
    ["Offset of field: E_RABToBeModifiedListBearerModReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeModifiedListBearerModReq, _asn_ctx) - 24usize];
};
pub type E_RABToBeModifiedListBearerModReq_t = E_RABToBeModifiedListBearerModReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeModifiedListBearerModReq: asn_TYPE_descriptor_t;
}
pub const ENB_ID_PR_ENB_ID_PR_NOTHING: ENB_ID_PR = 0;
pub const ENB_ID_PR_ENB_ID_PR_macroENB_ID: ENB_ID_PR = 1;
pub const ENB_ID_PR_ENB_ID_PR_homeENB_ID: ENB_ID_PR = 2;
pub const ENB_ID_PR_ENB_ID_PR_short_macroENB_ID: ENB_ID_PR = 3;
pub const ENB_ID_PR_ENB_ID_PR_long_macroENB_ID: ENB_ID_PR = 4;
pub type ENB_ID_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ENB_ID {
    pub present: ENB_ID_PR,
    pub choice: ENB_ID_ENB_ID_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ENB_ID_ENB_ID_u {
    pub macroENB_ID: BIT_STRING_t,
    pub homeENB_ID: BIT_STRING_t,
    pub short_macroENB_ID: BIT_STRING_t,
    pub long_macroENB_ID: BIT_STRING_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENB_ID_ENB_ID_u"][::std::mem::size_of::<ENB_ID_ENB_ID_u>() - 48usize];
    ["Alignment of ENB_ID_ENB_ID_u"][::std::mem::align_of::<ENB_ID_ENB_ID_u>() - 8usize];
    ["Offset of field: ENB_ID_ENB_ID_u::macroENB_ID"]
        [::std::mem::offset_of!(ENB_ID_ENB_ID_u, macroENB_ID) - 0usize];
    ["Offset of field: ENB_ID_ENB_ID_u::homeENB_ID"]
        [::std::mem::offset_of!(ENB_ID_ENB_ID_u, homeENB_ID) - 0usize];
    ["Offset of field: ENB_ID_ENB_ID_u::short_macroENB_ID"]
        [::std::mem::offset_of!(ENB_ID_ENB_ID_u, short_macroENB_ID) - 0usize];
    ["Offset of field: ENB_ID_ENB_ID_u::long_macroENB_ID"]
        [::std::mem::offset_of!(ENB_ID_ENB_ID_u, long_macroENB_ID) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENB_ID"][::std::mem::size_of::<ENB_ID>() - 80usize];
    ["Alignment of ENB_ID"][::std::mem::align_of::<ENB_ID>() - 8usize];
    ["Offset of field: ENB_ID::present"][::std::mem::offset_of!(ENB_ID, present) - 0usize];
    ["Offset of field: ENB_ID::choice"][::std::mem::offset_of!(ENB_ID, choice) - 8usize];
    ["Offset of field: ENB_ID::_asn_ctx"][::std::mem::offset_of!(ENB_ID, _asn_ctx) - 56usize];
};
pub type ENB_ID_t = ENB_ID;
unsafe extern "C" {
    pub static mut asn_DEF_ENB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENB_ID_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENB_ID_1: [asn_TYPE_member_t; 4usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ENB_ID_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Global_ENB_ID {
    pub pLMNidentity: PLMNidentity_t,
    pub eNB_ID: ENB_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Global_ENB_ID"][::std::mem::size_of::<Global_ENB_ID>() - 152usize];
    ["Alignment of Global_ENB_ID"][::std::mem::align_of::<Global_ENB_ID>() - 8usize];
    ["Offset of field: Global_ENB_ID::pLMNidentity"]
        [::std::mem::offset_of!(Global_ENB_ID, pLMNidentity) - 0usize];
    ["Offset of field: Global_ENB_ID::eNB_ID"]
        [::std::mem::offset_of!(Global_ENB_ID, eNB_ID) - 40usize];
    ["Offset of field: Global_ENB_ID::iE_Extensions"]
        [::std::mem::offset_of!(Global_ENB_ID, iE_Extensions) - 120usize];
    ["Offset of field: Global_ENB_ID::_asn_ctx"]
        [::std::mem::offset_of!(Global_ENB_ID, _asn_ctx) - 128usize];
};
pub type Global_ENB_ID_t = Global_ENB_ID;
unsafe extern "C" {
    pub static mut asn_DEF_Global_ENB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Global_ENB_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Global_ENB_ID_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAI {
    pub pLMNidentity: PLMNidentity_t,
    pub tAC: TAC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAI"][::std::mem::size_of::<TAI>() - 112usize];
    ["Alignment of TAI"][::std::mem::align_of::<TAI>() - 8usize];
    ["Offset of field: TAI::pLMNidentity"][::std::mem::offset_of!(TAI, pLMNidentity) - 0usize];
    ["Offset of field: TAI::tAC"][::std::mem::offset_of!(TAI, tAC) - 40usize];
    ["Offset of field: TAI::iE_Extensions"][::std::mem::offset_of!(TAI, iE_Extensions) - 80usize];
    ["Offset of field: TAI::_asn_ctx"][::std::mem::offset_of!(TAI, _asn_ctx) - 88usize];
};
pub type TAI_t = TAI;
unsafe extern "C" {
    pub static mut asn_DEF_TAI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAI_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EN_DCSONeNBIdentification {
    pub globaleNBID: Global_ENB_ID_t,
    pub selectedTAI: TAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EN_DCSONeNBIdentification"]
        [::std::mem::size_of::<EN_DCSONeNBIdentification>() - 296usize];
    ["Alignment of EN_DCSONeNBIdentification"]
        [::std::mem::align_of::<EN_DCSONeNBIdentification>() - 8usize];
    ["Offset of field: EN_DCSONeNBIdentification::globaleNBID"]
        [::std::mem::offset_of!(EN_DCSONeNBIdentification, globaleNBID) - 0usize];
    ["Offset of field: EN_DCSONeNBIdentification::selectedTAI"]
        [::std::mem::offset_of!(EN_DCSONeNBIdentification, selectedTAI) - 152usize];
    ["Offset of field: EN_DCSONeNBIdentification::iE_Extensions"]
        [::std::mem::offset_of!(EN_DCSONeNBIdentification, iE_Extensions) - 264usize];
    ["Offset of field: EN_DCSONeNBIdentification::_asn_ctx"]
        [::std::mem::offset_of!(EN_DCSONeNBIdentification, _asn_ctx) - 272usize];
};
pub type EN_DCSONeNBIdentification_t = EN_DCSONeNBIdentification;
unsafe extern "C" {
    pub static mut asn_DEF_EN_DCSONeNBIdentification: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EN_DCSONeNBIdentification_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EN_DCSONeNBIdentification_1: [asn_TYPE_member_t; 3usize];
}
pub type En_gNB_ID_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_En_gNB_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_En_gNB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn En_gNB_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn En_gNB_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn En_gNB_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn En_gNB_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Global_en_gNB_ID {
    pub pLMNidentity: PLMNidentity_t,
    pub en_gNB_ID: En_gNB_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Global_en_gNB_ID"][::std::mem::size_of::<Global_en_gNB_ID>() - 120usize];
    ["Alignment of Global_en_gNB_ID"][::std::mem::align_of::<Global_en_gNB_ID>() - 8usize];
    ["Offset of field: Global_en_gNB_ID::pLMNidentity"]
        [::std::mem::offset_of!(Global_en_gNB_ID, pLMNidentity) - 0usize];
    ["Offset of field: Global_en_gNB_ID::en_gNB_ID"]
        [::std::mem::offset_of!(Global_en_gNB_ID, en_gNB_ID) - 40usize];
    ["Offset of field: Global_en_gNB_ID::iE_Extensions"]
        [::std::mem::offset_of!(Global_en_gNB_ID, iE_Extensions) - 88usize];
    ["Offset of field: Global_en_gNB_ID::_asn_ctx"]
        [::std::mem::offset_of!(Global_en_gNB_ID, _asn_ctx) - 96usize];
};
pub type Global_en_gNB_ID_t = Global_en_gNB_ID;
unsafe extern "C" {
    pub static mut asn_DEF_Global_en_gNB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Global_en_gNB_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Global_en_gNB_ID_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EN_DCSONengNBIdentification {
    pub globalengNBID: Global_en_gNB_ID_t,
    pub selectedTAI: TAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EN_DCSONengNBIdentification"]
        [::std::mem::size_of::<EN_DCSONengNBIdentification>() - 264usize];
    ["Alignment of EN_DCSONengNBIdentification"]
        [::std::mem::align_of::<EN_DCSONengNBIdentification>() - 8usize];
    ["Offset of field: EN_DCSONengNBIdentification::globalengNBID"]
        [::std::mem::offset_of!(EN_DCSONengNBIdentification, globalengNBID) - 0usize];
    ["Offset of field: EN_DCSONengNBIdentification::selectedTAI"]
        [::std::mem::offset_of!(EN_DCSONengNBIdentification, selectedTAI) - 120usize];
    ["Offset of field: EN_DCSONengNBIdentification::iE_Extensions"]
        [::std::mem::offset_of!(EN_DCSONengNBIdentification, iE_Extensions) - 232usize];
    ["Offset of field: EN_DCSONengNBIdentification::_asn_ctx"]
        [::std::mem::offset_of!(EN_DCSONengNBIdentification, _asn_ctx) - 240usize];
};
pub type EN_DCSONengNBIdentification_t = EN_DCSONengNBIdentification;
unsafe extern "C" {
    pub static mut asn_DEF_EN_DCSONengNBIdentification: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EN_DCSONengNBIdentification_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EN_DCSONengNBIdentification_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EN_DCTransferTypeRequest {
    pub sourceeNB: EN_DCSONeNBIdentification_t,
    pub targetengNB: EN_DCSONengNBIdentification_t,
    pub targeteNB: *mut EN_DCSONeNBIdentification,
    pub associatedTAI: *mut TAI,
    pub broadcast5GSTAI: *mut FiveGSTAI,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EN_DCTransferTypeRequest"]
        [::std::mem::size_of::<EN_DCTransferTypeRequest>() - 616usize];
    ["Alignment of EN_DCTransferTypeRequest"]
        [::std::mem::align_of::<EN_DCTransferTypeRequest>() - 8usize];
    ["Offset of field: EN_DCTransferTypeRequest::sourceeNB"]
        [::std::mem::offset_of!(EN_DCTransferTypeRequest, sourceeNB) - 0usize];
    ["Offset of field: EN_DCTransferTypeRequest::targetengNB"]
        [::std::mem::offset_of!(EN_DCTransferTypeRequest, targetengNB) - 296usize];
    ["Offset of field: EN_DCTransferTypeRequest::targeteNB"]
        [::std::mem::offset_of!(EN_DCTransferTypeRequest, targeteNB) - 560usize];
    ["Offset of field: EN_DCTransferTypeRequest::associatedTAI"]
        [::std::mem::offset_of!(EN_DCTransferTypeRequest, associatedTAI) - 568usize];
    ["Offset of field: EN_DCTransferTypeRequest::broadcast5GSTAI"]
        [::std::mem::offset_of!(EN_DCTransferTypeRequest, broadcast5GSTAI) - 576usize];
    ["Offset of field: EN_DCTransferTypeRequest::iE_Extensions"]
        [::std::mem::offset_of!(EN_DCTransferTypeRequest, iE_Extensions) - 584usize];
    ["Offset of field: EN_DCTransferTypeRequest::_asn_ctx"]
        [::std::mem::offset_of!(EN_DCTransferTypeRequest, _asn_ctx) - 592usize];
};
pub type EN_DCTransferTypeRequest_t = EN_DCTransferTypeRequest;
unsafe extern "C" {
    pub static mut asn_DEF_EN_DCTransferTypeRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EN_DCTransferTypeRequest_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EN_DCTransferTypeRequest_1: [asn_TYPE_member_t; 6usize];
}
pub type FiveGSTAC_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_FiveGSTAC_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_FiveGSTAC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn FiveGSTAC_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FiveGSTAC_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FiveGSTAC_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveGSTAC_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct FiveGSTAI {
    pub pLMNidentity: PLMNidentity_t,
    pub fiveGSTAC: FiveGSTAC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of FiveGSTAI"][::std::mem::size_of::<FiveGSTAI>() - 112usize];
    ["Alignment of FiveGSTAI"][::std::mem::align_of::<FiveGSTAI>() - 8usize];
    ["Offset of field: FiveGSTAI::pLMNidentity"]
        [::std::mem::offset_of!(FiveGSTAI, pLMNidentity) - 0usize];
    ["Offset of field: FiveGSTAI::fiveGSTAC"]
        [::std::mem::offset_of!(FiveGSTAI, fiveGSTAC) - 40usize];
    ["Offset of field: FiveGSTAI::iE_Extensions"]
        [::std::mem::offset_of!(FiveGSTAI, iE_Extensions) - 80usize];
    ["Offset of field: FiveGSTAI::_asn_ctx"][::std::mem::offset_of!(FiveGSTAI, _asn_ctx) - 88usize];
};
pub type FiveGSTAI_t = FiveGSTAI;
unsafe extern "C" {
    pub static mut asn_DEF_FiveGSTAI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_FiveGSTAI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_FiveGSTAI_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EN_DCTransferTypeReply {
    pub sourceengNB: EN_DCSONengNBIdentification_t,
    pub targeteNB: EN_DCSONeNBIdentification_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EN_DCTransferTypeReply"][::std::mem::size_of::<EN_DCTransferTypeReply>() - 592usize];
    ["Alignment of EN_DCTransferTypeReply"]
        [::std::mem::align_of::<EN_DCTransferTypeReply>() - 8usize];
    ["Offset of field: EN_DCTransferTypeReply::sourceengNB"]
        [::std::mem::offset_of!(EN_DCTransferTypeReply, sourceengNB) - 0usize];
    ["Offset of field: EN_DCTransferTypeReply::targeteNB"]
        [::std::mem::offset_of!(EN_DCTransferTypeReply, targeteNB) - 264usize];
    ["Offset of field: EN_DCTransferTypeReply::iE_Extensions"]
        [::std::mem::offset_of!(EN_DCTransferTypeReply, iE_Extensions) - 560usize];
    ["Offset of field: EN_DCTransferTypeReply::_asn_ctx"]
        [::std::mem::offset_of!(EN_DCTransferTypeReply, _asn_ctx) - 568usize];
};
pub type EN_DCTransferTypeReply_t = EN_DCTransferTypeReply;
unsafe extern "C" {
    pub static mut asn_DEF_EN_DCTransferTypeReply: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EN_DCTransferTypeReply_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EN_DCTransferTypeReply_1: [asn_TYPE_member_t; 3usize];
}
pub const EN_DCSONTransferType_PR_EN_DCSONTransferType_PR_NOTHING: EN_DCSONTransferType_PR = 0;
pub const EN_DCSONTransferType_PR_EN_DCSONTransferType_PR_request: EN_DCSONTransferType_PR = 1;
pub const EN_DCSONTransferType_PR_EN_DCSONTransferType_PR_reply: EN_DCSONTransferType_PR = 2;
pub type EN_DCSONTransferType_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EN_DCSONTransferType {
    pub present: EN_DCSONTransferType_PR,
    pub choice: EN_DCSONTransferType_EN_DCSONTransferType_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union EN_DCSONTransferType_EN_DCSONTransferType_u {
    pub request: EN_DCTransferTypeRequest_t,
    pub reply: EN_DCTransferTypeReply_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EN_DCSONTransferType_EN_DCSONTransferType_u"]
        [::std::mem::size_of::<EN_DCSONTransferType_EN_DCSONTransferType_u>() - 616usize];
    ["Alignment of EN_DCSONTransferType_EN_DCSONTransferType_u"]
        [::std::mem::align_of::<EN_DCSONTransferType_EN_DCSONTransferType_u>() - 8usize];
    ["Offset of field: EN_DCSONTransferType_EN_DCSONTransferType_u::request"]
        [::std::mem::offset_of!(EN_DCSONTransferType_EN_DCSONTransferType_u, request) - 0usize];
    ["Offset of field: EN_DCSONTransferType_EN_DCSONTransferType_u::reply"]
        [::std::mem::offset_of!(EN_DCSONTransferType_EN_DCSONTransferType_u, reply) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EN_DCSONTransferType"][::std::mem::size_of::<EN_DCSONTransferType>() - 648usize];
    ["Alignment of EN_DCSONTransferType"][::std::mem::align_of::<EN_DCSONTransferType>() - 8usize];
    ["Offset of field: EN_DCSONTransferType::present"]
        [::std::mem::offset_of!(EN_DCSONTransferType, present) - 0usize];
    ["Offset of field: EN_DCSONTransferType::choice"]
        [::std::mem::offset_of!(EN_DCSONTransferType, choice) - 8usize];
    ["Offset of field: EN_DCSONTransferType::_asn_ctx"]
        [::std::mem::offset_of!(EN_DCSONTransferType, _asn_ctx) - 624usize];
};
pub type EN_DCSONTransferType_t = EN_DCSONTransferType;
unsafe extern "C" {
    pub static mut asn_DEF_EN_DCSONTransferType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EN_DCSONTransferType_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EN_DCSONTransferType_1: [asn_TYPE_member_t; 2usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_EN_DCSONTransferType_constr_1: asn_per_constraints_t;
}
pub const SONInformationRequest_SONInformationRequest_x2TNL_Configuration_Info:
    SONInformationRequest = 0;
pub const SONInformationRequest_SONInformationRequest_time_Synchronisation_Info:
    SONInformationRequest = 1;
pub const SONInformationRequest_SONInformationRequest_activate_Muting: SONInformationRequest = 2;
pub const SONInformationRequest_SONInformationRequest_deactivate_Muting: SONInformationRequest = 3;
pub type SONInformationRequest = ::std::os::raw::c_uint;
pub use self::SONInformationRequest as e_SONInformationRequest;
pub type SONInformationRequest_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_SONInformationRequest_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_SONInformationRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_SONInformationRequest_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SONInformationRequest_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SONInformationRequest_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SONInformationRequest_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformationRequest_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SONInformationReply {
    pub x2TNLConfigurationInfo: *mut X2TNLConfigurationInfo,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SONInformationReply"][::std::mem::size_of::<SONInformationReply>() - 40usize];
    ["Alignment of SONInformationReply"][::std::mem::align_of::<SONInformationReply>() - 8usize];
    ["Offset of field: SONInformationReply::x2TNLConfigurationInfo"]
        [::std::mem::offset_of!(SONInformationReply, x2TNLConfigurationInfo) - 0usize];
    ["Offset of field: SONInformationReply::iE_Extensions"]
        [::std::mem::offset_of!(SONInformationReply, iE_Extensions) - 8usize];
    ["Offset of field: SONInformationReply::_asn_ctx"]
        [::std::mem::offset_of!(SONInformationReply, _asn_ctx) - 16usize];
};
pub type SONInformationReply_t = SONInformationReply;
unsafe extern "C" {
    pub static mut asn_DEF_SONInformationReply: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SONInformationReply_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SONInformationReply_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBX2TLAs {
    pub list: ENBX2TLAs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBX2TLAs__bindgen_ty_1 {
    pub array: *mut *mut TransportLayerAddress_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TransportLayerAddress_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBX2TLAs__bindgen_ty_1"][::std::mem::size_of::<ENBX2TLAs__bindgen_ty_1>() - 24usize];
    ["Alignment of ENBX2TLAs__bindgen_ty_1"]
        [::std::mem::align_of::<ENBX2TLAs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ENBX2TLAs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ENBX2TLAs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ENBX2TLAs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ENBX2TLAs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ENBX2TLAs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ENBX2TLAs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ENBX2TLAs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ENBX2TLAs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBX2TLAs"][::std::mem::size_of::<ENBX2TLAs>() - 48usize];
    ["Alignment of ENBX2TLAs"][::std::mem::align_of::<ENBX2TLAs>() - 8usize];
    ["Offset of field: ENBX2TLAs::list"][::std::mem::offset_of!(ENBX2TLAs, list) - 0usize];
    ["Offset of field: ENBX2TLAs::_asn_ctx"][::std::mem::offset_of!(ENBX2TLAs, _asn_ctx) - 24usize];
};
pub type ENBX2TLAs_t = ENBX2TLAs;
unsafe extern "C" {
    pub static mut asn_DEF_ENBX2TLAs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBX2TLAs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBX2TLAs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ENBX2TLAs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct X2TNLConfigurationInfo {
    pub eNBX2TransportLayerAddresses: ENBX2TLAs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of X2TNLConfigurationInfo"][::std::mem::size_of::<X2TNLConfigurationInfo>() - 80usize];
    ["Alignment of X2TNLConfigurationInfo"]
        [::std::mem::align_of::<X2TNLConfigurationInfo>() - 8usize];
    ["Offset of field: X2TNLConfigurationInfo::eNBX2TransportLayerAddresses"]
        [::std::mem::offset_of!(X2TNLConfigurationInfo, eNBX2TransportLayerAddresses) - 0usize];
    ["Offset of field: X2TNLConfigurationInfo::iE_Extensions"]
        [::std::mem::offset_of!(X2TNLConfigurationInfo, iE_Extensions) - 48usize];
    ["Offset of field: X2TNLConfigurationInfo::_asn_ctx"]
        [::std::mem::offset_of!(X2TNLConfigurationInfo, _asn_ctx) - 56usize];
};
pub type X2TNLConfigurationInfo_t = X2TNLConfigurationInfo;
unsafe extern "C" {
    pub static mut asn_DEF_X2TNLConfigurationInfo: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_X2TNLConfigurationInfo_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_X2TNLConfigurationInfo_1: [asn_TYPE_member_t; 2usize];
}
pub type SONInformation_Extension_t = ProtocolIE_SingleContainer_8146P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_SONInformation_Extension: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SONInformation_Extension_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SONInformation_Extension_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SONInformation_PR_SONInformation_PR_NOTHING: SONInformation_PR = 0;
pub const SONInformation_PR_SONInformation_PR_sONInformationRequest: SONInformation_PR = 1;
pub const SONInformation_PR_SONInformation_PR_sONInformationReply: SONInformation_PR = 2;
pub const SONInformation_PR_SONInformation_PR_sONInformation_Extension: SONInformation_PR = 3;
pub type SONInformation_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SONInformation {
    pub present: SONInformation_PR,
    pub choice: SONInformation_SONInformation_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SONInformation_SONInformation_u {
    pub sONInformationRequest: SONInformationRequest_t,
    pub sONInformationReply: SONInformationReply_t,
    pub sONInformation_Extension: SONInformation_Extension_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SONInformation_SONInformation_u"]
        [::std::mem::size_of::<SONInformation_SONInformation_u>() - 72usize];
    ["Alignment of SONInformation_SONInformation_u"]
        [::std::mem::align_of::<SONInformation_SONInformation_u>() - 8usize];
    ["Offset of field: SONInformation_SONInformation_u::sONInformationRequest"]
        [::std::mem::offset_of!(SONInformation_SONInformation_u, sONInformationRequest) - 0usize];
    ["Offset of field: SONInformation_SONInformation_u::sONInformationReply"]
        [::std::mem::offset_of!(SONInformation_SONInformation_u, sONInformationReply) - 0usize];
    ["Offset of field: SONInformation_SONInformation_u::sONInformation_Extension"][::std::mem::offset_of!(
        SONInformation_SONInformation_u,
        sONInformation_Extension
    ) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SONInformation"][::std::mem::size_of::<SONInformation>() - 104usize];
    ["Alignment of SONInformation"][::std::mem::align_of::<SONInformation>() - 8usize];
    ["Offset of field: SONInformation::present"]
        [::std::mem::offset_of!(SONInformation, present) - 0usize];
    ["Offset of field: SONInformation::choice"]
        [::std::mem::offset_of!(SONInformation, choice) - 8usize];
    ["Offset of field: SONInformation::_asn_ctx"]
        [::std::mem::offset_of!(SONInformation, _asn_ctx) - 80usize];
};
pub type SONInformation_t = SONInformation;
unsafe extern "C" {
    pub static mut asn_DEF_SONInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SONInformation_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SONInformation_1: [asn_TYPE_member_t; 3usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_SONInformation_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EN_DCSONConfigurationTransfer {
    pub transfertype: EN_DCSONTransferType_t,
    pub sONInformation: SONInformation_t,
    pub x2TNLConfigInfo: *mut X2TNLConfigurationInfo,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EN_DCSONConfigurationTransfer"]
        [::std::mem::size_of::<EN_DCSONConfigurationTransfer>() - 792usize];
    ["Alignment of EN_DCSONConfigurationTransfer"]
        [::std::mem::align_of::<EN_DCSONConfigurationTransfer>() - 8usize];
    ["Offset of field: EN_DCSONConfigurationTransfer::transfertype"]
        [::std::mem::offset_of!(EN_DCSONConfigurationTransfer, transfertype) - 0usize];
    ["Offset of field: EN_DCSONConfigurationTransfer::sONInformation"]
        [::std::mem::offset_of!(EN_DCSONConfigurationTransfer, sONInformation) - 648usize];
    ["Offset of field: EN_DCSONConfigurationTransfer::x2TNLConfigInfo"]
        [::std::mem::offset_of!(EN_DCSONConfigurationTransfer, x2TNLConfigInfo) - 752usize];
    ["Offset of field: EN_DCSONConfigurationTransfer::iE_Extensions"]
        [::std::mem::offset_of!(EN_DCSONConfigurationTransfer, iE_Extensions) - 760usize];
    ["Offset of field: EN_DCSONConfigurationTransfer::_asn_ctx"]
        [::std::mem::offset_of!(EN_DCSONConfigurationTransfer, _asn_ctx) - 768usize];
};
pub type EN_DCSONConfigurationTransfer_t = EN_DCSONConfigurationTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_EN_DCSONConfigurationTransfer: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Bearers_SubjectToStatusTransferList {
    pub list: Bearers_SubjectToStatusTransferList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Bearers_SubjectToStatusTransferList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Bearers_SubjectToStatusTransferList__bindgen_ty_1"]
        [::std::mem::size_of::<Bearers_SubjectToStatusTransferList__bindgen_ty_1>() - 24usize];
    ["Alignment of Bearers_SubjectToStatusTransferList__bindgen_ty_1"]
        [::std::mem::align_of::<Bearers_SubjectToStatusTransferList__bindgen_ty_1>() - 8usize];
    ["Offset of field: Bearers_SubjectToStatusTransferList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransferList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: Bearers_SubjectToStatusTransferList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransferList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: Bearers_SubjectToStatusTransferList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransferList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: Bearers_SubjectToStatusTransferList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransferList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Bearers_SubjectToStatusTransferList"]
        [::std::mem::size_of::<Bearers_SubjectToStatusTransferList>() - 48usize];
    ["Alignment of Bearers_SubjectToStatusTransferList"]
        [::std::mem::align_of::<Bearers_SubjectToStatusTransferList>() - 8usize];
    ["Offset of field: Bearers_SubjectToStatusTransferList::list"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransferList, list) - 0usize];
    ["Offset of field: Bearers_SubjectToStatusTransferList::_asn_ctx"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransferList, _asn_ctx) - 24usize];
};
pub type Bearers_SubjectToStatusTransferList_t = Bearers_SubjectToStatusTransferList;
unsafe extern "C" {
    pub static mut asn_DEF_Bearers_SubjectToStatusTransferList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Bearers_SubjectToStatusTransferList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Bearers_SubjectToStatusTransferList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_Bearers_SubjectToStatusTransferList_constr_1: asn_per_constraints_t;
}
pub const LastVisitedGERANCellInformation_PR_LastVisitedGERANCellInformation_PR_NOTHING:
    LastVisitedGERANCellInformation_PR = 0;
pub const LastVisitedGERANCellInformation_PR_LastVisitedGERANCellInformation_PR_undefined:
    LastVisitedGERANCellInformation_PR = 1;
pub type LastVisitedGERANCellInformation_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LastVisitedGERANCellInformation {
    pub present: LastVisitedGERANCellInformation_PR,
    pub choice: LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u {
    pub undefined: NULL_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u"]
        [::std::mem::size_of::<LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u>(
        ) - 4usize];
    ["Alignment of LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u"]
        [::std::mem::align_of::<LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u>(
        ) - 4usize];
    ["Offset of field: LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u::undefined"] [:: std :: mem :: offset_of ! (LastVisitedGERANCellInformation_LastVisitedGERANCellInformation_u , undefined) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedGERANCellInformation"]
        [::std::mem::size_of::<LastVisitedGERANCellInformation>() - 32usize];
    ["Alignment of LastVisitedGERANCellInformation"]
        [::std::mem::align_of::<LastVisitedGERANCellInformation>() - 8usize];
    ["Offset of field: LastVisitedGERANCellInformation::present"]
        [::std::mem::offset_of!(LastVisitedGERANCellInformation, present) - 0usize];
    ["Offset of field: LastVisitedGERANCellInformation::choice"]
        [::std::mem::offset_of!(LastVisitedGERANCellInformation, choice) - 4usize];
    ["Offset of field: LastVisitedGERANCellInformation::_asn_ctx"]
        [::std::mem::offset_of!(LastVisitedGERANCellInformation, _asn_ctx) - 8usize];
};
pub type LastVisitedGERANCellInformation_t = LastVisitedGERANCellInformation;
unsafe extern "C" {
    pub static mut asn_DEF_LastVisitedGERANCellInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LastVisitedGERANCellInformation_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LastVisitedGERANCellInformation_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_LastVisitedGERANCellInformation_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECGIListForRestart {
    pub list: ECGIListForRestart__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECGIListForRestart__bindgen_ty_1 {
    pub array: *mut *mut EUTRAN_CGI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EUTRAN_CGI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ECGIListForRestart__bindgen_ty_1"]
        [::std::mem::size_of::<ECGIListForRestart__bindgen_ty_1>() - 24usize];
    ["Alignment of ECGIListForRestart__bindgen_ty_1"]
        [::std::mem::align_of::<ECGIListForRestart__bindgen_ty_1>() - 8usize];
    ["Offset of field: ECGIListForRestart__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ECGIListForRestart__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ECGIListForRestart__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ECGIListForRestart__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ECGIListForRestart__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ECGIListForRestart__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ECGIListForRestart__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ECGIListForRestart__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ECGIListForRestart"][::std::mem::size_of::<ECGIListForRestart>() - 48usize];
    ["Alignment of ECGIListForRestart"][::std::mem::align_of::<ECGIListForRestart>() - 8usize];
    ["Offset of field: ECGIListForRestart::list"]
        [::std::mem::offset_of!(ECGIListForRestart, list) - 0usize];
    ["Offset of field: ECGIListForRestart::_asn_ctx"]
        [::std::mem::offset_of!(ECGIListForRestart, _asn_ctx) - 24usize];
};
pub type ECGIListForRestart_t = ECGIListForRestart;
unsafe extern "C" {
    pub static mut asn_DEF_ECGIListForRestart: asn_TYPE_descriptor_t;
}
pub type ExtendedRNC_ID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ExtendedRNC_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ExtendedRNC_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRNC_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABToBeSetupListHOReq_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSetupListHOReq: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSetupListHOReq_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const AerialUEsubscriptionInformation_AerialUEsubscriptionInformation_allowed:
    AerialUEsubscriptionInformation = 0;
pub const AerialUEsubscriptionInformation_AerialUEsubscriptionInformation_not_allowed:
    AerialUEsubscriptionInformation = 1;
pub type AerialUEsubscriptionInformation = ::std::os::raw::c_uint;
pub use self::AerialUEsubscriptionInformation as e_AerialUEsubscriptionInformation;
pub type AerialUEsubscriptionInformation_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_AerialUEsubscriptionInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AerialUEsubscriptionInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellID_Cancelled {
    pub list: CellID_Cancelled__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellID_Cancelled__bindgen_ty_1 {
    pub array: *mut *mut CellID_Cancelled_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CellID_Cancelled_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellID_Cancelled__bindgen_ty_1"]
        [::std::mem::size_of::<CellID_Cancelled__bindgen_ty_1>() - 24usize];
    ["Alignment of CellID_Cancelled__bindgen_ty_1"]
        [::std::mem::align_of::<CellID_Cancelled__bindgen_ty_1>() - 8usize];
    ["Offset of field: CellID_Cancelled__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CellID_Cancelled__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CellID_Cancelled__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CellID_Cancelled__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CellID_Cancelled__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CellID_Cancelled__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CellID_Cancelled__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CellID_Cancelled__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellID_Cancelled"][::std::mem::size_of::<CellID_Cancelled>() - 48usize];
    ["Alignment of CellID_Cancelled"][::std::mem::align_of::<CellID_Cancelled>() - 8usize];
    ["Offset of field: CellID_Cancelled::list"]
        [::std::mem::offset_of!(CellID_Cancelled, list) - 0usize];
    ["Offset of field: CellID_Cancelled::_asn_ctx"]
        [::std::mem::offset_of!(CellID_Cancelled, _asn_ctx) - 24usize];
};
pub type CellID_Cancelled_t = CellID_Cancelled;
unsafe extern "C" {
    pub static mut asn_DEF_CellID_Cancelled: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellID_Cancelled_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellID_Cancelled_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CellID_Cancelled_constr_1: asn_per_constraints_t;
}
pub type NumberOfBroadcasts_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_NumberOfBroadcasts_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NumberOfBroadcasts: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberOfBroadcasts_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellID_Cancelled_Item {
    pub eCGI: EUTRAN_CGI_t,
    pub numberOfBroadcasts: NumberOfBroadcasts_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellID_Cancelled_Item"][::std::mem::size_of::<CellID_Cancelled_Item>() - 160usize];
    ["Alignment of CellID_Cancelled_Item"]
        [::std::mem::align_of::<CellID_Cancelled_Item>() - 8usize];
    ["Offset of field: CellID_Cancelled_Item::eCGI"]
        [::std::mem::offset_of!(CellID_Cancelled_Item, eCGI) - 0usize];
    ["Offset of field: CellID_Cancelled_Item::numberOfBroadcasts"]
        [::std::mem::offset_of!(CellID_Cancelled_Item, numberOfBroadcasts) - 120usize];
    ["Offset of field: CellID_Cancelled_Item::iE_Extensions"]
        [::std::mem::offset_of!(CellID_Cancelled_Item, iE_Extensions) - 128usize];
    ["Offset of field: CellID_Cancelled_Item::_asn_ctx"]
        [::std::mem::offset_of!(CellID_Cancelled_Item, _asn_ctx) - 136usize];
};
pub type CellID_Cancelled_Item_t = CellID_Cancelled_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CellID_Cancelled_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellID_Cancelled_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellID_Cancelled_Item_1: [asn_TYPE_member_t; 3usize];
}
pub type E_UTRAN_Trace_ID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_E_UTRAN_Trace_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_E_UTRAN_Trace_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_UTRAN_Trace_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MBSFN_ResultToLog {
    pub list: MBSFN_ResultToLog__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MBSFN_ResultToLog__bindgen_ty_1 {
    pub array: *mut *mut MBSFN_ResultToLogInfo,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut MBSFN_ResultToLogInfo)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MBSFN_ResultToLog__bindgen_ty_1"]
        [::std::mem::size_of::<MBSFN_ResultToLog__bindgen_ty_1>() - 24usize];
    ["Alignment of MBSFN_ResultToLog__bindgen_ty_1"]
        [::std::mem::align_of::<MBSFN_ResultToLog__bindgen_ty_1>() - 8usize];
    ["Offset of field: MBSFN_ResultToLog__bindgen_ty_1::array"]
        [::std::mem::offset_of!(MBSFN_ResultToLog__bindgen_ty_1, array) - 0usize];
    ["Offset of field: MBSFN_ResultToLog__bindgen_ty_1::count"]
        [::std::mem::offset_of!(MBSFN_ResultToLog__bindgen_ty_1, count) - 8usize];
    ["Offset of field: MBSFN_ResultToLog__bindgen_ty_1::size"]
        [::std::mem::offset_of!(MBSFN_ResultToLog__bindgen_ty_1, size) - 12usize];
    ["Offset of field: MBSFN_ResultToLog__bindgen_ty_1::free"]
        [::std::mem::offset_of!(MBSFN_ResultToLog__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MBSFN_ResultToLog"][::std::mem::size_of::<MBSFN_ResultToLog>() - 48usize];
    ["Alignment of MBSFN_ResultToLog"][::std::mem::align_of::<MBSFN_ResultToLog>() - 8usize];
    ["Offset of field: MBSFN_ResultToLog::list"]
        [::std::mem::offset_of!(MBSFN_ResultToLog, list) - 0usize];
    ["Offset of field: MBSFN_ResultToLog::_asn_ctx"]
        [::std::mem::offset_of!(MBSFN_ResultToLog, _asn_ctx) - 24usize];
};
pub type MBSFN_ResultToLog_t = MBSFN_ResultToLog;
unsafe extern "C" {
    pub static mut asn_DEF_MBSFN_ResultToLog: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MBSFN_ResultToLog_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MBSFN_ResultToLog_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_MBSFN_ResultToLog_constr_1: asn_per_constraints_t;
}
pub type EARFCN_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_EARFCN_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_EARFCN: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EARFCN_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EARFCN_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EARFCN_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EARFCN_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EARFCN_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EARFCN_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EARFCN_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EARFCN_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EARFCN_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EARFCN_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EARFCN_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MBSFN_ResultToLogInfo {
    pub mBSFN_AreaId: *mut ::std::os::raw::c_long,
    pub carrierFreq: EARFCN_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MBSFN_ResultToLogInfo"][::std::mem::size_of::<MBSFN_ResultToLogInfo>() - 48usize];
    ["Alignment of MBSFN_ResultToLogInfo"]
        [::std::mem::align_of::<MBSFN_ResultToLogInfo>() - 8usize];
    ["Offset of field: MBSFN_ResultToLogInfo::mBSFN_AreaId"]
        [::std::mem::offset_of!(MBSFN_ResultToLogInfo, mBSFN_AreaId) - 0usize];
    ["Offset of field: MBSFN_ResultToLogInfo::carrierFreq"]
        [::std::mem::offset_of!(MBSFN_ResultToLogInfo, carrierFreq) - 8usize];
    ["Offset of field: MBSFN_ResultToLogInfo::iE_Extensions"]
        [::std::mem::offset_of!(MBSFN_ResultToLogInfo, iE_Extensions) - 16usize];
    ["Offset of field: MBSFN_ResultToLogInfo::_asn_ctx"]
        [::std::mem::offset_of!(MBSFN_ResultToLogInfo, _asn_ctx) - 24usize];
};
pub type MBSFN_ResultToLogInfo_t = MBSFN_ResultToLogInfo;
unsafe extern "C" {
    pub static mut asn_DEF_MBSFN_ResultToLogInfo: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MBSFN_ResultToLogInfo_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MBSFN_ResultToLogInfo_1: [asn_TYPE_member_t; 3usize];
}
pub type DCN_ID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_DCN_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_DCN_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn DCN_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn DCN_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DCN_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DCN_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DCN_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DCN_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DCN_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DCN_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DCN_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DCN_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DCN_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type InterfacesToTrace_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_InterfacesToTrace_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_InterfacesToTrace: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn InterfacesToTrace_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn InterfacesToTrace_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type ENBname_t = PrintableString_t;
unsafe extern "C" {
    pub static mut asn_DEF_ENBname: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ENBname_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ENBname_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ENBname_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ENBname_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENBname_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ENBname_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENBname_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ENBname_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENBname_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ENBname_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENBname_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECGIList {
    pub list: ECGIList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECGIList__bindgen_ty_1 {
    pub array: *mut *mut EUTRAN_CGI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EUTRAN_CGI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ECGIList__bindgen_ty_1"][::std::mem::size_of::<ECGIList__bindgen_ty_1>() - 24usize];
    ["Alignment of ECGIList__bindgen_ty_1"]
        [::std::mem::align_of::<ECGIList__bindgen_ty_1>() - 8usize];
    ["Offset of field: ECGIList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ECGIList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ECGIList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ECGIList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ECGIList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ECGIList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ECGIList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ECGIList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ECGIList"][::std::mem::size_of::<ECGIList>() - 48usize];
    ["Alignment of ECGIList"][::std::mem::align_of::<ECGIList>() - 8usize];
    ["Offset of field: ECGIList::list"][::std::mem::offset_of!(ECGIList, list) - 0usize];
    ["Offset of field: ECGIList::_asn_ctx"][::std::mem::offset_of!(ECGIList, _asn_ctx) - 24usize];
};
pub type ECGIList_t = ECGIList;
unsafe extern "C" {
    pub static mut asn_DEF_ECGIList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ECGIList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ECGIList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ECGIList_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListforWarning {
    pub list: TAIListforWarning__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListforWarning__bindgen_ty_1 {
    pub array: *mut *mut TAI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListforWarning__bindgen_ty_1"]
        [::std::mem::size_of::<TAIListforWarning__bindgen_ty_1>() - 24usize];
    ["Alignment of TAIListforWarning__bindgen_ty_1"]
        [::std::mem::align_of::<TAIListforWarning__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAIListforWarning__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAIListforWarning__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAIListforWarning__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAIListforWarning__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAIListforWarning__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAIListforWarning__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAIListforWarning__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAIListforWarning__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListforWarning"][::std::mem::size_of::<TAIListforWarning>() - 48usize];
    ["Alignment of TAIListforWarning"][::std::mem::align_of::<TAIListforWarning>() - 8usize];
    ["Offset of field: TAIListforWarning::list"]
        [::std::mem::offset_of!(TAIListforWarning, list) - 0usize];
    ["Offset of field: TAIListforWarning::_asn_ctx"]
        [::std::mem::offset_of!(TAIListforWarning, _asn_ctx) - 24usize];
};
pub type TAIListforWarning_t = TAIListforWarning;
unsafe extern "C" {
    pub static mut asn_DEF_TAIListforWarning: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAIListforWarning_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAIListforWarning_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TAIListforWarning_constr_1: asn_per_constraints_t;
}
pub type EmergencyAreaID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_EmergencyAreaID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyAreaID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EmergencyAreaID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyAreaID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaIDList {
    pub list: EmergencyAreaIDList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaIDList__bindgen_ty_1 {
    pub array: *mut *mut EmergencyAreaID_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EmergencyAreaID_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaIDList__bindgen_ty_1"]
        [::std::mem::size_of::<EmergencyAreaIDList__bindgen_ty_1>() - 24usize];
    ["Alignment of EmergencyAreaIDList__bindgen_ty_1"]
        [::std::mem::align_of::<EmergencyAreaIDList__bindgen_ty_1>() - 8usize];
    ["Offset of field: EmergencyAreaIDList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(EmergencyAreaIDList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: EmergencyAreaIDList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(EmergencyAreaIDList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: EmergencyAreaIDList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(EmergencyAreaIDList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: EmergencyAreaIDList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(EmergencyAreaIDList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaIDList"][::std::mem::size_of::<EmergencyAreaIDList>() - 48usize];
    ["Alignment of EmergencyAreaIDList"][::std::mem::align_of::<EmergencyAreaIDList>() - 8usize];
    ["Offset of field: EmergencyAreaIDList::list"]
        [::std::mem::offset_of!(EmergencyAreaIDList, list) - 0usize];
    ["Offset of field: EmergencyAreaIDList::_asn_ctx"]
        [::std::mem::offset_of!(EmergencyAreaIDList, _asn_ctx) - 24usize];
};
pub type EmergencyAreaIDList_t = EmergencyAreaIDList;
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyAreaIDList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EmergencyAreaIDList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EmergencyAreaIDList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_EmergencyAreaIDList_constr_1: asn_per_constraints_t;
}
pub const WarningAreaList_PR_WarningAreaList_PR_NOTHING: WarningAreaList_PR = 0;
pub const WarningAreaList_PR_WarningAreaList_PR_cellIDList: WarningAreaList_PR = 1;
pub const WarningAreaList_PR_WarningAreaList_PR_trackingAreaListforWarning: WarningAreaList_PR = 2;
pub const WarningAreaList_PR_WarningAreaList_PR_emergencyAreaIDList: WarningAreaList_PR = 3;
pub type WarningAreaList_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct WarningAreaList {
    pub present: WarningAreaList_PR,
    pub choice: WarningAreaList_WarningAreaList_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union WarningAreaList_WarningAreaList_u {
    pub cellIDList: ECGIList_t,
    pub trackingAreaListforWarning: TAIListforWarning_t,
    pub emergencyAreaIDList: EmergencyAreaIDList_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WarningAreaList_WarningAreaList_u"]
        [::std::mem::size_of::<WarningAreaList_WarningAreaList_u>() - 48usize];
    ["Alignment of WarningAreaList_WarningAreaList_u"]
        [::std::mem::align_of::<WarningAreaList_WarningAreaList_u>() - 8usize];
    ["Offset of field: WarningAreaList_WarningAreaList_u::cellIDList"]
        [::std::mem::offset_of!(WarningAreaList_WarningAreaList_u, cellIDList) - 0usize];
    ["Offset of field: WarningAreaList_WarningAreaList_u::trackingAreaListforWarning"][::std::mem::offset_of!(
        WarningAreaList_WarningAreaList_u,
        trackingAreaListforWarning
    ) - 0usize];
    ["Offset of field: WarningAreaList_WarningAreaList_u::emergencyAreaIDList"]
        [::std::mem::offset_of!(WarningAreaList_WarningAreaList_u, emergencyAreaIDList) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WarningAreaList"][::std::mem::size_of::<WarningAreaList>() - 80usize];
    ["Alignment of WarningAreaList"][::std::mem::align_of::<WarningAreaList>() - 8usize];
    ["Offset of field: WarningAreaList::present"]
        [::std::mem::offset_of!(WarningAreaList, present) - 0usize];
    ["Offset of field: WarningAreaList::choice"]
        [::std::mem::offset_of!(WarningAreaList, choice) - 8usize];
    ["Offset of field: WarningAreaList::_asn_ctx"]
        [::std::mem::offset_of!(WarningAreaList, _asn_ctx) - 56usize];
};
pub type WarningAreaList_t = WarningAreaList;
unsafe extern "C" {
    pub static mut asn_DEF_WarningAreaList: asn_TYPE_descriptor_t;
}
pub const CE_mode_B_SupportIndicator_CE_mode_B_SupportIndicator_supported:
    CE_mode_B_SupportIndicator = 0;
pub type CE_mode_B_SupportIndicator = ::std::os::raw::c_uint;
pub use self::CE_mode_B_SupportIndicator as e_CE_mode_B_SupportIndicator;
pub type CE_mode_B_SupportIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_CE_mode_B_SupportIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_mode_B_SupportIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecommendedCellList {
    pub list: RecommendedCellList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecommendedCellList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedCellList__bindgen_ty_1"]
        [::std::mem::size_of::<RecommendedCellList__bindgen_ty_1>() - 24usize];
    ["Alignment of RecommendedCellList__bindgen_ty_1"]
        [::std::mem::align_of::<RecommendedCellList__bindgen_ty_1>() - 8usize];
    ["Offset of field: RecommendedCellList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(RecommendedCellList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: RecommendedCellList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(RecommendedCellList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: RecommendedCellList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(RecommendedCellList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: RecommendedCellList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(RecommendedCellList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedCellList"][::std::mem::size_of::<RecommendedCellList>() - 48usize];
    ["Alignment of RecommendedCellList"][::std::mem::align_of::<RecommendedCellList>() - 8usize];
    ["Offset of field: RecommendedCellList::list"]
        [::std::mem::offset_of!(RecommendedCellList, list) - 0usize];
    ["Offset of field: RecommendedCellList::_asn_ctx"]
        [::std::mem::offset_of!(RecommendedCellList, _asn_ctx) - 24usize];
};
pub type RecommendedCellList_t = RecommendedCellList;
unsafe extern "C" {
    pub static mut asn_DEF_RecommendedCellList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RecommendedCellList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RecommendedCellList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_RecommendedCellList_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecommendedCellsForPaging {
    pub recommendedCellList: RecommendedCellList_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedCellsForPaging"]
        [::std::mem::size_of::<RecommendedCellsForPaging>() - 80usize];
    ["Alignment of RecommendedCellsForPaging"]
        [::std::mem::align_of::<RecommendedCellsForPaging>() - 8usize];
    ["Offset of field: RecommendedCellsForPaging::recommendedCellList"]
        [::std::mem::offset_of!(RecommendedCellsForPaging, recommendedCellList) - 0usize];
    ["Offset of field: RecommendedCellsForPaging::iE_Extensions"]
        [::std::mem::offset_of!(RecommendedCellsForPaging, iE_Extensions) - 48usize];
    ["Offset of field: RecommendedCellsForPaging::_asn_ctx"]
        [::std::mem::offset_of!(RecommendedCellsForPaging, _asn_ctx) - 56usize];
};
pub type RecommendedCellsForPaging_t = RecommendedCellsForPaging;
unsafe extern "C" {
    pub static mut asn_DEF_RecommendedCellsForPaging: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RecommendedCellsForPaging_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RecommendedCellsForPaging_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InformationOnRecommendedCellsAndENBsForPaging {
    pub recommendedCellsForPaging: RecommendedCellsForPaging_t,
    pub recommendENBsForPaging: RecommendedENBsForPaging_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InformationOnRecommendedCellsAndENBsForPaging"]
        [::std::mem::size_of::<InformationOnRecommendedCellsAndENBsForPaging>() - 192usize];
    ["Alignment of InformationOnRecommendedCellsAndENBsForPaging"]
        [::std::mem::align_of::<InformationOnRecommendedCellsAndENBsForPaging>() - 8usize];
    ["Offset of field: InformationOnRecommendedCellsAndENBsForPaging::recommendedCellsForPaging"][::std::mem::offset_of!(
        InformationOnRecommendedCellsAndENBsForPaging,
        recommendedCellsForPaging
    )
        - 0usize];
    ["Offset of field: InformationOnRecommendedCellsAndENBsForPaging::recommendENBsForPaging"][::std::mem::offset_of!(
        InformationOnRecommendedCellsAndENBsForPaging,
        recommendENBsForPaging
    )
        - 80usize];
    ["Offset of field: InformationOnRecommendedCellsAndENBsForPaging::iE_Extensions"][::std::mem::offset_of!(
        InformationOnRecommendedCellsAndENBsForPaging,
        iE_Extensions
    ) - 160usize];
    ["Offset of field: InformationOnRecommendedCellsAndENBsForPaging::_asn_ctx"][::std::mem::offset_of!(
        InformationOnRecommendedCellsAndENBsForPaging,
        _asn_ctx
    ) - 168usize];
};
pub type InformationOnRecommendedCellsAndENBsForPaging_t =
    InformationOnRecommendedCellsAndENBsForPaging;
unsafe extern "C" {
    pub static mut asn_DEF_InformationOnRecommendedCellsAndENBsForPaging: asn_TYPE_descriptor_t;
}
pub type BluetoothName_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_BluetoothName_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_BluetoothName: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn BluetoothName_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn BluetoothName_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BluetoothName_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BluetoothName_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothName_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothName_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothName_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothName_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothName_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothName_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BluetoothName_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type SerialNumber_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_SerialNumber: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SerialNumber_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SerialNumber_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SerialNumber_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SerialNumber_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SerialNumber_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SerialNumber_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SerialNumber_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SerialNumber_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SerialNumber_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SerialNumber_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SerialNumber_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type QCI_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_QCI_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_QCI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn QCI_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn QCI_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn QCI_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn QCI_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn QCI_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn QCI_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn QCI_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn QCI_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn QCI_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn QCI_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn QCI_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Pre_emptionCapability_Pre_emptionCapability_shall_not_trigger_pre_emption:
    Pre_emptionCapability = 0;
pub const Pre_emptionCapability_Pre_emptionCapability_may_trigger_pre_emption:
    Pre_emptionCapability = 1;
pub type Pre_emptionCapability = ::std::os::raw::c_uint;
pub use self::Pre_emptionCapability as e_Pre_emptionCapability;
pub type Pre_emptionCapability_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Pre_emptionCapability_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Pre_emptionCapability: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Pre_emptionCapability_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionCapability_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Pre_emptionVulnerability_Pre_emptionVulnerability_not_pre_emptable:
    Pre_emptionVulnerability = 0;
pub const Pre_emptionVulnerability_Pre_emptionVulnerability_pre_emptable: Pre_emptionVulnerability =
    1;
pub type Pre_emptionVulnerability = ::std::os::raw::c_uint;
pub use self::Pre_emptionVulnerability as e_Pre_emptionVulnerability;
pub type Pre_emptionVulnerability_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Pre_emptionVulnerability_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Pre_emptionVulnerability: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Pre_emptionVulnerability_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Pre_emptionVulnerability_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AllocationAndRetentionPriority {
    pub priorityLevel: PriorityLevel_t,
    pub pre_emptionCapability: Pre_emptionCapability_t,
    pub pre_emptionVulnerability: Pre_emptionVulnerability_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AllocationAndRetentionPriority"]
        [::std::mem::size_of::<AllocationAndRetentionPriority>() - 56usize];
    ["Alignment of AllocationAndRetentionPriority"]
        [::std::mem::align_of::<AllocationAndRetentionPriority>() - 8usize];
    ["Offset of field: AllocationAndRetentionPriority::priorityLevel"]
        [::std::mem::offset_of!(AllocationAndRetentionPriority, priorityLevel) - 0usize];
    ["Offset of field: AllocationAndRetentionPriority::pre_emptionCapability"]
        [::std::mem::offset_of!(AllocationAndRetentionPriority, pre_emptionCapability) - 8usize];
    ["Offset of field: AllocationAndRetentionPriority::pre_emptionVulnerability"][::std::mem::offset_of!(
        AllocationAndRetentionPriority,
        pre_emptionVulnerability
    ) - 16usize];
    ["Offset of field: AllocationAndRetentionPriority::iE_Extensions"]
        [::std::mem::offset_of!(AllocationAndRetentionPriority, iE_Extensions) - 24usize];
    ["Offset of field: AllocationAndRetentionPriority::_asn_ctx"]
        [::std::mem::offset_of!(AllocationAndRetentionPriority, _asn_ctx) - 32usize];
};
pub type AllocationAndRetentionPriority_t = AllocationAndRetentionPriority;
unsafe extern "C" {
    pub static mut asn_DEF_AllocationAndRetentionPriority: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_AllocationAndRetentionPriority_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_AllocationAndRetentionPriority_1: [asn_TYPE_member_t; 4usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABLevelQoSParameters {
    pub qCI: QCI_t,
    pub allocationRetentionPriority: AllocationAndRetentionPriority_t,
    pub gbrQosInformation: *mut GBR_QosInformation,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABLevelQoSParameters"]
        [::std::mem::size_of::<E_RABLevelQoSParameters>() - 104usize];
    ["Alignment of E_RABLevelQoSParameters"]
        [::std::mem::align_of::<E_RABLevelQoSParameters>() - 8usize];
    ["Offset of field: E_RABLevelQoSParameters::qCI"]
        [::std::mem::offset_of!(E_RABLevelQoSParameters, qCI) - 0usize];
    ["Offset of field: E_RABLevelQoSParameters::allocationRetentionPriority"]
        [::std::mem::offset_of!(E_RABLevelQoSParameters, allocationRetentionPriority) - 8usize];
    ["Offset of field: E_RABLevelQoSParameters::gbrQosInformation"]
        [::std::mem::offset_of!(E_RABLevelQoSParameters, gbrQosInformation) - 64usize];
    ["Offset of field: E_RABLevelQoSParameters::iE_Extensions"]
        [::std::mem::offset_of!(E_RABLevelQoSParameters, iE_Extensions) - 72usize];
    ["Offset of field: E_RABLevelQoSParameters::_asn_ctx"]
        [::std::mem::offset_of!(E_RABLevelQoSParameters, _asn_ctx) - 80usize];
};
pub type E_RABLevelQoSParameters_t = E_RABLevelQoSParameters;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABLevelQoSParameters: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABLevelQoSParameters_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABLevelQoSParameters_1: [asn_TYPE_member_t; 4usize];
}
pub type BitRate_t = INTEGER_t;
unsafe extern "C" {
    pub static mut asn_PER_type_BitRate_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_BitRate: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn BitRate_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn BitRate_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BitRate_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BitRate_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BitRate_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BitRate_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BitRate_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BitRate_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BitRate_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BitRate_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BitRate_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GBR_QosInformation {
    pub e_RAB_MaximumBitrateDL: BitRate_t,
    pub e_RAB_MaximumBitrateUL: BitRate_t,
    pub e_RAB_GuaranteedBitrateDL: BitRate_t,
    pub e_RAB_GuaranteedBitrateUL: BitRate_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GBR_QosInformation"][::std::mem::size_of::<GBR_QosInformation>() - 96usize];
    ["Alignment of GBR_QosInformation"][::std::mem::align_of::<GBR_QosInformation>() - 8usize];
    ["Offset of field: GBR_QosInformation::e_RAB_MaximumBitrateDL"]
        [::std::mem::offset_of!(GBR_QosInformation, e_RAB_MaximumBitrateDL) - 0usize];
    ["Offset of field: GBR_QosInformation::e_RAB_MaximumBitrateUL"]
        [::std::mem::offset_of!(GBR_QosInformation, e_RAB_MaximumBitrateUL) - 16usize];
    ["Offset of field: GBR_QosInformation::e_RAB_GuaranteedBitrateDL"]
        [::std::mem::offset_of!(GBR_QosInformation, e_RAB_GuaranteedBitrateDL) - 32usize];
    ["Offset of field: GBR_QosInformation::e_RAB_GuaranteedBitrateUL"]
        [::std::mem::offset_of!(GBR_QosInformation, e_RAB_GuaranteedBitrateUL) - 48usize];
    ["Offset of field: GBR_QosInformation::iE_Extensions"]
        [::std::mem::offset_of!(GBR_QosInformation, iE_Extensions) - 64usize];
    ["Offset of field: GBR_QosInformation::_asn_ctx"]
        [::std::mem::offset_of!(GBR_QosInformation, _asn_ctx) - 72usize];
};
pub type GBR_QosInformation_t = GBR_QosInformation;
unsafe extern "C" {
    pub static mut asn_DEF_GBR_QosInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_GBR_QosInformation_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_GBR_QosInformation_1: [asn_TYPE_member_t; 5usize];
}
pub type NAS_PDU_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_NAS_PDU: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NAS_PDU_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NAS_PDU_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NAS_PDU_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NAS_PDU_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeModifiedItemBearerModReq {
    pub e_RAB_ID: E_RAB_ID_t,
    pub e_RABLevelQoSParameters: E_RABLevelQoSParameters_t,
    pub nAS_PDU: NAS_PDU_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeModifiedItemBearerModReq"]
        [::std::mem::size_of::<E_RABToBeModifiedItemBearerModReq>() - 184usize];
    ["Alignment of E_RABToBeModifiedItemBearerModReq"]
        [::std::mem::align_of::<E_RABToBeModifiedItemBearerModReq>() - 8usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModReq::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModReq, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModReq::e_RABLevelQoSParameters"][::std::mem::offset_of!(
        E_RABToBeModifiedItemBearerModReq,
        e_RABLevelQoSParameters
    ) - 8usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModReq::nAS_PDU"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModReq, nAS_PDU) - 112usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModReq::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModReq, iE_Extensions) - 152usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModReq, _asn_ctx) - 160usize];
};
pub type E_RABToBeModifiedItemBearerModReq_t = E_RABToBeModifiedItemBearerModReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeModifiedItemBearerModReq: asn_TYPE_descriptor_t;
}
pub const Coverage_Level_Coverage_Level_extendedcoverage: Coverage_Level = 0;
pub type Coverage_Level = ::std::os::raw::c_uint;
pub use self::Coverage_Level as e_Coverage_Level;
pub type Coverage_Level_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Coverage_Level: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Coverage_Level_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Coverage_Level_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Coverage_Level_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Coverage_Level_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAListforQMC {
    pub list: TAListforQMC__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAListforQMC__bindgen_ty_1 {
    pub array: *mut *mut TAC_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAC_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAListforQMC__bindgen_ty_1"]
        [::std::mem::size_of::<TAListforQMC__bindgen_ty_1>() - 24usize];
    ["Alignment of TAListforQMC__bindgen_ty_1"]
        [::std::mem::align_of::<TAListforQMC__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAListforQMC__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAListforQMC__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAListforQMC__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAListforQMC__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAListforQMC__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAListforQMC__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAListforQMC__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAListforQMC__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAListforQMC"][::std::mem::size_of::<TAListforQMC>() - 48usize];
    ["Alignment of TAListforQMC"][::std::mem::align_of::<TAListforQMC>() - 8usize];
    ["Offset of field: TAListforQMC::list"][::std::mem::offset_of!(TAListforQMC, list) - 0usize];
    ["Offset of field: TAListforQMC::_asn_ctx"]
        [::std::mem::offset_of!(TAListforQMC, _asn_ctx) - 24usize];
};
pub type TAListforQMC_t = TAListforQMC;
unsafe extern "C" {
    pub static mut asn_DEF_TAListforQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAListforQMC_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAListforQMC_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TAListforQMC_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TABasedQMC {
    pub tAListforQMC: TAListforQMC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TABasedQMC"][::std::mem::size_of::<TABasedQMC>() - 80usize];
    ["Alignment of TABasedQMC"][::std::mem::align_of::<TABasedQMC>() - 8usize];
    ["Offset of field: TABasedQMC::tAListforQMC"]
        [::std::mem::offset_of!(TABasedQMC, tAListforQMC) - 0usize];
    ["Offset of field: TABasedQMC::iE_Extensions"]
        [::std::mem::offset_of!(TABasedQMC, iE_Extensions) - 48usize];
    ["Offset of field: TABasedQMC::_asn_ctx"]
        [::std::mem::offset_of!(TABasedQMC, _asn_ctx) - 56usize];
};
pub type TABasedQMC_t = TABasedQMC;
unsafe extern "C" {
    pub static mut asn_DEF_TABasedQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TABasedQMC_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TABasedQMC_1: [asn_TYPE_member_t; 2usize];
}
pub type CELevel_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_CELevel: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CELevel_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CELevel_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CELevel_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CELevel_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CELevel_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CELevel_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CELevel_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CELevel_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CELevel_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CELevel_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CELevel_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellIdentifierAndCELevelForCECapableUEs {
    pub global_Cell_ID: EUTRAN_CGI_t,
    pub cELevel: CELevel_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellIdentifierAndCELevelForCECapableUEs"]
        [::std::mem::size_of::<CellIdentifierAndCELevelForCECapableUEs>() - 192usize];
    ["Alignment of CellIdentifierAndCELevelForCECapableUEs"]
        [::std::mem::align_of::<CellIdentifierAndCELevelForCECapableUEs>() - 8usize];
    ["Offset of field: CellIdentifierAndCELevelForCECapableUEs::global_Cell_ID"]
        [::std::mem::offset_of!(CellIdentifierAndCELevelForCECapableUEs, global_Cell_ID) - 0usize];
    ["Offset of field: CellIdentifierAndCELevelForCECapableUEs::cELevel"]
        [::std::mem::offset_of!(CellIdentifierAndCELevelForCECapableUEs, cELevel) - 120usize];
    ["Offset of field: CellIdentifierAndCELevelForCECapableUEs::iE_Extensions"]
        [::std::mem::offset_of!(CellIdentifierAndCELevelForCECapableUEs, iE_Extensions) - 160usize];
    ["Offset of field: CellIdentifierAndCELevelForCECapableUEs::_asn_ctx"]
        [::std::mem::offset_of!(CellIdentifierAndCELevelForCECapableUEs, _asn_ctx) - 168usize];
};
pub type CellIdentifierAndCELevelForCECapableUEs_t = CellIdentifierAndCELevelForCECapableUEs;
unsafe extern "C" {
    pub static mut asn_DEF_CellIdentifierAndCELevelForCECapableUEs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellIdentifierAndCELevelForCECapableUEs_specs_1:
        asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellIdentifierAndCELevelForCECapableUEs_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAI_Cancelled {
    pub list: TAI_Cancelled__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAI_Cancelled__bindgen_ty_1 {
    pub array: *mut *mut TAI_Cancelled_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAI_Cancelled_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAI_Cancelled__bindgen_ty_1"]
        [::std::mem::size_of::<TAI_Cancelled__bindgen_ty_1>() - 24usize];
    ["Alignment of TAI_Cancelled__bindgen_ty_1"]
        [::std::mem::align_of::<TAI_Cancelled__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAI_Cancelled__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAI_Cancelled__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAI_Cancelled__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAI_Cancelled__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAI_Cancelled__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAI_Cancelled__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAI_Cancelled__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAI_Cancelled__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAI_Cancelled"][::std::mem::size_of::<TAI_Cancelled>() - 48usize];
    ["Alignment of TAI_Cancelled"][::std::mem::align_of::<TAI_Cancelled>() - 8usize];
    ["Offset of field: TAI_Cancelled::list"][::std::mem::offset_of!(TAI_Cancelled, list) - 0usize];
    ["Offset of field: TAI_Cancelled::_asn_ctx"]
        [::std::mem::offset_of!(TAI_Cancelled, _asn_ctx) - 24usize];
};
pub type TAI_Cancelled_t = TAI_Cancelled;
unsafe extern "C" {
    pub static mut asn_DEF_TAI_Cancelled: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAI_Cancelled_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAI_Cancelled_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TAI_Cancelled_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CancelledCellinTAI {
    pub list: CancelledCellinTAI__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CancelledCellinTAI__bindgen_ty_1 {
    pub array: *mut *mut CancelledCellinTAI_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CancelledCellinTAI_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CancelledCellinTAI__bindgen_ty_1"]
        [::std::mem::size_of::<CancelledCellinTAI__bindgen_ty_1>() - 24usize];
    ["Alignment of CancelledCellinTAI__bindgen_ty_1"]
        [::std::mem::align_of::<CancelledCellinTAI__bindgen_ty_1>() - 8usize];
    ["Offset of field: CancelledCellinTAI__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CancelledCellinTAI__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CancelledCellinTAI__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CancelledCellinTAI__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CancelledCellinTAI__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CancelledCellinTAI__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CancelledCellinTAI__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CancelledCellinTAI__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CancelledCellinTAI"][::std::mem::size_of::<CancelledCellinTAI>() - 48usize];
    ["Alignment of CancelledCellinTAI"][::std::mem::align_of::<CancelledCellinTAI>() - 8usize];
    ["Offset of field: CancelledCellinTAI::list"]
        [::std::mem::offset_of!(CancelledCellinTAI, list) - 0usize];
    ["Offset of field: CancelledCellinTAI::_asn_ctx"]
        [::std::mem::offset_of!(CancelledCellinTAI, _asn_ctx) - 24usize];
};
pub type CancelledCellinTAI_t = CancelledCellinTAI;
unsafe extern "C" {
    pub static mut asn_DEF_CancelledCellinTAI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CancelledCellinTAI_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CancelledCellinTAI_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CancelledCellinTAI_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CancelledCellinTAI_Item {
    pub eCGI: EUTRAN_CGI_t,
    pub numberOfBroadcasts: NumberOfBroadcasts_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CancelledCellinTAI_Item"]
        [::std::mem::size_of::<CancelledCellinTAI_Item>() - 160usize];
    ["Alignment of CancelledCellinTAI_Item"]
        [::std::mem::align_of::<CancelledCellinTAI_Item>() - 8usize];
    ["Offset of field: CancelledCellinTAI_Item::eCGI"]
        [::std::mem::offset_of!(CancelledCellinTAI_Item, eCGI) - 0usize];
    ["Offset of field: CancelledCellinTAI_Item::numberOfBroadcasts"]
        [::std::mem::offset_of!(CancelledCellinTAI_Item, numberOfBroadcasts) - 120usize];
    ["Offset of field: CancelledCellinTAI_Item::iE_Extensions"]
        [::std::mem::offset_of!(CancelledCellinTAI_Item, iE_Extensions) - 128usize];
    ["Offset of field: CancelledCellinTAI_Item::_asn_ctx"]
        [::std::mem::offset_of!(CancelledCellinTAI_Item, _asn_ctx) - 136usize];
};
pub type CancelledCellinTAI_Item_t = CancelledCellinTAI_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CancelledCellinTAI_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CancelledCellinTAI_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CancelledCellinTAI_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAI_Cancelled_Item {
    pub tAI: TAI_t,
    pub cancelledCellinTAI: CancelledCellinTAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAI_Cancelled_Item"][::std::mem::size_of::<TAI_Cancelled_Item>() - 192usize];
    ["Alignment of TAI_Cancelled_Item"][::std::mem::align_of::<TAI_Cancelled_Item>() - 8usize];
    ["Offset of field: TAI_Cancelled_Item::tAI"]
        [::std::mem::offset_of!(TAI_Cancelled_Item, tAI) - 0usize];
    ["Offset of field: TAI_Cancelled_Item::cancelledCellinTAI"]
        [::std::mem::offset_of!(TAI_Cancelled_Item, cancelledCellinTAI) - 112usize];
    ["Offset of field: TAI_Cancelled_Item::iE_Extensions"]
        [::std::mem::offset_of!(TAI_Cancelled_Item, iE_Extensions) - 160usize];
    ["Offset of field: TAI_Cancelled_Item::_asn_ctx"]
        [::std::mem::offset_of!(TAI_Cancelled_Item, _asn_ctx) - 168usize];
};
pub type TAI_Cancelled_Item_t = TAI_Cancelled_Item;
unsafe extern "C" {
    pub static mut asn_DEF_TAI_Cancelled_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAI_Cancelled_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAI_Cancelled_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaID_Cancelled {
    pub list: EmergencyAreaID_Cancelled__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaID_Cancelled__bindgen_ty_1 {
    pub array: *mut *mut EmergencyAreaID_Cancelled_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut EmergencyAreaID_Cancelled_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaID_Cancelled__bindgen_ty_1"]
        [::std::mem::size_of::<EmergencyAreaID_Cancelled__bindgen_ty_1>() - 24usize];
    ["Alignment of EmergencyAreaID_Cancelled__bindgen_ty_1"]
        [::std::mem::align_of::<EmergencyAreaID_Cancelled__bindgen_ty_1>() - 8usize];
    ["Offset of field: EmergencyAreaID_Cancelled__bindgen_ty_1::array"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled__bindgen_ty_1, array) - 0usize];
    ["Offset of field: EmergencyAreaID_Cancelled__bindgen_ty_1::count"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled__bindgen_ty_1, count) - 8usize];
    ["Offset of field: EmergencyAreaID_Cancelled__bindgen_ty_1::size"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled__bindgen_ty_1, size) - 12usize];
    ["Offset of field: EmergencyAreaID_Cancelled__bindgen_ty_1::free"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaID_Cancelled"]
        [::std::mem::size_of::<EmergencyAreaID_Cancelled>() - 48usize];
    ["Alignment of EmergencyAreaID_Cancelled"]
        [::std::mem::align_of::<EmergencyAreaID_Cancelled>() - 8usize];
    ["Offset of field: EmergencyAreaID_Cancelled::list"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled, list) - 0usize];
    ["Offset of field: EmergencyAreaID_Cancelled::_asn_ctx"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled, _asn_ctx) - 24usize];
};
pub type EmergencyAreaID_Cancelled_t = EmergencyAreaID_Cancelled;
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyAreaID_Cancelled: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EmergencyAreaID_Cancelled_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EmergencyAreaID_Cancelled_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_EmergencyAreaID_Cancelled_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CancelledCellinEAI {
    pub list: CancelledCellinEAI__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CancelledCellinEAI__bindgen_ty_1 {
    pub array: *mut *mut CancelledCellinEAI_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CancelledCellinEAI_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CancelledCellinEAI__bindgen_ty_1"]
        [::std::mem::size_of::<CancelledCellinEAI__bindgen_ty_1>() - 24usize];
    ["Alignment of CancelledCellinEAI__bindgen_ty_1"]
        [::std::mem::align_of::<CancelledCellinEAI__bindgen_ty_1>() - 8usize];
    ["Offset of field: CancelledCellinEAI__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CancelledCellinEAI__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CancelledCellinEAI__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CancelledCellinEAI__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CancelledCellinEAI__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CancelledCellinEAI__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CancelledCellinEAI__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CancelledCellinEAI__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CancelledCellinEAI"][::std::mem::size_of::<CancelledCellinEAI>() - 48usize];
    ["Alignment of CancelledCellinEAI"][::std::mem::align_of::<CancelledCellinEAI>() - 8usize];
    ["Offset of field: CancelledCellinEAI::list"]
        [::std::mem::offset_of!(CancelledCellinEAI, list) - 0usize];
    ["Offset of field: CancelledCellinEAI::_asn_ctx"]
        [::std::mem::offset_of!(CancelledCellinEAI, _asn_ctx) - 24usize];
};
pub type CancelledCellinEAI_t = CancelledCellinEAI;
unsafe extern "C" {
    pub static mut asn_DEF_CancelledCellinEAI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CancelledCellinEAI_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CancelledCellinEAI_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CancelledCellinEAI_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CancelledCellinEAI_Item {
    pub eCGI: EUTRAN_CGI_t,
    pub numberOfBroadcasts: NumberOfBroadcasts_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CancelledCellinEAI_Item"]
        [::std::mem::size_of::<CancelledCellinEAI_Item>() - 160usize];
    ["Alignment of CancelledCellinEAI_Item"]
        [::std::mem::align_of::<CancelledCellinEAI_Item>() - 8usize];
    ["Offset of field: CancelledCellinEAI_Item::eCGI"]
        [::std::mem::offset_of!(CancelledCellinEAI_Item, eCGI) - 0usize];
    ["Offset of field: CancelledCellinEAI_Item::numberOfBroadcasts"]
        [::std::mem::offset_of!(CancelledCellinEAI_Item, numberOfBroadcasts) - 120usize];
    ["Offset of field: CancelledCellinEAI_Item::iE_Extensions"]
        [::std::mem::offset_of!(CancelledCellinEAI_Item, iE_Extensions) - 128usize];
    ["Offset of field: CancelledCellinEAI_Item::_asn_ctx"]
        [::std::mem::offset_of!(CancelledCellinEAI_Item, _asn_ctx) - 136usize];
};
pub type CancelledCellinEAI_Item_t = CancelledCellinEAI_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CancelledCellinEAI_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CancelledCellinEAI_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CancelledCellinEAI_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaID_Cancelled_Item {
    pub emergencyAreaID: EmergencyAreaID_t,
    pub cancelledCellinEAI: CancelledCellinEAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaID_Cancelled_Item"]
        [::std::mem::size_of::<EmergencyAreaID_Cancelled_Item>() - 120usize];
    ["Alignment of EmergencyAreaID_Cancelled_Item"]
        [::std::mem::align_of::<EmergencyAreaID_Cancelled_Item>() - 8usize];
    ["Offset of field: EmergencyAreaID_Cancelled_Item::emergencyAreaID"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled_Item, emergencyAreaID) - 0usize];
    ["Offset of field: EmergencyAreaID_Cancelled_Item::cancelledCellinEAI"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled_Item, cancelledCellinEAI) - 40usize];
    ["Offset of field: EmergencyAreaID_Cancelled_Item::iE_Extensions"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled_Item, iE_Extensions) - 88usize];
    ["Offset of field: EmergencyAreaID_Cancelled_Item::_asn_ctx"]
        [::std::mem::offset_of!(EmergencyAreaID_Cancelled_Item, _asn_ctx) - 96usize];
};
pub type EmergencyAreaID_Cancelled_Item_t = EmergencyAreaID_Cancelled_Item;
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyAreaID_Cancelled_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EmergencyAreaID_Cancelled_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EmergencyAreaID_Cancelled_Item_1: [asn_TYPE_member_t; 3usize];
}
pub const BroadcastCancelledAreaList_PR_BroadcastCancelledAreaList_PR_NOTHING:
    BroadcastCancelledAreaList_PR = 0;
pub const BroadcastCancelledAreaList_PR_BroadcastCancelledAreaList_PR_cellID_Cancelled:
    BroadcastCancelledAreaList_PR = 1;
pub const BroadcastCancelledAreaList_PR_BroadcastCancelledAreaList_PR_tAI_Cancelled:
    BroadcastCancelledAreaList_PR = 2;
pub const BroadcastCancelledAreaList_PR_BroadcastCancelledAreaList_PR_emergencyAreaID_Cancelled:
    BroadcastCancelledAreaList_PR = 3;
pub type BroadcastCancelledAreaList_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BroadcastCancelledAreaList {
    pub present: BroadcastCancelledAreaList_PR,
    pub choice: BroadcastCancelledAreaList_BroadcastCancelledAreaList_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BroadcastCancelledAreaList_BroadcastCancelledAreaList_u {
    pub cellID_Cancelled: CellID_Cancelled_t,
    pub tAI_Cancelled: TAI_Cancelled_t,
    pub emergencyAreaID_Cancelled: EmergencyAreaID_Cancelled_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BroadcastCancelledAreaList_BroadcastCancelledAreaList_u"][::std::mem::size_of::<
        BroadcastCancelledAreaList_BroadcastCancelledAreaList_u,
    >() - 48usize];
    ["Alignment of BroadcastCancelledAreaList_BroadcastCancelledAreaList_u"][::std::mem::align_of::<
        BroadcastCancelledAreaList_BroadcastCancelledAreaList_u,
    >() - 8usize];
    ["Offset of field: BroadcastCancelledAreaList_BroadcastCancelledAreaList_u::cellID_Cancelled"] [:: std :: mem :: offset_of ! (BroadcastCancelledAreaList_BroadcastCancelledAreaList_u , cellID_Cancelled) - 0usize] ;
    ["Offset of field: BroadcastCancelledAreaList_BroadcastCancelledAreaList_u::tAI_Cancelled"][::std::mem::offset_of!(
        BroadcastCancelledAreaList_BroadcastCancelledAreaList_u,
        tAI_Cancelled
    )
        - 0usize];
    ["Offset of field: BroadcastCancelledAreaList_BroadcastCancelledAreaList_u::emergencyAreaID_Cancelled"] [:: std :: mem :: offset_of ! (BroadcastCancelledAreaList_BroadcastCancelledAreaList_u , emergencyAreaID_Cancelled) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BroadcastCancelledAreaList"]
        [::std::mem::size_of::<BroadcastCancelledAreaList>() - 80usize];
    ["Alignment of BroadcastCancelledAreaList"]
        [::std::mem::align_of::<BroadcastCancelledAreaList>() - 8usize];
    ["Offset of field: BroadcastCancelledAreaList::present"]
        [::std::mem::offset_of!(BroadcastCancelledAreaList, present) - 0usize];
    ["Offset of field: BroadcastCancelledAreaList::choice"]
        [::std::mem::offset_of!(BroadcastCancelledAreaList, choice) - 8usize];
    ["Offset of field: BroadcastCancelledAreaList::_asn_ctx"]
        [::std::mem::offset_of!(BroadcastCancelledAreaList, _asn_ctx) - 56usize];
};
pub type BroadcastCancelledAreaList_t = BroadcastCancelledAreaList;
unsafe extern "C" {
    pub static mut asn_DEF_BroadcastCancelledAreaList: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct E_RABFailedToResumeItemResumeReq {
    pub e_RAB_ID: E_RAB_ID_t,
    pub cause: Cause_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABFailedToResumeItemResumeReq"]
        [::std::mem::size_of::<E_RABFailedToResumeItemResumeReq>() - 80usize];
    ["Alignment of E_RABFailedToResumeItemResumeReq"]
        [::std::mem::align_of::<E_RABFailedToResumeItemResumeReq>() - 8usize];
    ["Offset of field: E_RABFailedToResumeItemResumeReq::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeReq, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABFailedToResumeItemResumeReq::cause"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeReq, cause) - 8usize];
    ["Offset of field: E_RABFailedToResumeItemResumeReq::iE_Extensions"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeReq, iE_Extensions) - 48usize];
    ["Offset of field: E_RABFailedToResumeItemResumeReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeReq, _asn_ctx) - 56usize];
};
pub type E_RABFailedToResumeItemResumeReq_t = E_RABFailedToResumeItemResumeReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABFailedToResumeItemResumeReq: asn_TYPE_descriptor_t;
}
pub const M5period_M5period_ms1024: M5period = 0;
pub const M5period_M5period_ms2048: M5period = 1;
pub const M5period_M5period_ms5120: M5period = 2;
pub const M5period_M5period_ms10240: M5period = 3;
pub const M5period_M5period_min1: M5period = 4;
pub type M5period = ::std::os::raw::c_uint;
pub use self::M5period as e_M5period;
pub type M5period_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_M5period_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M5period: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_M5period_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn M5period_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M5period_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M5period_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M5period_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M5period_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M5period_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M5period_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M5period_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M5period_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M5period_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M5period_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const IMSvoiceEPSfallbackfrom5G_IMSvoiceEPSfallbackfrom5G_true: IMSvoiceEPSfallbackfrom5G = 0;
pub type IMSvoiceEPSfallbackfrom5G = ::std::os::raw::c_uint;
pub use self::IMSvoiceEPSfallbackfrom5G as e_IMSvoiceEPSfallbackfrom5G;
pub type IMSvoiceEPSfallbackfrom5G_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_IMSvoiceEPSfallbackfrom5G: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IMSvoiceEPSfallbackfrom5G_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type Cdma2000SectorID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000SectorID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000SectorID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABNotToBeModifiedItemBearerModInd {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub dL_GTP_TEID: GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABNotToBeModifiedItemBearerModInd"]
        [::std::mem::size_of::<E_RABNotToBeModifiedItemBearerModInd>() - 128usize];
    ["Alignment of E_RABNotToBeModifiedItemBearerModInd"]
        [::std::mem::align_of::<E_RABNotToBeModifiedItemBearerModInd>() - 8usize];
    ["Offset of field: E_RABNotToBeModifiedItemBearerModInd::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABNotToBeModifiedItemBearerModInd, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABNotToBeModifiedItemBearerModInd::transportLayerAddress"][::std::mem::offset_of!(
        E_RABNotToBeModifiedItemBearerModInd,
        transportLayerAddress
    ) - 8usize];
    ["Offset of field: E_RABNotToBeModifiedItemBearerModInd::dL_GTP_TEID"]
        [::std::mem::offset_of!(E_RABNotToBeModifiedItemBearerModInd, dL_GTP_TEID) - 56usize];
    ["Offset of field: E_RABNotToBeModifiedItemBearerModInd::iE_Extensions"]
        [::std::mem::offset_of!(E_RABNotToBeModifiedItemBearerModInd, iE_Extensions) - 96usize];
    ["Offset of field: E_RABNotToBeModifiedItemBearerModInd::_asn_ctx"]
        [::std::mem::offset_of!(E_RABNotToBeModifiedItemBearerModInd, _asn_ctx) - 104usize];
};
pub type E_RABNotToBeModifiedItemBearerModInd_t = E_RABNotToBeModifiedItemBearerModInd;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABNotToBeModifiedItemBearerModInd: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABReleaseItemBearerRelComp {
    pub e_RAB_ID: E_RAB_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABReleaseItemBearerRelComp"]
        [::std::mem::size_of::<E_RABReleaseItemBearerRelComp>() - 40usize];
    ["Alignment of E_RABReleaseItemBearerRelComp"]
        [::std::mem::align_of::<E_RABReleaseItemBearerRelComp>() - 8usize];
    ["Offset of field: E_RABReleaseItemBearerRelComp::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABReleaseItemBearerRelComp, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABReleaseItemBearerRelComp::iE_Extensions"]
        [::std::mem::offset_of!(E_RABReleaseItemBearerRelComp, iE_Extensions) - 8usize];
    ["Offset of field: E_RABReleaseItemBearerRelComp::_asn_ctx"]
        [::std::mem::offset_of!(E_RABReleaseItemBearerRelComp, _asn_ctx) - 16usize];
};
pub type E_RABReleaseItemBearerRelComp_t = E_RABReleaseItemBearerRelComp;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABReleaseItemBearerRelComp: asn_TYPE_descriptor_t;
}
pub type EncryptionAlgorithms_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_EncryptionAlgorithms_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_EncryptionAlgorithms: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EncryptionAlgorithms_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type GNB_ID_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_GNB_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_GNB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn GNB_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn GNB_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GNB_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GNB_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GNB_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GNB_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GNB_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GNB_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GNB_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GNB_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GNB_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyItemBearerModConf {
    pub e_RAB_ID: E_RAB_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyItemBearerModConf"]
        [::std::mem::size_of::<E_RABModifyItemBearerModConf>() - 40usize];
    ["Alignment of E_RABModifyItemBearerModConf"]
        [::std::mem::align_of::<E_RABModifyItemBearerModConf>() - 8usize];
    ["Offset of field: E_RABModifyItemBearerModConf::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABModifyItemBearerModConf, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABModifyItemBearerModConf::iE_Extensions"]
        [::std::mem::offset_of!(E_RABModifyItemBearerModConf, iE_Extensions) - 8usize];
    ["Offset of field: E_RABModifyItemBearerModConf::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModifyItemBearerModConf, _asn_ctx) - 16usize];
};
pub type E_RABModifyItemBearerModConf_t = E_RABModifyItemBearerModConf;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModifyItemBearerModConf: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAListforMDT {
    pub list: TAListforMDT__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAListforMDT__bindgen_ty_1 {
    pub array: *mut *mut TAC_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAC_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAListforMDT__bindgen_ty_1"]
        [::std::mem::size_of::<TAListforMDT__bindgen_ty_1>() - 24usize];
    ["Alignment of TAListforMDT__bindgen_ty_1"]
        [::std::mem::align_of::<TAListforMDT__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAListforMDT__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAListforMDT__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAListforMDT__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAListforMDT__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAListforMDT__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAListforMDT__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAListforMDT__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAListforMDT__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAListforMDT"][::std::mem::size_of::<TAListforMDT>() - 48usize];
    ["Alignment of TAListforMDT"][::std::mem::align_of::<TAListforMDT>() - 8usize];
    ["Offset of field: TAListforMDT::list"][::std::mem::offset_of!(TAListforMDT, list) - 0usize];
    ["Offset of field: TAListforMDT::_asn_ctx"]
        [::std::mem::offset_of!(TAListforMDT, _asn_ctx) - 24usize];
};
pub type TAListforMDT_t = TAListforMDT;
unsafe extern "C" {
    pub static mut asn_DEF_TAListforMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAListforMDT_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAListforMDT_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TAListforMDT_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TABasedMDT {
    pub tAListforMDT: TAListforMDT_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TABasedMDT"][::std::mem::size_of::<TABasedMDT>() - 80usize];
    ["Alignment of TABasedMDT"][::std::mem::align_of::<TABasedMDT>() - 8usize];
    ["Offset of field: TABasedMDT::tAListforMDT"]
        [::std::mem::offset_of!(TABasedMDT, tAListforMDT) - 0usize];
    ["Offset of field: TABasedMDT::iE_Extensions"]
        [::std::mem::offset_of!(TABasedMDT, iE_Extensions) - 48usize];
    ["Offset of field: TABasedMDT::_asn_ctx"]
        [::std::mem::offset_of!(TABasedMDT, _asn_ctx) - 56usize];
};
pub type TABasedMDT_t = TABasedMDT;
unsafe extern "C" {
    pub static mut asn_DEF_TABasedMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TABasedMDT_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TABasedMDT_1: [asn_TYPE_member_t; 2usize];
}
pub const ReportIntervalMDT_ReportIntervalMDT_ms120: ReportIntervalMDT = 0;
pub const ReportIntervalMDT_ReportIntervalMDT_ms240: ReportIntervalMDT = 1;
pub const ReportIntervalMDT_ReportIntervalMDT_ms480: ReportIntervalMDT = 2;
pub const ReportIntervalMDT_ReportIntervalMDT_ms640: ReportIntervalMDT = 3;
pub const ReportIntervalMDT_ReportIntervalMDT_ms1024: ReportIntervalMDT = 4;
pub const ReportIntervalMDT_ReportIntervalMDT_ms2048: ReportIntervalMDT = 5;
pub const ReportIntervalMDT_ReportIntervalMDT_ms5120: ReportIntervalMDT = 6;
pub const ReportIntervalMDT_ReportIntervalMDT_ms10240: ReportIntervalMDT = 7;
pub const ReportIntervalMDT_ReportIntervalMDT_min1: ReportIntervalMDT = 8;
pub const ReportIntervalMDT_ReportIntervalMDT_min6: ReportIntervalMDT = 9;
pub const ReportIntervalMDT_ReportIntervalMDT_min12: ReportIntervalMDT = 10;
pub const ReportIntervalMDT_ReportIntervalMDT_min30: ReportIntervalMDT = 11;
pub const ReportIntervalMDT_ReportIntervalMDT_min60: ReportIntervalMDT = 12;
pub type ReportIntervalMDT = ::std::os::raw::c_uint;
pub use self::ReportIntervalMDT as e_ReportIntervalMDT;
pub type ReportIntervalMDT_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ReportIntervalMDT_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ReportIntervalMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ReportIntervalMDT_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportIntervalMDT_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ReportAmountMDT_ReportAmountMDT_r1: ReportAmountMDT = 0;
pub const ReportAmountMDT_ReportAmountMDT_r2: ReportAmountMDT = 1;
pub const ReportAmountMDT_ReportAmountMDT_r4: ReportAmountMDT = 2;
pub const ReportAmountMDT_ReportAmountMDT_r8: ReportAmountMDT = 3;
pub const ReportAmountMDT_ReportAmountMDT_r16: ReportAmountMDT = 4;
pub const ReportAmountMDT_ReportAmountMDT_r32: ReportAmountMDT = 5;
pub const ReportAmountMDT_ReportAmountMDT_r64: ReportAmountMDT = 6;
pub const ReportAmountMDT_ReportAmountMDT_rinfinity: ReportAmountMDT = 7;
pub type ReportAmountMDT = ::std::os::raw::c_uint;
pub use self::ReportAmountMDT as e_ReportAmountMDT;
pub type ReportAmountMDT_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ReportAmountMDT_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ReportAmountMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ReportAmountMDT_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ReportAmountMDT_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportAmountMDT_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct M1PeriodicReporting {
    pub reportInterval: ReportIntervalMDT_t,
    pub reportAmount: ReportAmountMDT_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of M1PeriodicReporting"][::std::mem::size_of::<M1PeriodicReporting>() - 48usize];
    ["Alignment of M1PeriodicReporting"][::std::mem::align_of::<M1PeriodicReporting>() - 8usize];
    ["Offset of field: M1PeriodicReporting::reportInterval"]
        [::std::mem::offset_of!(M1PeriodicReporting, reportInterval) - 0usize];
    ["Offset of field: M1PeriodicReporting::reportAmount"]
        [::std::mem::offset_of!(M1PeriodicReporting, reportAmount) - 8usize];
    ["Offset of field: M1PeriodicReporting::iE_Extensions"]
        [::std::mem::offset_of!(M1PeriodicReporting, iE_Extensions) - 16usize];
    ["Offset of field: M1PeriodicReporting::_asn_ctx"]
        [::std::mem::offset_of!(M1PeriodicReporting, _asn_ctx) - 24usize];
};
pub type M1PeriodicReporting_t = M1PeriodicReporting;
unsafe extern "C" {
    pub static mut asn_DEF_M1PeriodicReporting: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_M1PeriodicReporting_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_M1PeriodicReporting_1: [asn_TYPE_member_t; 3usize];
}
pub const GNB_Identity_PR_GNB_Identity_PR_NOTHING: GNB_Identity_PR = 0;
pub const GNB_Identity_PR_GNB_Identity_PR_gNB_ID: GNB_Identity_PR = 1;
pub type GNB_Identity_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GNB_Identity {
    pub present: GNB_Identity_PR,
    pub choice: GNB_Identity_GNB_Identity_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union GNB_Identity_GNB_Identity_u {
    pub gNB_ID: GNB_ID_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GNB_Identity_GNB_Identity_u"]
        [::std::mem::size_of::<GNB_Identity_GNB_Identity_u>() - 48usize];
    ["Alignment of GNB_Identity_GNB_Identity_u"]
        [::std::mem::align_of::<GNB_Identity_GNB_Identity_u>() - 8usize];
    ["Offset of field: GNB_Identity_GNB_Identity_u::gNB_ID"]
        [::std::mem::offset_of!(GNB_Identity_GNB_Identity_u, gNB_ID) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GNB_Identity"][::std::mem::size_of::<GNB_Identity>() - 80usize];
    ["Alignment of GNB_Identity"][::std::mem::align_of::<GNB_Identity>() - 8usize];
    ["Offset of field: GNB_Identity::present"]
        [::std::mem::offset_of!(GNB_Identity, present) - 0usize];
    ["Offset of field: GNB_Identity::choice"]
        [::std::mem::offset_of!(GNB_Identity, choice) - 8usize];
    ["Offset of field: GNB_Identity::_asn_ctx"]
        [::std::mem::offset_of!(GNB_Identity, _asn_ctx) - 56usize];
};
pub type GNB_Identity_t = GNB_Identity;
unsafe extern "C" {
    pub static mut asn_DEF_GNB_Identity: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_GNB_Identity_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_GNB_Identity_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_GNB_Identity_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Global_GNB_ID {
    pub pLMN_Identity: PLMNidentity_t,
    pub gNB_ID: GNB_Identity_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Global_GNB_ID"][::std::mem::size_of::<Global_GNB_ID>() - 152usize];
    ["Alignment of Global_GNB_ID"][::std::mem::align_of::<Global_GNB_ID>() - 8usize];
    ["Offset of field: Global_GNB_ID::pLMN_Identity"]
        [::std::mem::offset_of!(Global_GNB_ID, pLMN_Identity) - 0usize];
    ["Offset of field: Global_GNB_ID::gNB_ID"]
        [::std::mem::offset_of!(Global_GNB_ID, gNB_ID) - 40usize];
    ["Offset of field: Global_GNB_ID::iE_Extensions"]
        [::std::mem::offset_of!(Global_GNB_ID, iE_Extensions) - 120usize];
    ["Offset of field: Global_GNB_ID::_asn_ctx"]
        [::std::mem::offset_of!(Global_GNB_ID, _asn_ctx) - 128usize];
};
pub type Global_GNB_ID_t = Global_GNB_ID;
unsafe extern "C" {
    pub static mut asn_DEF_Global_GNB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Global_GNB_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Global_GNB_ID_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct GNB {
    pub global_gNB_ID: Global_GNB_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GNB"][::std::mem::size_of::<GNB>() - 184usize];
    ["Alignment of GNB"][::std::mem::align_of::<GNB>() - 8usize];
    ["Offset of field: GNB::global_gNB_ID"][::std::mem::offset_of!(GNB, global_gNB_ID) - 0usize];
    ["Offset of field: GNB::iE_Extensions"][::std::mem::offset_of!(GNB, iE_Extensions) - 152usize];
    ["Offset of field: GNB::_asn_ctx"][::std::mem::offset_of!(GNB, _asn_ctx) - 160usize];
};
pub type GNB_t = GNB;
unsafe extern "C" {
    pub static mut asn_DEF_GNB: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_GNB_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_GNB_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct NG_eNB {
    pub global_ng_eNB_ID: Global_ENB_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NG_eNB"][::std::mem::size_of::<NG_eNB>() - 184usize];
    ["Alignment of NG_eNB"][::std::mem::align_of::<NG_eNB>() - 8usize];
    ["Offset of field: NG_eNB::global_ng_eNB_ID"]
        [::std::mem::offset_of!(NG_eNB, global_ng_eNB_ID) - 0usize];
    ["Offset of field: NG_eNB::iE_Extensions"]
        [::std::mem::offset_of!(NG_eNB, iE_Extensions) - 152usize];
    ["Offset of field: NG_eNB::_asn_ctx"][::std::mem::offset_of!(NG_eNB, _asn_ctx) - 160usize];
};
pub type NG_eNB_t = NG_eNB;
unsafe extern "C" {
    pub static mut asn_DEF_NG_eNB: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_NG_eNB_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_NG_eNB_1: [asn_TYPE_member_t; 2usize];
}
pub const Global_RAN_NODE_ID_PR_Global_RAN_NODE_ID_PR_NOTHING: Global_RAN_NODE_ID_PR = 0;
pub const Global_RAN_NODE_ID_PR_Global_RAN_NODE_ID_PR_gNB: Global_RAN_NODE_ID_PR = 1;
pub const Global_RAN_NODE_ID_PR_Global_RAN_NODE_ID_PR_ng_eNB: Global_RAN_NODE_ID_PR = 2;
pub type Global_RAN_NODE_ID_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Global_RAN_NODE_ID {
    pub present: Global_RAN_NODE_ID_PR,
    pub choice: Global_RAN_NODE_ID_Global_RAN_NODE_ID_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Global_RAN_NODE_ID_Global_RAN_NODE_ID_u {
    pub gNB: GNB_t,
    pub ng_eNB: NG_eNB_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Global_RAN_NODE_ID_Global_RAN_NODE_ID_u"]
        [::std::mem::size_of::<Global_RAN_NODE_ID_Global_RAN_NODE_ID_u>() - 184usize];
    ["Alignment of Global_RAN_NODE_ID_Global_RAN_NODE_ID_u"]
        [::std::mem::align_of::<Global_RAN_NODE_ID_Global_RAN_NODE_ID_u>() - 8usize];
    ["Offset of field: Global_RAN_NODE_ID_Global_RAN_NODE_ID_u::gNB"]
        [::std::mem::offset_of!(Global_RAN_NODE_ID_Global_RAN_NODE_ID_u, gNB) - 0usize];
    ["Offset of field: Global_RAN_NODE_ID_Global_RAN_NODE_ID_u::ng_eNB"]
        [::std::mem::offset_of!(Global_RAN_NODE_ID_Global_RAN_NODE_ID_u, ng_eNB) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Global_RAN_NODE_ID"][::std::mem::size_of::<Global_RAN_NODE_ID>() - 216usize];
    ["Alignment of Global_RAN_NODE_ID"][::std::mem::align_of::<Global_RAN_NODE_ID>() - 8usize];
    ["Offset of field: Global_RAN_NODE_ID::present"]
        [::std::mem::offset_of!(Global_RAN_NODE_ID, present) - 0usize];
    ["Offset of field: Global_RAN_NODE_ID::choice"]
        [::std::mem::offset_of!(Global_RAN_NODE_ID, choice) - 8usize];
    ["Offset of field: Global_RAN_NODE_ID::_asn_ctx"]
        [::std::mem::offset_of!(Global_RAN_NODE_ID, _asn_ctx) - 192usize];
};
pub type Global_RAN_NODE_ID_t = Global_RAN_NODE_ID;
unsafe extern "C" {
    pub static mut asn_DEF_Global_RAN_NODE_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Global_RAN_NODE_ID_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Global_RAN_NODE_ID_1: [asn_TYPE_member_t; 2usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_Global_RAN_NODE_ID_constr_1: asn_per_constraints_t;
}
pub type RAN_UE_NGAP_ID_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub static mut asn_PER_type_RAN_UE_NGAP_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_RAN_UE_NGAP_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_RAN_UE_NGAP_ID_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAN_UE_NGAP_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ContextatSource {
    pub sourceNG_RAN_node_ID: Global_RAN_NODE_ID_t,
    pub rAN_UE_NGAP_ID: RAN_UE_NGAP_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ContextatSource"][::std::mem::size_of::<ContextatSource>() - 256usize];
    ["Alignment of ContextatSource"][::std::mem::align_of::<ContextatSource>() - 8usize];
    ["Offset of field: ContextatSource::sourceNG_RAN_node_ID"]
        [::std::mem::offset_of!(ContextatSource, sourceNG_RAN_node_ID) - 0usize];
    ["Offset of field: ContextatSource::rAN_UE_NGAP_ID"]
        [::std::mem::offset_of!(ContextatSource, rAN_UE_NGAP_ID) - 216usize];
    ["Offset of field: ContextatSource::iE_Extensions"]
        [::std::mem::offset_of!(ContextatSource, iE_Extensions) - 224usize];
    ["Offset of field: ContextatSource::_asn_ctx"]
        [::std::mem::offset_of!(ContextatSource, _asn_ctx) - 232usize];
};
pub type ContextatSource_t = ContextatSource;
unsafe extern "C" {
    pub static mut asn_DEF_ContextatSource: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellIdListforQMC {
    pub list: CellIdListforQMC__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellIdListforQMC__bindgen_ty_1 {
    pub array: *mut *mut EUTRAN_CGI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EUTRAN_CGI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellIdListforQMC__bindgen_ty_1"]
        [::std::mem::size_of::<CellIdListforQMC__bindgen_ty_1>() - 24usize];
    ["Alignment of CellIdListforQMC__bindgen_ty_1"]
        [::std::mem::align_of::<CellIdListforQMC__bindgen_ty_1>() - 8usize];
    ["Offset of field: CellIdListforQMC__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CellIdListforQMC__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CellIdListforQMC__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CellIdListforQMC__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CellIdListforQMC__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CellIdListforQMC__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CellIdListforQMC__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CellIdListforQMC__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellIdListforQMC"][::std::mem::size_of::<CellIdListforQMC>() - 48usize];
    ["Alignment of CellIdListforQMC"][::std::mem::align_of::<CellIdListforQMC>() - 8usize];
    ["Offset of field: CellIdListforQMC::list"]
        [::std::mem::offset_of!(CellIdListforQMC, list) - 0usize];
    ["Offset of field: CellIdListforQMC::_asn_ctx"]
        [::std::mem::offset_of!(CellIdListforQMC, _asn_ctx) - 24usize];
};
pub type CellIdListforQMC_t = CellIdListforQMC;
unsafe extern "C" {
    pub static mut asn_DEF_CellIdListforQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellIdListforQMC_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellIdListforQMC_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CellIdListforQMC_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellID_Broadcast_Item {
    pub eCGI: EUTRAN_CGI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellID_Broadcast_Item"][::std::mem::size_of::<CellID_Broadcast_Item>() - 152usize];
    ["Alignment of CellID_Broadcast_Item"]
        [::std::mem::align_of::<CellID_Broadcast_Item>() - 8usize];
    ["Offset of field: CellID_Broadcast_Item::eCGI"]
        [::std::mem::offset_of!(CellID_Broadcast_Item, eCGI) - 0usize];
    ["Offset of field: CellID_Broadcast_Item::iE_Extensions"]
        [::std::mem::offset_of!(CellID_Broadcast_Item, iE_Extensions) - 120usize];
    ["Offset of field: CellID_Broadcast_Item::_asn_ctx"]
        [::std::mem::offset_of!(CellID_Broadcast_Item, _asn_ctx) - 128usize];
};
pub type CellID_Broadcast_Item_t = CellID_Broadcast_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CellID_Broadcast_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellID_Broadcast_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellID_Broadcast_Item_1: [asn_TYPE_member_t; 2usize];
}
pub type ReceiveStatusofULPDCPSDUs_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_ReceiveStatusofULPDCPSDUs_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ReceiveStatusofULPDCPSDUs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusofULPDCPSDUs_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABToBeModifiedListBearerModInd_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeModifiedListBearerModInd: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeModifiedListBearerModInd_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MME_UE_S1AP_ID_t = ::std::os::raw::c_ulong;
unsafe extern "C" {
    pub static mut asn_PER_type_MME_UE_S1AP_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_MME_UE_S1AP_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_MME_UE_S1AP_ID_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MME_UE_S1AP_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type ENB_UE_S1AP_ID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ENB_UE_S1AP_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ENB_UE_S1AP_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ENB_UE_S1AP_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_S1AP_ID_pair {
    pub mME_UE_S1AP_ID: MME_UE_S1AP_ID_t,
    pub eNB_UE_S1AP_ID: ENB_UE_S1AP_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_S1AP_ID_pair"][::std::mem::size_of::<UE_S1AP_ID_pair>() - 48usize];
    ["Alignment of UE_S1AP_ID_pair"][::std::mem::align_of::<UE_S1AP_ID_pair>() - 8usize];
    ["Offset of field: UE_S1AP_ID_pair::mME_UE_S1AP_ID"]
        [::std::mem::offset_of!(UE_S1AP_ID_pair, mME_UE_S1AP_ID) - 0usize];
    ["Offset of field: UE_S1AP_ID_pair::eNB_UE_S1AP_ID"]
        [::std::mem::offset_of!(UE_S1AP_ID_pair, eNB_UE_S1AP_ID) - 8usize];
    ["Offset of field: UE_S1AP_ID_pair::iE_Extensions"]
        [::std::mem::offset_of!(UE_S1AP_ID_pair, iE_Extensions) - 16usize];
    ["Offset of field: UE_S1AP_ID_pair::_asn_ctx"]
        [::std::mem::offset_of!(UE_S1AP_ID_pair, _asn_ctx) - 24usize];
};
pub type UE_S1AP_ID_pair_t = UE_S1AP_ID_pair;
unsafe extern "C" {
    pub static mut asn_DEF_UE_S1AP_ID_pair: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UE_S1AP_ID_pair_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UE_S1AP_ID_pair_1: [asn_TYPE_member_t; 3usize];
}
pub const UE_S1AP_IDs_PR_UE_S1AP_IDs_PR_NOTHING: UE_S1AP_IDs_PR = 0;
pub const UE_S1AP_IDs_PR_UE_S1AP_IDs_PR_uE_S1AP_ID_pair: UE_S1AP_IDs_PR = 1;
pub const UE_S1AP_IDs_PR_UE_S1AP_IDs_PR_mME_UE_S1AP_ID: UE_S1AP_IDs_PR = 2;
pub type UE_S1AP_IDs_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UE_S1AP_IDs {
    pub present: UE_S1AP_IDs_PR,
    pub choice: UE_S1AP_IDs_UE_S1AP_IDs_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union UE_S1AP_IDs_UE_S1AP_IDs_u {
    pub uE_S1AP_ID_pair: UE_S1AP_ID_pair_t,
    pub mME_UE_S1AP_ID: MME_UE_S1AP_ID_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_S1AP_IDs_UE_S1AP_IDs_u"]
        [::std::mem::size_of::<UE_S1AP_IDs_UE_S1AP_IDs_u>() - 48usize];
    ["Alignment of UE_S1AP_IDs_UE_S1AP_IDs_u"]
        [::std::mem::align_of::<UE_S1AP_IDs_UE_S1AP_IDs_u>() - 8usize];
    ["Offset of field: UE_S1AP_IDs_UE_S1AP_IDs_u::uE_S1AP_ID_pair"]
        [::std::mem::offset_of!(UE_S1AP_IDs_UE_S1AP_IDs_u, uE_S1AP_ID_pair) - 0usize];
    ["Offset of field: UE_S1AP_IDs_UE_S1AP_IDs_u::mME_UE_S1AP_ID"]
        [::std::mem::offset_of!(UE_S1AP_IDs_UE_S1AP_IDs_u, mME_UE_S1AP_ID) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_S1AP_IDs"][::std::mem::size_of::<UE_S1AP_IDs>() - 80usize];
    ["Alignment of UE_S1AP_IDs"][::std::mem::align_of::<UE_S1AP_IDs>() - 8usize];
    ["Offset of field: UE_S1AP_IDs::present"]
        [::std::mem::offset_of!(UE_S1AP_IDs, present) - 0usize];
    ["Offset of field: UE_S1AP_IDs::choice"][::std::mem::offset_of!(UE_S1AP_IDs, choice) - 8usize];
    ["Offset of field: UE_S1AP_IDs::_asn_ctx"]
        [::std::mem::offset_of!(UE_S1AP_IDs, _asn_ctx) - 56usize];
};
pub type UE_S1AP_IDs_t = UE_S1AP_IDs;
unsafe extern "C" {
    pub static mut asn_DEF_UE_S1AP_IDs: asn_TYPE_descriptor_t;
}
pub type Threshold_RSRP_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Threshold_RSRP_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Threshold_RSRP: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Threshold_RSRP_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRP_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type Threshold_RSRQ_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Threshold_RSRQ_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Threshold_RSRQ: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Threshold_RSRQ_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const MeasurementThresholdL1LoggedMDT_PR_MeasurementThresholdL1LoggedMDT_PR_NOTHING:
    MeasurementThresholdL1LoggedMDT_PR = 0;
pub const MeasurementThresholdL1LoggedMDT_PR_MeasurementThresholdL1LoggedMDT_PR_threshold_RSRP:
    MeasurementThresholdL1LoggedMDT_PR = 1;
pub const MeasurementThresholdL1LoggedMDT_PR_MeasurementThresholdL1LoggedMDT_PR_threshold_RSRQ:
    MeasurementThresholdL1LoggedMDT_PR = 2;
pub const MeasurementThresholdL1LoggedMDT_PR_MeasurementThresholdL1LoggedMDT_PR_choice_Extensions : MeasurementThresholdL1LoggedMDT_PR = 3 ;
pub type MeasurementThresholdL1LoggedMDT_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MeasurementThresholdL1LoggedMDT {
    pub present: MeasurementThresholdL1LoggedMDT_PR,
    pub choice: MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u {
    pub threshold_RSRP: Threshold_RSRP_t,
    pub threshold_RSRQ: Threshold_RSRQ_t,
    pub choice_Extensions: ProtocolIE_SingleContainer_8146P0_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u"]
        [::std::mem::size_of::<MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u>(
        ) - 72usize];
    ["Alignment of MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u"]
        [::std::mem::align_of::<MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u>(
        ) - 8usize];
    ["Offset of field: MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u::threshold_RSRP"] [:: std :: mem :: offset_of ! (MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u , threshold_RSRP) - 0usize] ;
    ["Offset of field: MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u::threshold_RSRQ"] [:: std :: mem :: offset_of ! (MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u , threshold_RSRQ) - 0usize] ;
    ["Offset of field: MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u::choice_Extensions"] [:: std :: mem :: offset_of ! (MeasurementThresholdL1LoggedMDT_MeasurementThresholdL1LoggedMDT_u , choice_Extensions) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MeasurementThresholdL1LoggedMDT"]
        [::std::mem::size_of::<MeasurementThresholdL1LoggedMDT>() - 104usize];
    ["Alignment of MeasurementThresholdL1LoggedMDT"]
        [::std::mem::align_of::<MeasurementThresholdL1LoggedMDT>() - 8usize];
    ["Offset of field: MeasurementThresholdL1LoggedMDT::present"]
        [::std::mem::offset_of!(MeasurementThresholdL1LoggedMDT, present) - 0usize];
    ["Offset of field: MeasurementThresholdL1LoggedMDT::choice"]
        [::std::mem::offset_of!(MeasurementThresholdL1LoggedMDT, choice) - 8usize];
    ["Offset of field: MeasurementThresholdL1LoggedMDT::_asn_ctx"]
        [::std::mem::offset_of!(MeasurementThresholdL1LoggedMDT, _asn_ctx) - 80usize];
};
pub type MeasurementThresholdL1LoggedMDT_t = MeasurementThresholdL1LoggedMDT;
unsafe extern "C" {
    pub static mut asn_DEF_MeasurementThresholdL1LoggedMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MeasurementThresholdL1LoggedMDT_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MeasurementThresholdL1LoggedMDT_1: [asn_TYPE_member_t; 3usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_MeasurementThresholdL1LoggedMDT_constr_1: asn_per_constraints_t;
}
pub type Hysteresis_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Hysteresis_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Hysteresis: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Hysteresis_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Hysteresis_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Hysteresis_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Hysteresis_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Hysteresis_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Hysteresis_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Hysteresis_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Hysteresis_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Hysteresis_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Hysteresis_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Hysteresis_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const TimeToTrigger_TimeToTrigger_ms0: TimeToTrigger = 0;
pub const TimeToTrigger_TimeToTrigger_ms40: TimeToTrigger = 1;
pub const TimeToTrigger_TimeToTrigger_ms64: TimeToTrigger = 2;
pub const TimeToTrigger_TimeToTrigger_ms80: TimeToTrigger = 3;
pub const TimeToTrigger_TimeToTrigger_ms100: TimeToTrigger = 4;
pub const TimeToTrigger_TimeToTrigger_ms128: TimeToTrigger = 5;
pub const TimeToTrigger_TimeToTrigger_ms160: TimeToTrigger = 6;
pub const TimeToTrigger_TimeToTrigger_ms256: TimeToTrigger = 7;
pub const TimeToTrigger_TimeToTrigger_ms320: TimeToTrigger = 8;
pub const TimeToTrigger_TimeToTrigger_ms480: TimeToTrigger = 9;
pub const TimeToTrigger_TimeToTrigger_ms512: TimeToTrigger = 10;
pub const TimeToTrigger_TimeToTrigger_ms640: TimeToTrigger = 11;
pub const TimeToTrigger_TimeToTrigger_ms1024: TimeToTrigger = 12;
pub const TimeToTrigger_TimeToTrigger_ms1280: TimeToTrigger = 13;
pub const TimeToTrigger_TimeToTrigger_ms2560: TimeToTrigger = 14;
pub const TimeToTrigger_TimeToTrigger_ms5120: TimeToTrigger = 15;
pub type TimeToTrigger = ::std::os::raw::c_uint;
pub use self::TimeToTrigger as e_TimeToTrigger;
pub type TimeToTrigger_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_TimeToTrigger_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_TimeToTrigger: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_TimeToTrigger_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TimeToTrigger_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TimeToTrigger_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TimeToTrigger_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToTrigger_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EventL1LoggedMDTConfig {
    pub l1Threshold: MeasurementThresholdL1LoggedMDT_t,
    pub hysteresis: Hysteresis_t,
    pub timeToTrigger: TimeToTrigger_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EventL1LoggedMDTConfig"][::std::mem::size_of::<EventL1LoggedMDTConfig>() - 152usize];
    ["Alignment of EventL1LoggedMDTConfig"]
        [::std::mem::align_of::<EventL1LoggedMDTConfig>() - 8usize];
    ["Offset of field: EventL1LoggedMDTConfig::l1Threshold"]
        [::std::mem::offset_of!(EventL1LoggedMDTConfig, l1Threshold) - 0usize];
    ["Offset of field: EventL1LoggedMDTConfig::hysteresis"]
        [::std::mem::offset_of!(EventL1LoggedMDTConfig, hysteresis) - 104usize];
    ["Offset of field: EventL1LoggedMDTConfig::timeToTrigger"]
        [::std::mem::offset_of!(EventL1LoggedMDTConfig, timeToTrigger) - 112usize];
    ["Offset of field: EventL1LoggedMDTConfig::iE_Extensions"]
        [::std::mem::offset_of!(EventL1LoggedMDTConfig, iE_Extensions) - 120usize];
    ["Offset of field: EventL1LoggedMDTConfig::_asn_ctx"]
        [::std::mem::offset_of!(EventL1LoggedMDTConfig, _asn_ctx) - 128usize];
};
pub type EventL1LoggedMDTConfig_t = EventL1LoggedMDTConfig;
unsafe extern "C" {
    pub static mut asn_DEF_EventL1LoggedMDTConfig: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EventL1LoggedMDTConfig_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EventL1LoggedMDTConfig_1: [asn_TYPE_member_t; 4usize];
}
pub const EventTrigger_PR_EventTrigger_PR_NOTHING: EventTrigger_PR = 0;
pub const EventTrigger_PR_EventTrigger_PR_outOfCoverage: EventTrigger_PR = 1;
pub const EventTrigger_PR_EventTrigger_PR_eventL1LoggedMDTConfig: EventTrigger_PR = 2;
pub const EventTrigger_PR_EventTrigger_PR_choice_Extensions: EventTrigger_PR = 3;
pub type EventTrigger_PR = ::std::os::raw::c_uint;
pub const EventTrigger__outOfCoverage_EventTrigger__outOfCoverage_true:
    EventTrigger__outOfCoverage = 0;
pub type EventTrigger__outOfCoverage = ::std::os::raw::c_uint;
pub use self::EventTrigger__outOfCoverage as e_EventTrigger__outOfCoverage;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct EventTrigger {
    pub present: EventTrigger_PR,
    pub choice: EventTrigger_EventTrigger_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union EventTrigger_EventTrigger_u {
    pub outOfCoverage: ::std::os::raw::c_long,
    pub eventL1LoggedMDTConfig: EventL1LoggedMDTConfig_t,
    pub choice_Extensions: ProtocolIE_SingleContainer_8146P0_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EventTrigger_EventTrigger_u"]
        [::std::mem::size_of::<EventTrigger_EventTrigger_u>() - 152usize];
    ["Alignment of EventTrigger_EventTrigger_u"]
        [::std::mem::align_of::<EventTrigger_EventTrigger_u>() - 8usize];
    ["Offset of field: EventTrigger_EventTrigger_u::outOfCoverage"]
        [::std::mem::offset_of!(EventTrigger_EventTrigger_u, outOfCoverage) - 0usize];
    ["Offset of field: EventTrigger_EventTrigger_u::eventL1LoggedMDTConfig"]
        [::std::mem::offset_of!(EventTrigger_EventTrigger_u, eventL1LoggedMDTConfig) - 0usize];
    ["Offset of field: EventTrigger_EventTrigger_u::choice_Extensions"]
        [::std::mem::offset_of!(EventTrigger_EventTrigger_u, choice_Extensions) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EventTrigger"][::std::mem::size_of::<EventTrigger>() - 184usize];
    ["Alignment of EventTrigger"][::std::mem::align_of::<EventTrigger>() - 8usize];
    ["Offset of field: EventTrigger::present"]
        [::std::mem::offset_of!(EventTrigger, present) - 0usize];
    ["Offset of field: EventTrigger::choice"]
        [::std::mem::offset_of!(EventTrigger, choice) - 8usize];
    ["Offset of field: EventTrigger::_asn_ctx"]
        [::std::mem::offset_of!(EventTrigger, _asn_ctx) - 160usize];
};
pub type EventTrigger_t = EventTrigger;
unsafe extern "C" {
    pub static mut asn_DEF_EventTrigger: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EventTrigger_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EventTrigger_1: [asn_TYPE_member_t; 3usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_EventTrigger_constr_1: asn_per_constraints_t;
}
pub type Cdma2000OneXMEID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000OneXMEID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXMEID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const WLANMeasConfig_WLANMeasConfig_setup: WLANMeasConfig = 0;
pub type WLANMeasConfig = ::std::os::raw::c_uint;
pub use self::WLANMeasConfig as e_WLANMeasConfig;
pub type WLANMeasConfig_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_WLANMeasConfig_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_WLANMeasConfig: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_WLANMeasConfig_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn WLANMeasConfig_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANMeasConfig_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type UL_NAS_Count_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_UL_NAS_Count_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_UL_NAS_Count: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UL_NAS_Count_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_Count_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ProSeDirectDiscovery_ProSeDirectDiscovery_authorized: ProSeDirectDiscovery = 0;
pub const ProSeDirectDiscovery_ProSeDirectDiscovery_not_authorized: ProSeDirectDiscovery = 1;
pub type ProSeDirectDiscovery = ::std::os::raw::c_uint;
pub use self::ProSeDirectDiscovery as e_ProSeDirectDiscovery;
pub type ProSeDirectDiscovery_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ProSeDirectDiscovery_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ProSeDirectDiscovery: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ProSeDirectDiscovery_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeDirectDiscovery_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const RACSIndication_RACSIndication_true: RACSIndication = 0;
pub type RACSIndication = ::std::os::raw::c_uint;
pub use self::RACSIndication as e_RACSIndication;
pub type RACSIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_RACSIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RACSIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RACSIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RACSIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RACSIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RACSIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RACSIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RACSIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RACSIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RACSIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RACSIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RACSIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type L3_Information_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_L3_Information: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn L3_Information_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn L3_Information_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn L3_Information_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn L3_Information_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn L3_Information_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn L3_Information_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn L3_Information_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn L3_Information_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn L3_Information_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn L3_Information_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn L3_Information_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MeasurementsToActivate_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_MeasurementsToActivate_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_MeasurementsToActivate: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MeasurementsToActivate_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const M1ReportingTrigger_M1ReportingTrigger_periodic: M1ReportingTrigger = 0;
pub const M1ReportingTrigger_M1ReportingTrigger_a2eventtriggered: M1ReportingTrigger = 1;
pub const M1ReportingTrigger_M1ReportingTrigger_a2eventtriggered_periodic: M1ReportingTrigger = 2;
pub type M1ReportingTrigger = ::std::os::raw::c_uint;
pub use self::M1ReportingTrigger as e_M1ReportingTrigger;
pub type M1ReportingTrigger_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_M1ReportingTrigger_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M1ReportingTrigger: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_M1ReportingTrigger_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M1ReportingTrigger_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ImmediateMDT {
    pub measurementsToActivate: MeasurementsToActivate_t,
    pub m1reportingTrigger: M1ReportingTrigger_t,
    pub m1thresholdeventA2: *mut M1ThresholdEventA2,
    pub m1periodicReporting: *mut M1PeriodicReporting,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ImmediateMDT"][::std::mem::size_of::<ImmediateMDT>() - 104usize];
    ["Alignment of ImmediateMDT"][::std::mem::align_of::<ImmediateMDT>() - 8usize];
    ["Offset of field: ImmediateMDT::measurementsToActivate"]
        [::std::mem::offset_of!(ImmediateMDT, measurementsToActivate) - 0usize];
    ["Offset of field: ImmediateMDT::m1reportingTrigger"]
        [::std::mem::offset_of!(ImmediateMDT, m1reportingTrigger) - 48usize];
    ["Offset of field: ImmediateMDT::m1thresholdeventA2"]
        [::std::mem::offset_of!(ImmediateMDT, m1thresholdeventA2) - 56usize];
    ["Offset of field: ImmediateMDT::m1periodicReporting"]
        [::std::mem::offset_of!(ImmediateMDT, m1periodicReporting) - 64usize];
    ["Offset of field: ImmediateMDT::iE_Extensions"]
        [::std::mem::offset_of!(ImmediateMDT, iE_Extensions) - 72usize];
    ["Offset of field: ImmediateMDT::_asn_ctx"]
        [::std::mem::offset_of!(ImmediateMDT, _asn_ctx) - 80usize];
};
pub type ImmediateMDT_t = ImmediateMDT;
unsafe extern "C" {
    pub static mut asn_DEF_ImmediateMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ImmediateMDT_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ImmediateMDT_1: [asn_TYPE_member_t; 5usize];
}
pub const MeasurementThresholdA2_PR_MeasurementThresholdA2_PR_NOTHING: MeasurementThresholdA2_PR =
    0;
pub const MeasurementThresholdA2_PR_MeasurementThresholdA2_PR_threshold_RSRP:
    MeasurementThresholdA2_PR = 1;
pub const MeasurementThresholdA2_PR_MeasurementThresholdA2_PR_threshold_RSRQ:
    MeasurementThresholdA2_PR = 2;
pub type MeasurementThresholdA2_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MeasurementThresholdA2 {
    pub present: MeasurementThresholdA2_PR,
    pub choice: MeasurementThresholdA2_MeasurementThresholdA2_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MeasurementThresholdA2_MeasurementThresholdA2_u {
    pub threshold_RSRP: Threshold_RSRP_t,
    pub threshold_RSRQ: Threshold_RSRQ_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MeasurementThresholdA2_MeasurementThresholdA2_u"]
        [::std::mem::size_of::<MeasurementThresholdA2_MeasurementThresholdA2_u>() - 8usize];
    ["Alignment of MeasurementThresholdA2_MeasurementThresholdA2_u"]
        [::std::mem::align_of::<MeasurementThresholdA2_MeasurementThresholdA2_u>() - 8usize];
    ["Offset of field: MeasurementThresholdA2_MeasurementThresholdA2_u::threshold_RSRP"][::std::mem::offset_of!(
        MeasurementThresholdA2_MeasurementThresholdA2_u,
        threshold_RSRP
    )
        - 0usize];
    ["Offset of field: MeasurementThresholdA2_MeasurementThresholdA2_u::threshold_RSRQ"][::std::mem::offset_of!(
        MeasurementThresholdA2_MeasurementThresholdA2_u,
        threshold_RSRQ
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MeasurementThresholdA2"][::std::mem::size_of::<MeasurementThresholdA2>() - 40usize];
    ["Alignment of MeasurementThresholdA2"]
        [::std::mem::align_of::<MeasurementThresholdA2>() - 8usize];
    ["Offset of field: MeasurementThresholdA2::present"]
        [::std::mem::offset_of!(MeasurementThresholdA2, present) - 0usize];
    ["Offset of field: MeasurementThresholdA2::choice"]
        [::std::mem::offset_of!(MeasurementThresholdA2, choice) - 8usize];
    ["Offset of field: MeasurementThresholdA2::_asn_ctx"]
        [::std::mem::offset_of!(MeasurementThresholdA2, _asn_ctx) - 16usize];
};
pub type MeasurementThresholdA2_t = MeasurementThresholdA2;
unsafe extern "C" {
    pub static mut asn_DEF_MeasurementThresholdA2: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MeasurementThresholdA2_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MeasurementThresholdA2_1: [asn_TYPE_member_t; 2usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_MeasurementThresholdA2_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct M1ThresholdEventA2 {
    pub measurementThreshold: MeasurementThresholdA2_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of M1ThresholdEventA2"][::std::mem::size_of::<M1ThresholdEventA2>() - 72usize];
    ["Alignment of M1ThresholdEventA2"][::std::mem::align_of::<M1ThresholdEventA2>() - 8usize];
    ["Offset of field: M1ThresholdEventA2::measurementThreshold"]
        [::std::mem::offset_of!(M1ThresholdEventA2, measurementThreshold) - 0usize];
    ["Offset of field: M1ThresholdEventA2::iE_Extensions"]
        [::std::mem::offset_of!(M1ThresholdEventA2, iE_Extensions) - 40usize];
    ["Offset of field: M1ThresholdEventA2::_asn_ctx"]
        [::std::mem::offset_of!(M1ThresholdEventA2, _asn_ctx) - 48usize];
};
pub type M1ThresholdEventA2_t = M1ThresholdEventA2;
unsafe extern "C" {
    pub static mut asn_DEF_M1ThresholdEventA2: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_M1ThresholdEventA2_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_M1ThresholdEventA2_1: [asn_TYPE_member_t; 2usize];
}
pub type MDTMode_Extension_t = ProtocolIE_SingleContainer_8146P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_MDTMode_Extension: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MDTMode_Extension_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDTMode_Extension_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const MDTMode_PR_MDTMode_PR_NOTHING: MDTMode_PR = 0;
pub const MDTMode_PR_MDTMode_PR_immediateMDT: MDTMode_PR = 1;
pub const MDTMode_PR_MDTMode_PR_loggedMDT: MDTMode_PR = 2;
pub const MDTMode_PR_MDTMode_PR_mDTMode_Extension: MDTMode_PR = 3;
pub type MDTMode_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MDTMode {
    pub present: MDTMode_PR,
    pub choice: MDTMode_MDTMode_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MDTMode_MDTMode_u {
    pub immediateMDT: ImmediateMDT_t,
    pub loggedMDT: LoggedMDT_t,
    pub mDTMode_Extension: MDTMode_Extension_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MDTMode_MDTMode_u"][::std::mem::size_of::<MDTMode_MDTMode_u>() - 104usize];
    ["Alignment of MDTMode_MDTMode_u"][::std::mem::align_of::<MDTMode_MDTMode_u>() - 8usize];
    ["Offset of field: MDTMode_MDTMode_u::immediateMDT"]
        [::std::mem::offset_of!(MDTMode_MDTMode_u, immediateMDT) - 0usize];
    ["Offset of field: MDTMode_MDTMode_u::loggedMDT"]
        [::std::mem::offset_of!(MDTMode_MDTMode_u, loggedMDT) - 0usize];
    ["Offset of field: MDTMode_MDTMode_u::mDTMode_Extension"]
        [::std::mem::offset_of!(MDTMode_MDTMode_u, mDTMode_Extension) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MDTMode"][::std::mem::size_of::<MDTMode>() - 136usize];
    ["Alignment of MDTMode"][::std::mem::align_of::<MDTMode>() - 8usize];
    ["Offset of field: MDTMode::present"][::std::mem::offset_of!(MDTMode, present) - 0usize];
    ["Offset of field: MDTMode::choice"][::std::mem::offset_of!(MDTMode, choice) - 8usize];
    ["Offset of field: MDTMode::_asn_ctx"][::std::mem::offset_of!(MDTMode, _asn_ctx) - 112usize];
};
pub type MDTMode_t = MDTMode;
unsafe extern "C" {
    pub static mut asn_DEF_MDTMode: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MDTMode_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MDTMode_1: [asn_TYPE_member_t; 3usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_MDTMode_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBIndirectX2TransportLayerAddresses {
    pub list: ENBIndirectX2TransportLayerAddresses__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBIndirectX2TransportLayerAddresses__bindgen_ty_1 {
    pub array: *mut *mut TransportLayerAddress_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TransportLayerAddress_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBIndirectX2TransportLayerAddresses__bindgen_ty_1"]
        [::std::mem::size_of::<ENBIndirectX2TransportLayerAddresses__bindgen_ty_1>() - 24usize];
    ["Alignment of ENBIndirectX2TransportLayerAddresses__bindgen_ty_1"]
        [::std::mem::align_of::<ENBIndirectX2TransportLayerAddresses__bindgen_ty_1>() - 8usize];
    ["Offset of field: ENBIndirectX2TransportLayerAddresses__bindgen_ty_1::array"][::std::mem::offset_of!(
        ENBIndirectX2TransportLayerAddresses__bindgen_ty_1,
        array
    ) - 0usize];
    ["Offset of field: ENBIndirectX2TransportLayerAddresses__bindgen_ty_1::count"][::std::mem::offset_of!(
        ENBIndirectX2TransportLayerAddresses__bindgen_ty_1,
        count
    ) - 8usize];
    ["Offset of field: ENBIndirectX2TransportLayerAddresses__bindgen_ty_1::size"][::std::mem::offset_of!(
        ENBIndirectX2TransportLayerAddresses__bindgen_ty_1,
        size
    ) - 12usize];
    ["Offset of field: ENBIndirectX2TransportLayerAddresses__bindgen_ty_1::free"][::std::mem::offset_of!(
        ENBIndirectX2TransportLayerAddresses__bindgen_ty_1,
        free
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBIndirectX2TransportLayerAddresses"]
        [::std::mem::size_of::<ENBIndirectX2TransportLayerAddresses>() - 48usize];
    ["Alignment of ENBIndirectX2TransportLayerAddresses"]
        [::std::mem::align_of::<ENBIndirectX2TransportLayerAddresses>() - 8usize];
    ["Offset of field: ENBIndirectX2TransportLayerAddresses::list"]
        [::std::mem::offset_of!(ENBIndirectX2TransportLayerAddresses, list) - 0usize];
    ["Offset of field: ENBIndirectX2TransportLayerAddresses::_asn_ctx"]
        [::std::mem::offset_of!(ENBIndirectX2TransportLayerAddresses, _asn_ctx) - 24usize];
};
pub type ENBIndirectX2TransportLayerAddresses_t = ENBIndirectX2TransportLayerAddresses;
unsafe extern "C" {
    pub static mut asn_DEF_ENBIndirectX2TransportLayerAddresses: asn_TYPE_descriptor_t;
}
pub const RAT_Type_RAT_Type_nbiot: RAT_Type = 0;
pub const RAT_Type_RAT_Type_nbiot_leo: RAT_Type = 1;
pub const RAT_Type_RAT_Type_nbiot_meo: RAT_Type = 2;
pub const RAT_Type_RAT_Type_nbiot_geo: RAT_Type = 3;
pub const RAT_Type_RAT_Type_nbiot_othersat: RAT_Type = 4;
pub const RAT_Type_RAT_Type_eutran_leo: RAT_Type = 5;
pub const RAT_Type_RAT_Type_eutran_meo: RAT_Type = 6;
pub const RAT_Type_RAT_Type_eutran_geo: RAT_Type = 7;
pub const RAT_Type_RAT_Type_eutran_othersat: RAT_Type = 8;
pub type RAT_Type = ::std::os::raw::c_uint;
pub use self::RAT_Type as e_RAT_Type;
pub type RAT_Type_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_RAT_Type: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RAT_Type_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RAT_Type_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RAT_Type_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RAT_Type_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAT_Type_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAT_Type_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAT_Type_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAT_Type_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAT_Type_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RAT_Type_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RAT_Type_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type Extended_UEIdentityIndexValue_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Extended_UEIdentityIndexValue: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Extended_UEIdentityIndexValue_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BluetoothMeasConfigNameList {
    pub list: BluetoothMeasConfigNameList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BluetoothMeasConfigNameList__bindgen_ty_1 {
    pub array: *mut *mut BluetoothName_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut BluetoothName_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BluetoothMeasConfigNameList__bindgen_ty_1"]
        [::std::mem::size_of::<BluetoothMeasConfigNameList__bindgen_ty_1>() - 24usize];
    ["Alignment of BluetoothMeasConfigNameList__bindgen_ty_1"]
        [::std::mem::align_of::<BluetoothMeasConfigNameList__bindgen_ty_1>() - 8usize];
    ["Offset of field: BluetoothMeasConfigNameList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(BluetoothMeasConfigNameList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: BluetoothMeasConfigNameList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(BluetoothMeasConfigNameList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: BluetoothMeasConfigNameList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(BluetoothMeasConfigNameList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: BluetoothMeasConfigNameList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(BluetoothMeasConfigNameList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BluetoothMeasConfigNameList"]
        [::std::mem::size_of::<BluetoothMeasConfigNameList>() - 48usize];
    ["Alignment of BluetoothMeasConfigNameList"]
        [::std::mem::align_of::<BluetoothMeasConfigNameList>() - 8usize];
    ["Offset of field: BluetoothMeasConfigNameList::list"]
        [::std::mem::offset_of!(BluetoothMeasConfigNameList, list) - 0usize];
    ["Offset of field: BluetoothMeasConfigNameList::_asn_ctx"]
        [::std::mem::offset_of!(BluetoothMeasConfigNameList, _asn_ctx) - 24usize];
};
pub type BluetoothMeasConfigNameList_t = BluetoothMeasConfigNameList;
unsafe extern "C" {
    pub static mut asn_DEF_BluetoothMeasConfigNameList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_BluetoothMeasConfigNameList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_BluetoothMeasConfigNameList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_BluetoothMeasConfigNameList_constr_1: asn_per_constraints_t;
}
pub const HandoverType_HandoverType_intralte: HandoverType = 0;
pub const HandoverType_HandoverType_ltetoutran: HandoverType = 1;
pub const HandoverType_HandoverType_ltetogeran: HandoverType = 2;
pub const HandoverType_HandoverType_utrantolte: HandoverType = 3;
pub const HandoverType_HandoverType_gerantolte: HandoverType = 4;
pub const HandoverType_HandoverType_eps_to_5gs: HandoverType = 5;
pub const HandoverType_HandoverType_fivegs_to_eps: HandoverType = 6;
pub type HandoverType = ::std::os::raw::c_uint;
pub use self::HandoverType as e_HandoverType;
pub type HandoverType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn HandoverType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn HandoverType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HandoverType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HandoverType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HandoverType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HandoverType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HandoverType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type PDCP_SNlength18_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PDCP_SNlength18_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PDCP_SNlength18: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNlength18_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type HFNforPDCP_SNlength18_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_HFNforPDCP_SNlength18_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_HFNforPDCP_SNlength18: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNforPDCP_SNlength18_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COUNTvaluePDCP_SNlength18 {
    pub pDCP_SNlength18: PDCP_SNlength18_t,
    pub hFNforPDCP_SNlength18: HFNforPDCP_SNlength18_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COUNTvaluePDCP_SNlength18"]
        [::std::mem::size_of::<COUNTvaluePDCP_SNlength18>() - 48usize];
    ["Alignment of COUNTvaluePDCP_SNlength18"]
        [::std::mem::align_of::<COUNTvaluePDCP_SNlength18>() - 8usize];
    ["Offset of field: COUNTvaluePDCP_SNlength18::pDCP_SNlength18"]
        [::std::mem::offset_of!(COUNTvaluePDCP_SNlength18, pDCP_SNlength18) - 0usize];
    ["Offset of field: COUNTvaluePDCP_SNlength18::hFNforPDCP_SNlength18"]
        [::std::mem::offset_of!(COUNTvaluePDCP_SNlength18, hFNforPDCP_SNlength18) - 8usize];
    ["Offset of field: COUNTvaluePDCP_SNlength18::iE_Extensions"]
        [::std::mem::offset_of!(COUNTvaluePDCP_SNlength18, iE_Extensions) - 16usize];
    ["Offset of field: COUNTvaluePDCP_SNlength18::_asn_ctx"]
        [::std::mem::offset_of!(COUNTvaluePDCP_SNlength18, _asn_ctx) - 24usize];
};
pub type COUNTvaluePDCP_SNlength18_t = COUNTvaluePDCP_SNlength18;
unsafe extern "C" {
    pub static mut asn_DEF_COUNTvaluePDCP_SNlength18: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_COUNTvaluePDCP_SNlength18_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_COUNTvaluePDCP_SNlength18_1: [asn_TYPE_member_t; 3usize];
}
pub const HandoverFlag_HandoverFlag_handoverPreparation: HandoverFlag = 0;
pub type HandoverFlag = ::std::os::raw::c_uint;
pub use self::HandoverFlag as e_HandoverFlag;
pub type HandoverFlag_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverFlag: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn HandoverFlag_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HandoverFlag_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HandoverFlag_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HandoverFlag_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const MutingAvailabilityIndication_MutingAvailabilityIndication_available:
    MutingAvailabilityIndication = 0;
pub const MutingAvailabilityIndication_MutingAvailabilityIndication_unavailable:
    MutingAvailabilityIndication = 1;
pub type MutingAvailabilityIndication = ::std::os::raw::c_uint;
pub use self::MutingAvailabilityIndication as e_MutingAvailabilityIndication;
pub type MutingAvailabilityIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_MutingAvailabilityIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MutingAvailabilityIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const pxml_chunk_type_e_PXML_TEXT: pxml_chunk_type_e = 0;
pub const pxml_chunk_type_e_PXML_TAG: pxml_chunk_type_e = 1;
pub const pxml_chunk_type_e_PXML_COMMENT: pxml_chunk_type_e = 2;
pub const pxml_chunk_type_e_PXML_TAG_END: pxml_chunk_type_e = 3;
pub const pxml_chunk_type_e_PXML_COMMENT_END: pxml_chunk_type_e = 4;
pub type pxml_chunk_type_e = ::std::os::raw::c_uint;
pub type pxml_callback_f = ::std::option::Option<
    unsafe extern "C" fn(
        _type: pxml_chunk_type_e,
        _chunk_data: *const ::std::os::raw::c_void,
        _chunk_size: usize,
        _key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int,
>;
unsafe extern "C" {
    pub fn pxml_parse(
        _stateContext: *mut ::std::os::raw::c_int,
        _buf: *const ::std::os::raw::c_void,
        _size: usize,
        cb: pxml_callback_f,
        _key: *mut ::std::os::raw::c_void,
    ) -> isize;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UserLocationInformation {
    pub eutran_cgi: EUTRAN_CGI_t,
    pub tai: TAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UserLocationInformation"]
        [::std::mem::size_of::<UserLocationInformation>() - 264usize];
    ["Alignment of UserLocationInformation"]
        [::std::mem::align_of::<UserLocationInformation>() - 8usize];
    ["Offset of field: UserLocationInformation::eutran_cgi"]
        [::std::mem::offset_of!(UserLocationInformation, eutran_cgi) - 0usize];
    ["Offset of field: UserLocationInformation::tai"]
        [::std::mem::offset_of!(UserLocationInformation, tai) - 120usize];
    ["Offset of field: UserLocationInformation::iE_Extensions"]
        [::std::mem::offset_of!(UserLocationInformation, iE_Extensions) - 232usize];
    ["Offset of field: UserLocationInformation::_asn_ctx"]
        [::std::mem::offset_of!(UserLocationInformation, _asn_ctx) - 240usize];
};
pub type UserLocationInformation_t = UserLocationInformation;
unsafe extern "C" {
    pub static mut asn_DEF_UserLocationInformation: asn_TYPE_descriptor_t;
}
pub type LPPa_PDU_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_LPPa_PDU: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LPPa_PDU_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LPPa_PDU_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LPPa_PDU_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LPPa_PDU_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenLACs {
    pub list: ForbiddenLACs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenLACs__bindgen_ty_1 {
    pub array: *mut *mut LAC_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut LAC_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenLACs__bindgen_ty_1"]
        [::std::mem::size_of::<ForbiddenLACs__bindgen_ty_1>() - 24usize];
    ["Alignment of ForbiddenLACs__bindgen_ty_1"]
        [::std::mem::align_of::<ForbiddenLACs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ForbiddenLACs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ForbiddenLACs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ForbiddenLACs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ForbiddenLACs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ForbiddenLACs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ForbiddenLACs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ForbiddenLACs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ForbiddenLACs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenLACs"][::std::mem::size_of::<ForbiddenLACs>() - 48usize];
    ["Alignment of ForbiddenLACs"][::std::mem::align_of::<ForbiddenLACs>() - 8usize];
    ["Offset of field: ForbiddenLACs::list"][::std::mem::offset_of!(ForbiddenLACs, list) - 0usize];
    ["Offset of field: ForbiddenLACs::_asn_ctx"]
        [::std::mem::offset_of!(ForbiddenLACs, _asn_ctx) - 24usize];
};
pub type ForbiddenLACs_t = ForbiddenLACs;
unsafe extern "C" {
    pub static mut asn_DEF_ForbiddenLACs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ForbiddenLACs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ForbiddenLACs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ForbiddenLACs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenLAs_Item {
    pub pLMN_Identity: PLMNidentity_t,
    pub forbiddenLACs: ForbiddenLACs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenLAs_Item"][::std::mem::size_of::<ForbiddenLAs_Item>() - 120usize];
    ["Alignment of ForbiddenLAs_Item"][::std::mem::align_of::<ForbiddenLAs_Item>() - 8usize];
    ["Offset of field: ForbiddenLAs_Item::pLMN_Identity"]
        [::std::mem::offset_of!(ForbiddenLAs_Item, pLMN_Identity) - 0usize];
    ["Offset of field: ForbiddenLAs_Item::forbiddenLACs"]
        [::std::mem::offset_of!(ForbiddenLAs_Item, forbiddenLACs) - 40usize];
    ["Offset of field: ForbiddenLAs_Item::iE_Extensions"]
        [::std::mem::offset_of!(ForbiddenLAs_Item, iE_Extensions) - 88usize];
    ["Offset of field: ForbiddenLAs_Item::_asn_ctx"]
        [::std::mem::offset_of!(ForbiddenLAs_Item, _asn_ctx) - 96usize];
};
pub type ForbiddenLAs_Item_t = ForbiddenLAs_Item;
unsafe extern "C" {
    pub static mut asn_DEF_ForbiddenLAs_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ForbiddenLAs_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ForbiddenLAs_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABReleaseListBearerRelComp {
    pub list: E_RABReleaseListBearerRelComp__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABReleaseListBearerRelComp__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABReleaseListBearerRelComp__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABReleaseListBearerRelComp__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABReleaseListBearerRelComp__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABReleaseListBearerRelComp__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABReleaseListBearerRelComp__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABReleaseListBearerRelComp__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABReleaseListBearerRelComp__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABReleaseListBearerRelComp__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABReleaseListBearerRelComp__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABReleaseListBearerRelComp__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABReleaseListBearerRelComp__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABReleaseListBearerRelComp__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABReleaseListBearerRelComp"]
        [::std::mem::size_of::<E_RABReleaseListBearerRelComp>() - 48usize];
    ["Alignment of E_RABReleaseListBearerRelComp"]
        [::std::mem::align_of::<E_RABReleaseListBearerRelComp>() - 8usize];
    ["Offset of field: E_RABReleaseListBearerRelComp::list"]
        [::std::mem::offset_of!(E_RABReleaseListBearerRelComp, list) - 0usize];
    ["Offset of field: E_RABReleaseListBearerRelComp::_asn_ctx"]
        [::std::mem::offset_of!(E_RABReleaseListBearerRelComp, _asn_ctx) - 24usize];
};
pub type E_RABReleaseListBearerRelComp_t = E_RABReleaseListBearerRelComp;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABReleaseListBearerRelComp: asn_TYPE_descriptor_t;
}
pub type ExpectedActivityPeriod_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ExpectedActivityPeriod_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ExpectedActivityPeriod: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedActivityPeriod_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type ExpectedIdlePeriod_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ExpectedIdlePeriod_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ExpectedIdlePeriod: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedIdlePeriod_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SourceOfUEActivityBehaviourInformation_SourceOfUEActivityBehaviourInformation_subscription_information : SourceOfUEActivityBehaviourInformation = 0 ;
pub const SourceOfUEActivityBehaviourInformation_SourceOfUEActivityBehaviourInformation_statistics : SourceOfUEActivityBehaviourInformation = 1 ;
pub type SourceOfUEActivityBehaviourInformation = ::std::os::raw::c_uint;
pub use self::SourceOfUEActivityBehaviourInformation as e_SourceOfUEActivityBehaviourInformation;
pub type SourceOfUEActivityBehaviourInformation_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_SourceOfUEActivityBehaviourInformation_constr_1:
        asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_SourceOfUEActivityBehaviourInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_SourceOfUEActivityBehaviourInformation_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceOfUEActivityBehaviourInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExpectedUEActivityBehaviour {
    pub expectedActivityPeriod: *mut ExpectedActivityPeriod_t,
    pub expectedIdlePeriod: *mut ExpectedIdlePeriod_t,
    pub sourceofUEActivityBehaviourInformation: *mut SourceOfUEActivityBehaviourInformation_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExpectedUEActivityBehaviour"]
        [::std::mem::size_of::<ExpectedUEActivityBehaviour>() - 56usize];
    ["Alignment of ExpectedUEActivityBehaviour"]
        [::std::mem::align_of::<ExpectedUEActivityBehaviour>() - 8usize];
    ["Offset of field: ExpectedUEActivityBehaviour::expectedActivityPeriod"]
        [::std::mem::offset_of!(ExpectedUEActivityBehaviour, expectedActivityPeriod) - 0usize];
    ["Offset of field: ExpectedUEActivityBehaviour::expectedIdlePeriod"]
        [::std::mem::offset_of!(ExpectedUEActivityBehaviour, expectedIdlePeriod) - 8usize];
    ["Offset of field: ExpectedUEActivityBehaviour::sourceofUEActivityBehaviourInformation"][::std::mem::offset_of!(
        ExpectedUEActivityBehaviour,
        sourceofUEActivityBehaviourInformation
    )
        - 16usize];
    ["Offset of field: ExpectedUEActivityBehaviour::iE_Extensions"]
        [::std::mem::offset_of!(ExpectedUEActivityBehaviour, iE_Extensions) - 24usize];
    ["Offset of field: ExpectedUEActivityBehaviour::_asn_ctx"]
        [::std::mem::offset_of!(ExpectedUEActivityBehaviour, _asn_ctx) - 32usize];
};
pub type ExpectedUEActivityBehaviour_t = ExpectedUEActivityBehaviour;
unsafe extern "C" {
    pub static mut asn_DEF_ExpectedUEActivityBehaviour: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ExpectedUEActivityBehaviour_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ExpectedUEActivityBehaviour_1: [asn_TYPE_member_t; 4usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedGUMMEIs {
    pub list: ServedGUMMEIs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedGUMMEIs__bindgen_ty_1 {
    pub array: *mut *mut ServedGUMMEIsItem,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ServedGUMMEIsItem)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedGUMMEIs__bindgen_ty_1"]
        [::std::mem::size_of::<ServedGUMMEIs__bindgen_ty_1>() - 24usize];
    ["Alignment of ServedGUMMEIs__bindgen_ty_1"]
        [::std::mem::align_of::<ServedGUMMEIs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ServedGUMMEIs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ServedGUMMEIs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ServedGUMMEIs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ServedGUMMEIs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ServedGUMMEIs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ServedGUMMEIs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ServedGUMMEIs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ServedGUMMEIs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedGUMMEIs"][::std::mem::size_of::<ServedGUMMEIs>() - 48usize];
    ["Alignment of ServedGUMMEIs"][::std::mem::align_of::<ServedGUMMEIs>() - 8usize];
    ["Offset of field: ServedGUMMEIs::list"][::std::mem::offset_of!(ServedGUMMEIs, list) - 0usize];
    ["Offset of field: ServedGUMMEIs::_asn_ctx"]
        [::std::mem::offset_of!(ServedGUMMEIs, _asn_ctx) - 24usize];
};
pub type ServedGUMMEIs_t = ServedGUMMEIs;
unsafe extern "C" {
    pub static mut asn_DEF_ServedGUMMEIs: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedPLMNs {
    pub list: ServedPLMNs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedPLMNs__bindgen_ty_1 {
    pub array: *mut *mut PLMNidentity_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLMNidentity_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedPLMNs__bindgen_ty_1"]
        [::std::mem::size_of::<ServedPLMNs__bindgen_ty_1>() - 24usize];
    ["Alignment of ServedPLMNs__bindgen_ty_1"]
        [::std::mem::align_of::<ServedPLMNs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ServedPLMNs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ServedPLMNs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ServedPLMNs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ServedPLMNs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ServedPLMNs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ServedPLMNs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ServedPLMNs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ServedPLMNs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedPLMNs"][::std::mem::size_of::<ServedPLMNs>() - 48usize];
    ["Alignment of ServedPLMNs"][::std::mem::align_of::<ServedPLMNs>() - 8usize];
    ["Offset of field: ServedPLMNs::list"][::std::mem::offset_of!(ServedPLMNs, list) - 0usize];
    ["Offset of field: ServedPLMNs::_asn_ctx"]
        [::std::mem::offset_of!(ServedPLMNs, _asn_ctx) - 24usize];
};
pub type ServedPLMNs_t = ServedPLMNs;
unsafe extern "C" {
    pub static mut asn_DEF_ServedPLMNs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ServedPLMNs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ServedPLMNs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ServedPLMNs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedGroupIDs {
    pub list: ServedGroupIDs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedGroupIDs__bindgen_ty_1 {
    pub array: *mut *mut MME_Group_ID_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut MME_Group_ID_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedGroupIDs__bindgen_ty_1"]
        [::std::mem::size_of::<ServedGroupIDs__bindgen_ty_1>() - 24usize];
    ["Alignment of ServedGroupIDs__bindgen_ty_1"]
        [::std::mem::align_of::<ServedGroupIDs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ServedGroupIDs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ServedGroupIDs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ServedGroupIDs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ServedGroupIDs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ServedGroupIDs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ServedGroupIDs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ServedGroupIDs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ServedGroupIDs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedGroupIDs"][::std::mem::size_of::<ServedGroupIDs>() - 48usize];
    ["Alignment of ServedGroupIDs"][::std::mem::align_of::<ServedGroupIDs>() - 8usize];
    ["Offset of field: ServedGroupIDs::list"]
        [::std::mem::offset_of!(ServedGroupIDs, list) - 0usize];
    ["Offset of field: ServedGroupIDs::_asn_ctx"]
        [::std::mem::offset_of!(ServedGroupIDs, _asn_ctx) - 24usize];
};
pub type ServedGroupIDs_t = ServedGroupIDs;
unsafe extern "C" {
    pub static mut asn_DEF_ServedGroupIDs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ServedGroupIDs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ServedGroupIDs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ServedGroupIDs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedMMECs {
    pub list: ServedMMECs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedMMECs__bindgen_ty_1 {
    pub array: *mut *mut MME_Code_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut MME_Code_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedMMECs__bindgen_ty_1"]
        [::std::mem::size_of::<ServedMMECs__bindgen_ty_1>() - 24usize];
    ["Alignment of ServedMMECs__bindgen_ty_1"]
        [::std::mem::align_of::<ServedMMECs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ServedMMECs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ServedMMECs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ServedMMECs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ServedMMECs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ServedMMECs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ServedMMECs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ServedMMECs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ServedMMECs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedMMECs"][::std::mem::size_of::<ServedMMECs>() - 48usize];
    ["Alignment of ServedMMECs"][::std::mem::align_of::<ServedMMECs>() - 8usize];
    ["Offset of field: ServedMMECs::list"][::std::mem::offset_of!(ServedMMECs, list) - 0usize];
    ["Offset of field: ServedMMECs::_asn_ctx"]
        [::std::mem::offset_of!(ServedMMECs, _asn_ctx) - 24usize];
};
pub type ServedMMECs_t = ServedMMECs;
unsafe extern "C" {
    pub static mut asn_DEF_ServedMMECs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ServedMMECs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ServedMMECs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ServedMMECs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedGUMMEIsItem {
    pub servedPLMNs: ServedPLMNs_t,
    pub servedGroupIDs: ServedGroupIDs_t,
    pub servedMMECs: ServedMMECs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedGUMMEIsItem"][::std::mem::size_of::<ServedGUMMEIsItem>() - 176usize];
    ["Alignment of ServedGUMMEIsItem"][::std::mem::align_of::<ServedGUMMEIsItem>() - 8usize];
    ["Offset of field: ServedGUMMEIsItem::servedPLMNs"]
        [::std::mem::offset_of!(ServedGUMMEIsItem, servedPLMNs) - 0usize];
    ["Offset of field: ServedGUMMEIsItem::servedGroupIDs"]
        [::std::mem::offset_of!(ServedGUMMEIsItem, servedGroupIDs) - 48usize];
    ["Offset of field: ServedGUMMEIsItem::servedMMECs"]
        [::std::mem::offset_of!(ServedGUMMEIsItem, servedMMECs) - 96usize];
    ["Offset of field: ServedGUMMEIsItem::iE_Extensions"]
        [::std::mem::offset_of!(ServedGUMMEIsItem, iE_Extensions) - 144usize];
    ["Offset of field: ServedGUMMEIsItem::_asn_ctx"]
        [::std::mem::offset_of!(ServedGUMMEIsItem, _asn_ctx) - 152usize];
};
pub type ServedGUMMEIsItem_t = ServedGUMMEIsItem;
unsafe extern "C" {
    pub static mut asn_DEF_ServedGUMMEIsItem: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ServedGUMMEIsItem_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ServedGUMMEIsItem_1: [asn_TYPE_member_t; 4usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListforMDT {
    pub list: TAIListforMDT__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListforMDT__bindgen_ty_1 {
    pub array: *mut *mut TAI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListforMDT__bindgen_ty_1"]
        [::std::mem::size_of::<TAIListforMDT__bindgen_ty_1>() - 24usize];
    ["Alignment of TAIListforMDT__bindgen_ty_1"]
        [::std::mem::align_of::<TAIListforMDT__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAIListforMDT__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAIListforMDT__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAIListforMDT__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAIListforMDT__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAIListforMDT__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAIListforMDT__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAIListforMDT__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAIListforMDT__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListforMDT"][::std::mem::size_of::<TAIListforMDT>() - 48usize];
    ["Alignment of TAIListforMDT"][::std::mem::align_of::<TAIListforMDT>() - 8usize];
    ["Offset of field: TAIListforMDT::list"][::std::mem::offset_of!(TAIListforMDT, list) - 0usize];
    ["Offset of field: TAIListforMDT::_asn_ctx"]
        [::std::mem::offset_of!(TAIListforMDT, _asn_ctx) - 24usize];
};
pub type TAIListforMDT_t = TAIListforMDT;
unsafe extern "C" {
    pub static mut asn_DEF_TAIListforMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAIListforMDT_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAIListforMDT_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TAIListforMDT_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIBasedMDT {
    pub tAIListforMDT: TAIListforMDT_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIBasedMDT"][::std::mem::size_of::<TAIBasedMDT>() - 80usize];
    ["Alignment of TAIBasedMDT"][::std::mem::align_of::<TAIBasedMDT>() - 8usize];
    ["Offset of field: TAIBasedMDT::tAIListforMDT"]
        [::std::mem::offset_of!(TAIBasedMDT, tAIListforMDT) - 0usize];
    ["Offset of field: TAIBasedMDT::iE_Extensions"]
        [::std::mem::offset_of!(TAIBasedMDT, iE_Extensions) - 48usize];
    ["Offset of field: TAIBasedMDT::_asn_ctx"]
        [::std::mem::offset_of!(TAIBasedMDT, _asn_ctx) - 56usize];
};
pub type TAIBasedMDT_t = TAIBasedMDT;
unsafe extern "C" {
    pub static mut asn_DEF_TAIBasedMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAIBasedMDT_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAIBasedMDT_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeModifiedItemBearerModInd {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub dL_GTP_TEID: GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeModifiedItemBearerModInd"]
        [::std::mem::size_of::<E_RABToBeModifiedItemBearerModInd>() - 128usize];
    ["Alignment of E_RABToBeModifiedItemBearerModInd"]
        [::std::mem::align_of::<E_RABToBeModifiedItemBearerModInd>() - 8usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModInd::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModInd, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModInd::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModInd, transportLayerAddress) - 8usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModInd::dL_GTP_TEID"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModInd, dL_GTP_TEID) - 56usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModInd::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModInd, iE_Extensions) - 96usize];
    ["Offset of field: E_RABToBeModifiedItemBearerModInd::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeModifiedItemBearerModInd, _asn_ctx) - 104usize];
};
pub type E_RABToBeModifiedItemBearerModInd_t = E_RABToBeModifiedItemBearerModInd;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeModifiedItemBearerModInd: asn_TYPE_descriptor_t;
}
pub type DL_NAS_MAC_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_DL_NAS_MAC_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_DL_NAS_MAC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_NAS_MAC_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAI_Broadcast {
    pub list: TAI_Broadcast__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAI_Broadcast__bindgen_ty_1 {
    pub array: *mut *mut TAI_Broadcast_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAI_Broadcast_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAI_Broadcast__bindgen_ty_1"]
        [::std::mem::size_of::<TAI_Broadcast__bindgen_ty_1>() - 24usize];
    ["Alignment of TAI_Broadcast__bindgen_ty_1"]
        [::std::mem::align_of::<TAI_Broadcast__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAI_Broadcast__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAI_Broadcast__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAI_Broadcast__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAI_Broadcast__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAI_Broadcast__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAI_Broadcast__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAI_Broadcast__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAI_Broadcast__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAI_Broadcast"][::std::mem::size_of::<TAI_Broadcast>() - 48usize];
    ["Alignment of TAI_Broadcast"][::std::mem::align_of::<TAI_Broadcast>() - 8usize];
    ["Offset of field: TAI_Broadcast::list"][::std::mem::offset_of!(TAI_Broadcast, list) - 0usize];
    ["Offset of field: TAI_Broadcast::_asn_ctx"]
        [::std::mem::offset_of!(TAI_Broadcast, _asn_ctx) - 24usize];
};
pub type TAI_Broadcast_t = TAI_Broadcast;
unsafe extern "C" {
    pub static mut asn_DEF_TAI_Broadcast: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAI_Broadcast_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAI_Broadcast_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TAI_Broadcast_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAI_Broadcast_Item {
    pub tAI: TAI_t,
    pub completedCellinTAI: CompletedCellinTAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAI_Broadcast_Item"][::std::mem::size_of::<TAI_Broadcast_Item>() - 192usize];
    ["Alignment of TAI_Broadcast_Item"][::std::mem::align_of::<TAI_Broadcast_Item>() - 8usize];
    ["Offset of field: TAI_Broadcast_Item::tAI"]
        [::std::mem::offset_of!(TAI_Broadcast_Item, tAI) - 0usize];
    ["Offset of field: TAI_Broadcast_Item::completedCellinTAI"]
        [::std::mem::offset_of!(TAI_Broadcast_Item, completedCellinTAI) - 112usize];
    ["Offset of field: TAI_Broadcast_Item::iE_Extensions"]
        [::std::mem::offset_of!(TAI_Broadcast_Item, iE_Extensions) - 160usize];
    ["Offset of field: TAI_Broadcast_Item::_asn_ctx"]
        [::std::mem::offset_of!(TAI_Broadcast_Item, _asn_ctx) - 168usize];
};
pub type TAI_Broadcast_Item_t = TAI_Broadcast_Item;
unsafe extern "C" {
    pub static mut asn_DEF_TAI_Broadcast_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAI_Broadcast_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAI_Broadcast_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PC5FlowBitRates {
    pub guaranteedFlowBitRate: BitRate_t,
    pub maximumFlowBitRate: BitRate_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PC5FlowBitRates"][::std::mem::size_of::<PC5FlowBitRates>() - 64usize];
    ["Alignment of PC5FlowBitRates"][::std::mem::align_of::<PC5FlowBitRates>() - 8usize];
    ["Offset of field: PC5FlowBitRates::guaranteedFlowBitRate"]
        [::std::mem::offset_of!(PC5FlowBitRates, guaranteedFlowBitRate) - 0usize];
    ["Offset of field: PC5FlowBitRates::maximumFlowBitRate"]
        [::std::mem::offset_of!(PC5FlowBitRates, maximumFlowBitRate) - 16usize];
    ["Offset of field: PC5FlowBitRates::iE_Extensions"]
        [::std::mem::offset_of!(PC5FlowBitRates, iE_Extensions) - 32usize];
    ["Offset of field: PC5FlowBitRates::_asn_ctx"]
        [::std::mem::offset_of!(PC5FlowBitRates, _asn_ctx) - 40usize];
};
pub type PC5FlowBitRates_t = PC5FlowBitRates;
unsafe extern "C" {
    pub static mut asn_DEF_PC5FlowBitRates: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PC5FlowBitRates_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PC5FlowBitRates_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ProSeAuthorized {
    pub proSeDirectDiscovery: *mut ProSeDirectDiscovery_t,
    pub proSeDirectCommunication: *mut ProSeDirectCommunication_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ProSeAuthorized"][::std::mem::size_of::<ProSeAuthorized>() - 48usize];
    ["Alignment of ProSeAuthorized"][::std::mem::align_of::<ProSeAuthorized>() - 8usize];
    ["Offset of field: ProSeAuthorized::proSeDirectDiscovery"]
        [::std::mem::offset_of!(ProSeAuthorized, proSeDirectDiscovery) - 0usize];
    ["Offset of field: ProSeAuthorized::proSeDirectCommunication"]
        [::std::mem::offset_of!(ProSeAuthorized, proSeDirectCommunication) - 8usize];
    ["Offset of field: ProSeAuthorized::iE_Extensions"]
        [::std::mem::offset_of!(ProSeAuthorized, iE_Extensions) - 16usize];
    ["Offset of field: ProSeAuthorized::_asn_ctx"]
        [::std::mem::offset_of!(ProSeAuthorized, _asn_ctx) - 24usize];
};
pub type ProSeAuthorized_t = ProSeAuthorized;
unsafe extern "C" {
    pub static mut asn_DEF_ProSeAuthorized: asn_TYPE_descriptor_t;
}
pub const CSFallbackIndicator_CSFallbackIndicator_cs_fallback_required: CSFallbackIndicator = 0;
pub const CSFallbackIndicator_CSFallbackIndicator_cs_fallback_high_priority: CSFallbackIndicator =
    1;
pub type CSFallbackIndicator = ::std::os::raw::c_uint;
pub use self::CSFallbackIndicator as e_CSFallbackIndicator;
pub type CSFallbackIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_CSFallbackIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSFallbackIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWSfailedECGIList {
    pub list: PWSfailedECGIList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PWSfailedECGIList__bindgen_ty_1 {
    pub array: *mut *mut EUTRAN_CGI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EUTRAN_CGI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PWSfailedECGIList__bindgen_ty_1"]
        [::std::mem::size_of::<PWSfailedECGIList__bindgen_ty_1>() - 24usize];
    ["Alignment of PWSfailedECGIList__bindgen_ty_1"]
        [::std::mem::align_of::<PWSfailedECGIList__bindgen_ty_1>() - 8usize];
    ["Offset of field: PWSfailedECGIList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(PWSfailedECGIList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: PWSfailedECGIList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(PWSfailedECGIList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: PWSfailedECGIList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(PWSfailedECGIList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: PWSfailedECGIList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(PWSfailedECGIList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PWSfailedECGIList"][::std::mem::size_of::<PWSfailedECGIList>() - 48usize];
    ["Alignment of PWSfailedECGIList"][::std::mem::align_of::<PWSfailedECGIList>() - 8usize];
    ["Offset of field: PWSfailedECGIList::list"]
        [::std::mem::offset_of!(PWSfailedECGIList, list) - 0usize];
    ["Offset of field: PWSfailedECGIList::_asn_ctx"]
        [::std::mem::offset_of!(PWSfailedECGIList, _asn_ctx) - 24usize];
};
pub type PWSfailedECGIList_t = PWSfailedECGIList;
unsafe extern "C" {
    pub static mut asn_DEF_PWSfailedECGIList: asn_TYPE_descriptor_t;
}
pub type UL_NAS_MAC_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_UL_NAS_MAC_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_UL_NAS_MAC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UL_NAS_MAC_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type LastVisitedNGRANCellInformation_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_LastVisitedNGRANCellInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedNGRANCellInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const TypeOfError_TypeOfError_not_understood: TypeOfError = 0;
pub const TypeOfError_TypeOfError_missing: TypeOfError = 1;
pub type TypeOfError = ::std::os::raw::c_uint;
pub use self::TypeOfError as e_TypeOfError;
pub type TypeOfError_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_TypeOfError_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_TypeOfError: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_TypeOfError_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn TypeOfError_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TypeOfError_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TypeOfError_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TypeOfError_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TypeOfError_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TypeOfError_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TypeOfError_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TypeOfError_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TypeOfError_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TypeOfError_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TypeOfError_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CriticalityDiagnostics_IE_Item {
    pub iECriticality: Criticality_t,
    pub iE_ID: ProtocolIE_ID_t,
    pub typeOfError: TypeOfError_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CriticalityDiagnostics_IE_Item"]
        [::std::mem::size_of::<CriticalityDiagnostics_IE_Item>() - 56usize];
    ["Alignment of CriticalityDiagnostics_IE_Item"]
        [::std::mem::align_of::<CriticalityDiagnostics_IE_Item>() - 8usize];
    ["Offset of field: CriticalityDiagnostics_IE_Item::iECriticality"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_Item, iECriticality) - 0usize];
    ["Offset of field: CriticalityDiagnostics_IE_Item::iE_ID"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_Item, iE_ID) - 8usize];
    ["Offset of field: CriticalityDiagnostics_IE_Item::typeOfError"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_Item, typeOfError) - 16usize];
    ["Offset of field: CriticalityDiagnostics_IE_Item::iE_Extensions"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_Item, iE_Extensions) - 24usize];
    ["Offset of field: CriticalityDiagnostics_IE_Item::_asn_ctx"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_Item, _asn_ctx) - 32usize];
};
pub type CriticalityDiagnostics_IE_Item_t = CriticalityDiagnostics_IE_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CriticalityDiagnostics_IE_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CriticalityDiagnostics_IE_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CriticalityDiagnostics_IE_Item_1: [asn_TYPE_member_t; 4usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct E_RABFailedToResumeItemResumeRes {
    pub e_RAB_ID: E_RAB_ID_t,
    pub cause: Cause_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABFailedToResumeItemResumeRes"]
        [::std::mem::size_of::<E_RABFailedToResumeItemResumeRes>() - 80usize];
    ["Alignment of E_RABFailedToResumeItemResumeRes"]
        [::std::mem::align_of::<E_RABFailedToResumeItemResumeRes>() - 8usize];
    ["Offset of field: E_RABFailedToResumeItemResumeRes::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeRes, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABFailedToResumeItemResumeRes::cause"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeRes, cause) - 8usize];
    ["Offset of field: E_RABFailedToResumeItemResumeRes::iE_Extensions"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeRes, iE_Extensions) - 48usize];
    ["Offset of field: E_RABFailedToResumeItemResumeRes::_asn_ctx"]
        [::std::mem::offset_of!(E_RABFailedToResumeItemResumeRes, _asn_ctx) - 56usize];
};
pub type E_RABFailedToResumeItemResumeRes_t = E_RABFailedToResumeItemResumeRes;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABFailedToResumeItemResumeRes: asn_TYPE_descriptor_t;
}
pub type VisibleString_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_VisibleString: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_OP_VisibleString: asn_TYPE_operation_t;
}
unsafe extern "C" {
    pub fn VisibleString_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
pub type URI_Address_t = VisibleString_t;
unsafe extern "C" {
    pub static mut asn_DEF_URI_Address: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn URI_Address_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn URI_Address_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn URI_Address_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn URI_Address_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn URI_Address_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn URI_Address_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn URI_Address_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn URI_Address_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn URI_Address_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn URI_Address_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn URI_Address_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LastVisitedPSCellList {
    pub list: LastVisitedPSCellList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LastVisitedPSCellList__bindgen_ty_1 {
    pub array: *mut *mut LastVisitedPSCellInformation,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut LastVisitedPSCellInformation)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedPSCellList__bindgen_ty_1"]
        [::std::mem::size_of::<LastVisitedPSCellList__bindgen_ty_1>() - 24usize];
    ["Alignment of LastVisitedPSCellList__bindgen_ty_1"]
        [::std::mem::align_of::<LastVisitedPSCellList__bindgen_ty_1>() - 8usize];
    ["Offset of field: LastVisitedPSCellList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(LastVisitedPSCellList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: LastVisitedPSCellList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(LastVisitedPSCellList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: LastVisitedPSCellList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(LastVisitedPSCellList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: LastVisitedPSCellList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(LastVisitedPSCellList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedPSCellList"][::std::mem::size_of::<LastVisitedPSCellList>() - 48usize];
    ["Alignment of LastVisitedPSCellList"]
        [::std::mem::align_of::<LastVisitedPSCellList>() - 8usize];
    ["Offset of field: LastVisitedPSCellList::list"]
        [::std::mem::offset_of!(LastVisitedPSCellList, list) - 0usize];
    ["Offset of field: LastVisitedPSCellList::_asn_ctx"]
        [::std::mem::offset_of!(LastVisitedPSCellList, _asn_ctx) - 24usize];
};
pub type LastVisitedPSCellList_t = LastVisitedPSCellList;
unsafe extern "C" {
    pub static mut asn_DEF_LastVisitedPSCellList: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LastVisitedPSCellInformation {
    pub pSCellID: *mut PSCellInformation,
    pub timeStay: ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedPSCellInformation"]
        [::std::mem::size_of::<LastVisitedPSCellInformation>() - 48usize];
    ["Alignment of LastVisitedPSCellInformation"]
        [::std::mem::align_of::<LastVisitedPSCellInformation>() - 8usize];
    ["Offset of field: LastVisitedPSCellInformation::pSCellID"]
        [::std::mem::offset_of!(LastVisitedPSCellInformation, pSCellID) - 0usize];
    ["Offset of field: LastVisitedPSCellInformation::timeStay"]
        [::std::mem::offset_of!(LastVisitedPSCellInformation, timeStay) - 8usize];
    ["Offset of field: LastVisitedPSCellInformation::iE_Extensions"]
        [::std::mem::offset_of!(LastVisitedPSCellInformation, iE_Extensions) - 16usize];
    ["Offset of field: LastVisitedPSCellInformation::_asn_ctx"]
        [::std::mem::offset_of!(LastVisitedPSCellInformation, _asn_ctx) - 24usize];
};
pub type LastVisitedPSCellInformation_t = LastVisitedPSCellInformation;
unsafe extern "C" {
    pub static mut asn_DEF_LastVisitedPSCellInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LastVisitedPSCellInformation_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LastVisitedPSCellInformation_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PSCellInformation {
    pub nCGI: NR_CGI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PSCellInformation"][::std::mem::size_of::<PSCellInformation>() - 152usize];
    ["Alignment of PSCellInformation"][::std::mem::align_of::<PSCellInformation>() - 8usize];
    ["Offset of field: PSCellInformation::nCGI"]
        [::std::mem::offset_of!(PSCellInformation, nCGI) - 0usize];
    ["Offset of field: PSCellInformation::iE_Extensions"]
        [::std::mem::offset_of!(PSCellInformation, iE_Extensions) - 120usize];
    ["Offset of field: PSCellInformation::_asn_ctx"]
        [::std::mem::offset_of!(PSCellInformation, _asn_ctx) - 128usize];
};
pub type PSCellInformation_t = PSCellInformation;
unsafe extern "C" {
    pub static mut asn_DEF_PSCellInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PSCellInformation_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PSCellInformation_1: [asn_TYPE_member_t; 2usize];
}
pub const Data_Forwarding_Not_Possible_Data_Forwarding_Not_Possible_data_Forwarding_not_Possible:
    Data_Forwarding_Not_Possible = 0;
pub type Data_Forwarding_Not_Possible = ::std::os::raw::c_uint;
pub use self::Data_Forwarding_Not_Possible as e_Data_Forwarding_Not_Possible;
pub type Data_Forwarding_Not_Possible_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Data_Forwarding_Not_Possible: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Data_Forwarding_Not_Possible_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type EUTRANRoundTripDelayEstimationInfo_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_EUTRANRoundTripDelayEstimationInfo: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EUTRANRoundTripDelayEstimationInfo_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type NASSecurityParametersfromE_UTRAN_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_NASSecurityParametersfromE_UTRAN: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParametersfromE_UTRAN_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type UERadioCapabilityForPaging_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UERadioCapabilityForPaging: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityForPaging_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type NumberofBroadcastRequest_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_NumberofBroadcastRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NumberofBroadcastRequest_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Links_to_log_Links_to_log_uplink: Links_to_log = 0;
pub const Links_to_log_Links_to_log_downlink: Links_to_log = 1;
pub const Links_to_log_Links_to_log_both_uplink_and_downlink: Links_to_log = 2;
pub type Links_to_log = ::std::os::raw::c_uint;
pub use self::Links_to_log as e_Links_to_log;
pub type Links_to_log_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Links_to_log_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Links_to_log: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Links_to_log_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Links_to_log_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Links_to_log_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Links_to_log_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Links_to_log_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Links_to_log_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Links_to_log_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Links_to_log_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Links_to_log_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Links_to_log_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Links_to_log_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Links_to_log_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct M5Configuration {
    pub m5period: M5period_t,
    pub m5_links_to_log: Links_to_log_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of M5Configuration"][::std::mem::size_of::<M5Configuration>() - 48usize];
    ["Alignment of M5Configuration"][::std::mem::align_of::<M5Configuration>() - 8usize];
    ["Offset of field: M5Configuration::m5period"]
        [::std::mem::offset_of!(M5Configuration, m5period) - 0usize];
    ["Offset of field: M5Configuration::m5_links_to_log"]
        [::std::mem::offset_of!(M5Configuration, m5_links_to_log) - 8usize];
    ["Offset of field: M5Configuration::iE_Extensions"]
        [::std::mem::offset_of!(M5Configuration, iE_Extensions) - 16usize];
    ["Offset of field: M5Configuration::_asn_ctx"]
        [::std::mem::offset_of!(M5Configuration, _asn_ctx) - 24usize];
};
pub type M5Configuration_t = M5Configuration;
unsafe extern "C" {
    pub static mut asn_DEF_M5Configuration: asn_TYPE_descriptor_t;
}
pub type WarningType_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_WarningType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn WarningType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn WarningType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const BluetoothMeasurementConfiguration__bt_rssi_BluetoothMeasurementConfiguration__bt_rssi_true : BluetoothMeasurementConfiguration__bt_rssi = 0 ;
pub type BluetoothMeasurementConfiguration__bt_rssi = ::std::os::raw::c_uint;
pub use self::BluetoothMeasurementConfiguration__bt_rssi as e_BluetoothMeasurementConfiguration__bt_rssi;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BluetoothMeasurementConfiguration {
    pub bluetoothMeasConfig: BluetoothMeasConfig_t,
    pub bluetoothMeasConfigNameList: *mut BluetoothMeasConfigNameList,
    pub bt_rssi: *mut ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BluetoothMeasurementConfiguration"]
        [::std::mem::size_of::<BluetoothMeasurementConfiguration>() - 56usize];
    ["Alignment of BluetoothMeasurementConfiguration"]
        [::std::mem::align_of::<BluetoothMeasurementConfiguration>() - 8usize];
    ["Offset of field: BluetoothMeasurementConfiguration::bluetoothMeasConfig"]
        [::std::mem::offset_of!(BluetoothMeasurementConfiguration, bluetoothMeasConfig) - 0usize];
    ["Offset of field: BluetoothMeasurementConfiguration::bluetoothMeasConfigNameList"][::std::mem::offset_of!(
        BluetoothMeasurementConfiguration,
        bluetoothMeasConfigNameList
    ) - 8usize];
    ["Offset of field: BluetoothMeasurementConfiguration::bt_rssi"]
        [::std::mem::offset_of!(BluetoothMeasurementConfiguration, bt_rssi) - 16usize];
    ["Offset of field: BluetoothMeasurementConfiguration::iE_Extensions"]
        [::std::mem::offset_of!(BluetoothMeasurementConfiguration, iE_Extensions) - 24usize];
    ["Offset of field: BluetoothMeasurementConfiguration::_asn_ctx"]
        [::std::mem::offset_of!(BluetoothMeasurementConfiguration, _asn_ctx) - 32usize];
};
pub type BluetoothMeasurementConfiguration_t = BluetoothMeasurementConfiguration;
unsafe extern "C" {
    pub static mut asn_DEF_BluetoothMeasurementConfiguration: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GUMMEI {
    pub pLMN_Identity: PLMNidentity_t,
    pub mME_Group_ID: MME_Group_ID_t,
    pub mME_Code: MME_Code_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GUMMEI"][::std::mem::size_of::<GUMMEI>() - 152usize];
    ["Alignment of GUMMEI"][::std::mem::align_of::<GUMMEI>() - 8usize];
    ["Offset of field: GUMMEI::pLMN_Identity"]
        [::std::mem::offset_of!(GUMMEI, pLMN_Identity) - 0usize];
    ["Offset of field: GUMMEI::mME_Group_ID"]
        [::std::mem::offset_of!(GUMMEI, mME_Group_ID) - 40usize];
    ["Offset of field: GUMMEI::mME_Code"][::std::mem::offset_of!(GUMMEI, mME_Code) - 80usize];
    ["Offset of field: GUMMEI::iE_Extensions"]
        [::std::mem::offset_of!(GUMMEI, iE_Extensions) - 120usize];
    ["Offset of field: GUMMEI::_asn_ctx"][::std::mem::offset_of!(GUMMEI, _asn_ctx) - 128usize];
};
pub type GUMMEI_t = GUMMEI;
unsafe extern "C" {
    pub static mut asn_DEF_GUMMEI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_GUMMEI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_GUMMEI_1: [asn_TYPE_member_t; 4usize];
}
pub const CE_ModeBRestricted_CE_ModeBRestricted_restricted: CE_ModeBRestricted = 0;
pub const CE_ModeBRestricted_CE_ModeBRestricted_not_restricted: CE_ModeBRestricted = 1;
pub type CE_ModeBRestricted = ::std::os::raw::c_uint;
pub use self::CE_ModeBRestricted as e_CE_ModeBRestricted;
pub type CE_ModeBRestricted_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_CE_ModeBRestricted: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CE_ModeBRestricted_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type UE_RLF_Report_Container_for_extended_bands_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UE_RLF_Report_Container_for_extended_bands: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_for_extended_bands_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type UE_Usage_Type_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_UE_Usage_Type: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UE_Usage_Type_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Usage_Type_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type PDCP_SN_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PDCP_SN_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PDCP_SN: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PDCP_SN_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PDCP_SN_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PDCP_SN_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SN_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type HFN_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_HFN_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_HFN: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn HFN_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn HFN_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HFN_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HFN_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFN_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFN_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFN_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFN_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFN_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFN_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFN_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COUNTvalue {
    pub pDCP_SN: PDCP_SN_t,
    pub hFN: HFN_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COUNTvalue"][::std::mem::size_of::<COUNTvalue>() - 48usize];
    ["Alignment of COUNTvalue"][::std::mem::align_of::<COUNTvalue>() - 8usize];
    ["Offset of field: COUNTvalue::pDCP_SN"][::std::mem::offset_of!(COUNTvalue, pDCP_SN) - 0usize];
    ["Offset of field: COUNTvalue::hFN"][::std::mem::offset_of!(COUNTvalue, hFN) - 8usize];
    ["Offset of field: COUNTvalue::iE_Extensions"]
        [::std::mem::offset_of!(COUNTvalue, iE_Extensions) - 16usize];
    ["Offset of field: COUNTvalue::_asn_ctx"]
        [::std::mem::offset_of!(COUNTvalue, _asn_ctx) - 24usize];
};
pub type COUNTvalue_t = COUNTvalue;
unsafe extern "C" {
    pub static mut asn_DEF_COUNTvalue: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_COUNTvalue_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_COUNTvalue_1: [asn_TYPE_member_t; 3usize];
}
pub type PDCP_SNExtended_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PDCP_SNExtended_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PDCP_SNExtended: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PDCP_SNExtended_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type HFNModified_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_HFNModified_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_HFNModified: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn HFNModified_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn HFNModified_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HFNModified_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn HFNModified_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNModified_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFNModified_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNModified_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFNModified_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNModified_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn HFNModified_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn HFNModified_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct COUNTValueExtended {
    pub pDCP_SNExtended: PDCP_SNExtended_t,
    pub hFNModified: HFNModified_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of COUNTValueExtended"][::std::mem::size_of::<COUNTValueExtended>() - 48usize];
    ["Alignment of COUNTValueExtended"][::std::mem::align_of::<COUNTValueExtended>() - 8usize];
    ["Offset of field: COUNTValueExtended::pDCP_SNExtended"]
        [::std::mem::offset_of!(COUNTValueExtended, pDCP_SNExtended) - 0usize];
    ["Offset of field: COUNTValueExtended::hFNModified"]
        [::std::mem::offset_of!(COUNTValueExtended, hFNModified) - 8usize];
    ["Offset of field: COUNTValueExtended::iE_Extensions"]
        [::std::mem::offset_of!(COUNTValueExtended, iE_Extensions) - 16usize];
    ["Offset of field: COUNTValueExtended::_asn_ctx"]
        [::std::mem::offset_of!(COUNTValueExtended, _asn_ctx) - 24usize];
};
pub type COUNTValueExtended_t = COUNTValueExtended;
unsafe extern "C" {
    pub static mut asn_DEF_COUNTValueExtended: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_COUNTValueExtended_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_COUNTValueExtended_1: [asn_TYPE_member_t; 3usize];
}
pub const DLCOUNT_PDCP_SNlength_PR_DLCOUNT_PDCP_SNlength_PR_NOTHING: DLCOUNT_PDCP_SNlength_PR = 0;
pub const DLCOUNT_PDCP_SNlength_PR_DLCOUNT_PDCP_SNlength_PR_dLCOUNTValuePDCP_SNlength12:
    DLCOUNT_PDCP_SNlength_PR = 1;
pub const DLCOUNT_PDCP_SNlength_PR_DLCOUNT_PDCP_SNlength_PR_dLCOUNTValuePDCP_SNlength15:
    DLCOUNT_PDCP_SNlength_PR = 2;
pub const DLCOUNT_PDCP_SNlength_PR_DLCOUNT_PDCP_SNlength_PR_dLCOUNTValuePDCP_SNlength18:
    DLCOUNT_PDCP_SNlength_PR = 3;
pub type DLCOUNT_PDCP_SNlength_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct DLCOUNT_PDCP_SNlength {
    pub present: DLCOUNT_PDCP_SNlength_PR,
    pub choice: DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u {
    pub dLCOUNTValuePDCP_SNlength12: COUNTvalue_t,
    pub dLCOUNTValuePDCP_SNlength15: COUNTValueExtended_t,
    pub dLCOUNTValuePDCP_SNlength18: COUNTvaluePDCP_SNlength18_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u"]
        [::std::mem::size_of::<DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u>() - 48usize];
    ["Alignment of DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u"]
        [::std::mem::align_of::<DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u>() - 8usize];
    ["Offset of field: DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u::dLCOUNTValuePDCP_SNlength12"] [:: std :: mem :: offset_of ! (DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u , dLCOUNTValuePDCP_SNlength12) - 0usize] ;
    ["Offset of field: DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u::dLCOUNTValuePDCP_SNlength15"] [:: std :: mem :: offset_of ! (DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u , dLCOUNTValuePDCP_SNlength15) - 0usize] ;
    ["Offset of field: DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u::dLCOUNTValuePDCP_SNlength18"] [:: std :: mem :: offset_of ! (DLCOUNT_PDCP_SNlength_DLCOUNT_PDCP_SNlength_u , dLCOUNTValuePDCP_SNlength18) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DLCOUNT_PDCP_SNlength"][::std::mem::size_of::<DLCOUNT_PDCP_SNlength>() - 80usize];
    ["Alignment of DLCOUNT_PDCP_SNlength"]
        [::std::mem::align_of::<DLCOUNT_PDCP_SNlength>() - 8usize];
    ["Offset of field: DLCOUNT_PDCP_SNlength::present"]
        [::std::mem::offset_of!(DLCOUNT_PDCP_SNlength, present) - 0usize];
    ["Offset of field: DLCOUNT_PDCP_SNlength::choice"]
        [::std::mem::offset_of!(DLCOUNT_PDCP_SNlength, choice) - 8usize];
    ["Offset of field: DLCOUNT_PDCP_SNlength::_asn_ctx"]
        [::std::mem::offset_of!(DLCOUNT_PDCP_SNlength, _asn_ctx) - 56usize];
};
pub type DLCOUNT_PDCP_SNlength_t = DLCOUNT_PDCP_SNlength;
unsafe extern "C" {
    pub static mut asn_DEF_DLCOUNT_PDCP_SNlength: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_DLCOUNT_PDCP_SNlength_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_DLCOUNT_PDCP_SNlength_1: [asn_TYPE_member_t; 3usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_DLCOUNT_PDCP_SNlength_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Bearers_SubjectToEarlyStatusTransfer_Item {
    pub e_RAB_ID: E_RAB_ID_t,
    pub dLCOUNT_PDCP_SNlength: DLCOUNT_PDCP_SNlength_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Bearers_SubjectToEarlyStatusTransfer_Item"]
        [::std::mem::size_of::<Bearers_SubjectToEarlyStatusTransfer_Item>() - 120usize];
    ["Alignment of Bearers_SubjectToEarlyStatusTransfer_Item"]
        [::std::mem::align_of::<Bearers_SubjectToEarlyStatusTransfer_Item>() - 8usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransfer_Item::e_RAB_ID"]
        [::std::mem::offset_of!(Bearers_SubjectToEarlyStatusTransfer_Item, e_RAB_ID) - 0usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransfer_Item::dLCOUNT_PDCP_SNlength"][::std::mem::offset_of!(
        Bearers_SubjectToEarlyStatusTransfer_Item,
        dLCOUNT_PDCP_SNlength
    )
        - 8usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransfer_Item::iE_Extensions"][::std::mem::offset_of!(
        Bearers_SubjectToEarlyStatusTransfer_Item,
        iE_Extensions
    ) - 88usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransfer_Item::_asn_ctx"]
        [::std::mem::offset_of!(Bearers_SubjectToEarlyStatusTransfer_Item, _asn_ctx) - 96usize];
};
pub type Bearers_SubjectToEarlyStatusTransfer_Item_t = Bearers_SubjectToEarlyStatusTransfer_Item;
unsafe extern "C" {
    pub static mut asn_DEF_Bearers_SubjectToEarlyStatusTransfer_Item: asn_TYPE_descriptor_t;
}
pub type TargetRNC_ToSourceRNC_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_TargetRNC_ToSourceRNC_TransparentContainer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetRNC_ToSourceRNC_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const IntegrityProtectionResult_IntegrityProtectionResult_performed: IntegrityProtectionResult =
    0;
pub const IntegrityProtectionResult_IntegrityProtectionResult_not_performed:
    IntegrityProtectionResult = 1;
pub type IntegrityProtectionResult = ::std::os::raw::c_uint;
pub use self::IntegrityProtectionResult as e_IntegrityProtectionResult;
pub type IntegrityProtectionResult_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_IntegrityProtectionResult_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_IntegrityProtectionResult: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_IntegrityProtectionResult_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionResult_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecurityResult {
    pub integrityProtectionResult: IntegrityProtectionResult_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecurityResult"][::std::mem::size_of::<SecurityResult>() - 40usize];
    ["Alignment of SecurityResult"][::std::mem::align_of::<SecurityResult>() - 8usize];
    ["Offset of field: SecurityResult::integrityProtectionResult"]
        [::std::mem::offset_of!(SecurityResult, integrityProtectionResult) - 0usize];
    ["Offset of field: SecurityResult::iE_Extensions"]
        [::std::mem::offset_of!(SecurityResult, iE_Extensions) - 8usize];
    ["Offset of field: SecurityResult::_asn_ctx"]
        [::std::mem::offset_of!(SecurityResult, _asn_ctx) - 16usize];
};
pub type SecurityResult_t = SecurityResult;
unsafe extern "C" {
    pub static mut asn_DEF_SecurityResult: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SecurityResult_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SecurityResult_1: [asn_TYPE_member_t; 2usize];
}
pub const UnlicensedSpectrumRestriction_UnlicensedSpectrumRestriction_unlicensed_restricted:
    UnlicensedSpectrumRestriction = 0;
pub type UnlicensedSpectrumRestriction = ::std::os::raw::c_uint;
pub use self::UnlicensedSpectrumRestriction as e_UnlicensedSpectrumRestriction;
pub type UnlicensedSpectrumRestriction_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_UnlicensedSpectrumRestriction: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UnlicensedSpectrumRestriction_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SRVCCHOIndication_SRVCCHOIndication_pSandCS: SRVCCHOIndication = 0;
pub const SRVCCHOIndication_SRVCCHOIndication_cSonly: SRVCCHOIndication = 1;
pub type SRVCCHOIndication = ::std::os::raw::c_uint;
pub use self::SRVCCHOIndication as e_SRVCCHOIndication;
pub type SRVCCHOIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_SRVCCHOIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCHOIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const VehicleUE_VehicleUE_authorized: VehicleUE = 0;
pub const VehicleUE_VehicleUE_not_authorized: VehicleUE = 1;
pub type VehicleUE = ::std::os::raw::c_uint;
pub use self::VehicleUE as e_VehicleUE;
pub type VehicleUE_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_VehicleUE_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_VehicleUE: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_VehicleUE_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn VehicleUE_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn VehicleUE_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn VehicleUE_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn VehicleUE_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VehicleUE_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn VehicleUE_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VehicleUE_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn VehicleUE_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VehicleUE_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn VehicleUE_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VehicleUE_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const UE_RetentionInformation_UE_RetentionInformation_ues_retained: UE_RetentionInformation = 0;
pub type UE_RetentionInformation = ::std::os::raw::c_uint;
pub use self::UE_RetentionInformation as e_UE_RetentionInformation;
pub type UE_RetentionInformation_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_UE_RetentionInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RetentionInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SupportedTAs {
    pub list: SupportedTAs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SupportedTAs__bindgen_ty_1 {
    pub array: *mut *mut SupportedTAs_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut SupportedTAs_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SupportedTAs__bindgen_ty_1"]
        [::std::mem::size_of::<SupportedTAs__bindgen_ty_1>() - 24usize];
    ["Alignment of SupportedTAs__bindgen_ty_1"]
        [::std::mem::align_of::<SupportedTAs__bindgen_ty_1>() - 8usize];
    ["Offset of field: SupportedTAs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(SupportedTAs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: SupportedTAs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(SupportedTAs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: SupportedTAs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(SupportedTAs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: SupportedTAs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(SupportedTAs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SupportedTAs"][::std::mem::size_of::<SupportedTAs>() - 48usize];
    ["Alignment of SupportedTAs"][::std::mem::align_of::<SupportedTAs>() - 8usize];
    ["Offset of field: SupportedTAs::list"][::std::mem::offset_of!(SupportedTAs, list) - 0usize];
    ["Offset of field: SupportedTAs::_asn_ctx"]
        [::std::mem::offset_of!(SupportedTAs, _asn_ctx) - 24usize];
};
pub type SupportedTAs_t = SupportedTAs;
unsafe extern "C" {
    pub static mut asn_DEF_SupportedTAs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SupportedTAs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SupportedTAs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_SupportedTAs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BPLMNs {
    pub list: BPLMNs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct BPLMNs__bindgen_ty_1 {
    pub array: *mut *mut PLMNidentity_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLMNidentity_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BPLMNs__bindgen_ty_1"][::std::mem::size_of::<BPLMNs__bindgen_ty_1>() - 24usize];
    ["Alignment of BPLMNs__bindgen_ty_1"][::std::mem::align_of::<BPLMNs__bindgen_ty_1>() - 8usize];
    ["Offset of field: BPLMNs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(BPLMNs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: BPLMNs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(BPLMNs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: BPLMNs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(BPLMNs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: BPLMNs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(BPLMNs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BPLMNs"][::std::mem::size_of::<BPLMNs>() - 48usize];
    ["Alignment of BPLMNs"][::std::mem::align_of::<BPLMNs>() - 8usize];
    ["Offset of field: BPLMNs::list"][::std::mem::offset_of!(BPLMNs, list) - 0usize];
    ["Offset of field: BPLMNs::_asn_ctx"][::std::mem::offset_of!(BPLMNs, _asn_ctx) - 24usize];
};
pub type BPLMNs_t = BPLMNs;
unsafe extern "C" {
    pub static mut asn_DEF_BPLMNs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_BPLMNs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_BPLMNs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_BPLMNs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SupportedTAs_Item {
    pub tAC: TAC_t,
    pub broadcastPLMNs: BPLMNs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SupportedTAs_Item"][::std::mem::size_of::<SupportedTAs_Item>() - 120usize];
    ["Alignment of SupportedTAs_Item"][::std::mem::align_of::<SupportedTAs_Item>() - 8usize];
    ["Offset of field: SupportedTAs_Item::tAC"]
        [::std::mem::offset_of!(SupportedTAs_Item, tAC) - 0usize];
    ["Offset of field: SupportedTAs_Item::broadcastPLMNs"]
        [::std::mem::offset_of!(SupportedTAs_Item, broadcastPLMNs) - 40usize];
    ["Offset of field: SupportedTAs_Item::iE_Extensions"]
        [::std::mem::offset_of!(SupportedTAs_Item, iE_Extensions) - 88usize];
    ["Offset of field: SupportedTAs_Item::_asn_ctx"]
        [::std::mem::offset_of!(SupportedTAs_Item, _asn_ctx) - 96usize];
};
pub type SupportedTAs_Item_t = SupportedTAs_Item;
unsafe extern "C" {
    pub static mut asn_DEF_SupportedTAs_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SupportedTAs_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SupportedTAs_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConnectedengNBItem {
    pub en_gNB_ID: En_gNB_ID_t,
    pub supportedTAs: SupportedTAs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ConnectedengNBItem"][::std::mem::size_of::<ConnectedengNBItem>() - 128usize];
    ["Alignment of ConnectedengNBItem"][::std::mem::align_of::<ConnectedengNBItem>() - 8usize];
    ["Offset of field: ConnectedengNBItem::en_gNB_ID"]
        [::std::mem::offset_of!(ConnectedengNBItem, en_gNB_ID) - 0usize];
    ["Offset of field: ConnectedengNBItem::supportedTAs"]
        [::std::mem::offset_of!(ConnectedengNBItem, supportedTAs) - 48usize];
    ["Offset of field: ConnectedengNBItem::iE_Extensions"]
        [::std::mem::offset_of!(ConnectedengNBItem, iE_Extensions) - 96usize];
    ["Offset of field: ConnectedengNBItem::_asn_ctx"]
        [::std::mem::offset_of!(ConnectedengNBItem, _asn_ctx) - 104usize];
};
pub type ConnectedengNBItem_t = ConnectedengNBItem;
unsafe extern "C" {
    pub static mut asn_DEF_ConnectedengNBItem: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ConnectedengNBItem_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ConnectedengNBItem_1: [asn_TYPE_member_t; 3usize];
}
pub type RIMInformation_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_RIMInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RIMInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RIMInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RIMInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RIMInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RIMInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RIMInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RIMInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RIMInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RIMInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RIMInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RIMInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const MDT_Activation_MDT_Activation_immediate_MDT_only: MDT_Activation = 0;
pub const MDT_Activation_MDT_Activation_immediate_MDT_and_Trace: MDT_Activation = 1;
pub const MDT_Activation_MDT_Activation_logged_MDT_only: MDT_Activation = 2;
pub const MDT_Activation_MDT_Activation_logged_MBSFN_MDT: MDT_Activation = 3;
pub type MDT_Activation = ::std::os::raw::c_uint;
pub use self::MDT_Activation as e_MDT_Activation;
pub type MDT_Activation_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_MDT_Activation_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_MDT_Activation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_MDT_Activation_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MDT_Activation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDT_Activation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDT_Activation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Activation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InterSystemMeasurementList {
    pub list: InterSystemMeasurementList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InterSystemMeasurementList__bindgen_ty_1 {
    pub array: *mut *mut InterSystemMeasurementItem,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut InterSystemMeasurementItem)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InterSystemMeasurementList__bindgen_ty_1"]
        [::std::mem::size_of::<InterSystemMeasurementList__bindgen_ty_1>() - 24usize];
    ["Alignment of InterSystemMeasurementList__bindgen_ty_1"]
        [::std::mem::align_of::<InterSystemMeasurementList__bindgen_ty_1>() - 8usize];
    ["Offset of field: InterSystemMeasurementList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(InterSystemMeasurementList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: InterSystemMeasurementList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(InterSystemMeasurementList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: InterSystemMeasurementList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(InterSystemMeasurementList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: InterSystemMeasurementList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(InterSystemMeasurementList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InterSystemMeasurementList"]
        [::std::mem::size_of::<InterSystemMeasurementList>() - 48usize];
    ["Alignment of InterSystemMeasurementList"]
        [::std::mem::align_of::<InterSystemMeasurementList>() - 8usize];
    ["Offset of field: InterSystemMeasurementList::list"]
        [::std::mem::offset_of!(InterSystemMeasurementList, list) - 0usize];
    ["Offset of field: InterSystemMeasurementList::_asn_ctx"]
        [::std::mem::offset_of!(InterSystemMeasurementList, _asn_ctx) - 24usize];
};
pub type InterSystemMeasurementList_t = InterSystemMeasurementList;
unsafe extern "C" {
    pub static mut asn_DEF_InterSystemMeasurementList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InterSystemMeasurementList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InterSystemMeasurementList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_InterSystemMeasurementList_constr_1: asn_per_constraints_t;
}
pub const InterSystemMeasurementItem__subcarrierSpacingSSB_InterSystemMeasurementItem__subcarrierSpacingSSB_kHz15 : InterSystemMeasurementItem__subcarrierSpacingSSB = 0 ;
pub const InterSystemMeasurementItem__subcarrierSpacingSSB_InterSystemMeasurementItem__subcarrierSpacingSSB_kHz30 : InterSystemMeasurementItem__subcarrierSpacingSSB = 1 ;
pub const InterSystemMeasurementItem__subcarrierSpacingSSB_InterSystemMeasurementItem__subcarrierSpacingSSB_kHz60 : InterSystemMeasurementItem__subcarrierSpacingSSB = 2 ;
pub const InterSystemMeasurementItem__subcarrierSpacingSSB_InterSystemMeasurementItem__subcarrierSpacingSSB_kHz120 : InterSystemMeasurementItem__subcarrierSpacingSSB = 3 ;
pub const InterSystemMeasurementItem__subcarrierSpacingSSB_InterSystemMeasurementItem__subcarrierSpacingSSB_kHz240 : InterSystemMeasurementItem__subcarrierSpacingSSB = 4 ;
pub type InterSystemMeasurementItem__subcarrierSpacingSSB = ::std::os::raw::c_uint;
pub use self::InterSystemMeasurementItem__subcarrierSpacingSSB as e_InterSystemMeasurementItem__subcarrierSpacingSSB;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InterSystemMeasurementItem {
    pub freqBandIndicatorNR: ::std::os::raw::c_long,
    pub sSBfrequencies: ::std::os::raw::c_long,
    pub subcarrierSpacingSSB: ::std::os::raw::c_long,
    pub maxRSIndexCellQual: *mut ::std::os::raw::c_long,
    pub sMTC: *mut OCTET_STRING_t,
    pub threshRS_Index_r15: *mut OCTET_STRING_t,
    pub sSBToMeasure: *mut OCTET_STRING_t,
    pub sSRSSIMeasurement: *mut OCTET_STRING_t,
    pub quantityConfigNR_R15: *mut OCTET_STRING_t,
    pub excludedCellsToAddModList: *mut OCTET_STRING_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InterSystemMeasurementItem"]
        [::std::mem::size_of::<InterSystemMeasurementItem>() - 112usize];
    ["Alignment of InterSystemMeasurementItem"]
        [::std::mem::align_of::<InterSystemMeasurementItem>() - 8usize];
    ["Offset of field: InterSystemMeasurementItem::freqBandIndicatorNR"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, freqBandIndicatorNR) - 0usize];
    ["Offset of field: InterSystemMeasurementItem::sSBfrequencies"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, sSBfrequencies) - 8usize];
    ["Offset of field: InterSystemMeasurementItem::subcarrierSpacingSSB"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, subcarrierSpacingSSB) - 16usize];
    ["Offset of field: InterSystemMeasurementItem::maxRSIndexCellQual"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, maxRSIndexCellQual) - 24usize];
    ["Offset of field: InterSystemMeasurementItem::sMTC"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, sMTC) - 32usize];
    ["Offset of field: InterSystemMeasurementItem::threshRS_Index_r15"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, threshRS_Index_r15) - 40usize];
    ["Offset of field: InterSystemMeasurementItem::sSBToMeasure"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, sSBToMeasure) - 48usize];
    ["Offset of field: InterSystemMeasurementItem::sSRSSIMeasurement"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, sSRSSIMeasurement) - 56usize];
    ["Offset of field: InterSystemMeasurementItem::quantityConfigNR_R15"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, quantityConfigNR_R15) - 64usize];
    ["Offset of field: InterSystemMeasurementItem::excludedCellsToAddModList"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, excludedCellsToAddModList) - 72usize];
    ["Offset of field: InterSystemMeasurementItem::iE_Extensions"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, iE_Extensions) - 80usize];
    ["Offset of field: InterSystemMeasurementItem::_asn_ctx"]
        [::std::mem::offset_of!(InterSystemMeasurementItem, _asn_ctx) - 88usize];
};
pub type InterSystemMeasurementItem_t = InterSystemMeasurementItem;
unsafe extern "C" {
    pub static mut asn_DEF_InterSystemMeasurementItem: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InterSystemMeasurementItem_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InterSystemMeasurementItem_1: [asn_TYPE_member_t; 11usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSetupItemHOReq {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub e_RABlevelQosParameters: E_RABLevelQoSParameters_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSetupItemHOReq"]
        [::std::mem::size_of::<E_RABToBeSetupItemHOReq>() - 232usize];
    ["Alignment of E_RABToBeSetupItemHOReq"]
        [::std::mem::align_of::<E_RABToBeSetupItemHOReq>() - 8usize];
    ["Offset of field: E_RABToBeSetupItemHOReq::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeSetupItemHOReq, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeSetupItemHOReq::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABToBeSetupItemHOReq, transportLayerAddress) - 8usize];
    ["Offset of field: E_RABToBeSetupItemHOReq::gTP_TEID"]
        [::std::mem::offset_of!(E_RABToBeSetupItemHOReq, gTP_TEID) - 56usize];
    ["Offset of field: E_RABToBeSetupItemHOReq::e_RABlevelQosParameters"]
        [::std::mem::offset_of!(E_RABToBeSetupItemHOReq, e_RABlevelQosParameters) - 96usize];
    ["Offset of field: E_RABToBeSetupItemHOReq::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeSetupItemHOReq, iE_Extensions) - 200usize];
    ["Offset of field: E_RABToBeSetupItemHOReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeSetupItemHOReq, _asn_ctx) - 208usize];
};
pub type E_RABToBeSetupItemHOReq_t = E_RABToBeSetupItemHOReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSetupItemHOReq: asn_TYPE_descriptor_t;
}
pub type TargetBSS_ToSourceBSS_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_TargetBSS_ToSourceBSS_TransparentContainer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetBSS_ToSourceBSS_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MSClassmark2_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_MSClassmark2: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MSClassmark2_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MSClassmark2_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MSClassmark2_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MSClassmark2_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AssistanceDataForCECapableUEs {
    pub cellIdentifierAndCELevelForCECapableUEs: CellIdentifierAndCELevelForCECapableUEs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AssistanceDataForCECapableUEs"]
        [::std::mem::size_of::<AssistanceDataForCECapableUEs>() - 224usize];
    ["Alignment of AssistanceDataForCECapableUEs"]
        [::std::mem::align_of::<AssistanceDataForCECapableUEs>() - 8usize];
    ["Offset of field: AssistanceDataForCECapableUEs::cellIdentifierAndCELevelForCECapableUEs"][::std::mem::offset_of!(
        AssistanceDataForCECapableUEs,
        cellIdentifierAndCELevelForCECapableUEs
    )
        - 0usize];
    ["Offset of field: AssistanceDataForCECapableUEs::iE_Extensions"]
        [::std::mem::offset_of!(AssistanceDataForCECapableUEs, iE_Extensions) - 192usize];
    ["Offset of field: AssistanceDataForCECapableUEs::_asn_ctx"]
        [::std::mem::offset_of!(AssistanceDataForCECapableUEs, _asn_ctx) - 200usize];
};
pub type AssistanceDataForCECapableUEs_t = AssistanceDataForCECapableUEs;
unsafe extern "C" {
    pub static mut asn_DEF_AssistanceDataForCECapableUEs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_AssistanceDataForCECapableUEs_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_AssistanceDataForCECapableUEs_1: [asn_TYPE_member_t; 2usize];
}
pub type UE_HistoryInformationFromTheUE_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UE_HistoryInformationFromTheUE: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_HistoryInformationFromTheUE_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Bearers_SubjectToEarlyStatusTransferList {
    pub list: Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1"]
        [::std::mem::size_of::<Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1>() - 24usize];
    ["Alignment of Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1"]
        [::std::mem::align_of::<Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1>() - 8usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1::array"][::std::mem::offset_of!(
        Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1,
        array
    ) - 0usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1::count"][::std::mem::offset_of!(
        Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1,
        count
    ) - 8usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1::size"][::std::mem::offset_of!(
        Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1,
        size
    ) - 12usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1::free"][::std::mem::offset_of!(
        Bearers_SubjectToEarlyStatusTransferList__bindgen_ty_1,
        free
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Bearers_SubjectToEarlyStatusTransferList"]
        [::std::mem::size_of::<Bearers_SubjectToEarlyStatusTransferList>() - 48usize];
    ["Alignment of Bearers_SubjectToEarlyStatusTransferList"]
        [::std::mem::align_of::<Bearers_SubjectToEarlyStatusTransferList>() - 8usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransferList::list"]
        [::std::mem::offset_of!(Bearers_SubjectToEarlyStatusTransferList, list) - 0usize];
    ["Offset of field: Bearers_SubjectToEarlyStatusTransferList::_asn_ctx"]
        [::std::mem::offset_of!(Bearers_SubjectToEarlyStatusTransferList, _asn_ctx) - 24usize];
};
pub type Bearers_SubjectToEarlyStatusTransferList_t = Bearers_SubjectToEarlyStatusTransferList;
unsafe extern "C" {
    pub static mut asn_DEF_Bearers_SubjectToEarlyStatusTransferList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_Bearers_SubjectToEarlyStatusTransferList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_Bearers_SubjectToEarlyStatusTransferList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_Bearers_SubjectToEarlyStatusTransferList_constr_1:
        asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENB_EarlyStatusTransfer_TransparentContainer {
    pub bearers_SubjectToEarlyStatusTransferList: Bearers_SubjectToEarlyStatusTransferList_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENB_EarlyStatusTransfer_TransparentContainer"]
        [::std::mem::size_of::<ENB_EarlyStatusTransfer_TransparentContainer>() - 80usize];
    ["Alignment of ENB_EarlyStatusTransfer_TransparentContainer"]
        [::std::mem::align_of::<ENB_EarlyStatusTransfer_TransparentContainer>() - 8usize];
    ["Offset of field: ENB_EarlyStatusTransfer_TransparentContainer::bearers_SubjectToEarlyStatusTransferList"] [:: std :: mem :: offset_of ! (ENB_EarlyStatusTransfer_TransparentContainer , bearers_SubjectToEarlyStatusTransferList) - 0usize] ;
    ["Offset of field: ENB_EarlyStatusTransfer_TransparentContainer::iE_Extensions"][::std::mem::offset_of!(
        ENB_EarlyStatusTransfer_TransparentContainer,
        iE_Extensions
    ) - 48usize];
    ["Offset of field: ENB_EarlyStatusTransfer_TransparentContainer::_asn_ctx"]
        [::std::mem::offset_of!(ENB_EarlyStatusTransfer_TransparentContainer, _asn_ctx) - 56usize];
};
pub type ENB_EarlyStatusTransfer_TransparentContainer_t =
    ENB_EarlyStatusTransfer_TransparentContainer;
unsafe extern "C" {
    pub static mut asn_DEF_ENB_EarlyStatusTransfer_TransparentContainer: asn_TYPE_descriptor_t;
}
pub const CNDomain_CNDomain_ps: CNDomain = 0;
pub const CNDomain_CNDomain_cs: CNDomain = 1;
pub type CNDomain = ::std::os::raw::c_uint;
pub use self::CNDomain as e_CNDomain;
pub type CNDomain_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_CNDomain: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CNDomain_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CNDomain_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CNDomain_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CNDomain_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNDomain_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CNDomain_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNDomain_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CNDomain_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNDomain_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CNDomain_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNDomain_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABToBeSwitchedULList_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSwitchedULList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedULList_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecondaryRATDataUsageReportList {
    pub list: SecondaryRATDataUsageReportList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecondaryRATDataUsageReportList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecondaryRATDataUsageReportList__bindgen_ty_1"]
        [::std::mem::size_of::<SecondaryRATDataUsageReportList__bindgen_ty_1>() - 24usize];
    ["Alignment of SecondaryRATDataUsageReportList__bindgen_ty_1"]
        [::std::mem::align_of::<SecondaryRATDataUsageReportList__bindgen_ty_1>() - 8usize];
    ["Offset of field: SecondaryRATDataUsageReportList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: SecondaryRATDataUsageReportList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: SecondaryRATDataUsageReportList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: SecondaryRATDataUsageReportList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecondaryRATDataUsageReportList"]
        [::std::mem::size_of::<SecondaryRATDataUsageReportList>() - 48usize];
    ["Alignment of SecondaryRATDataUsageReportList"]
        [::std::mem::align_of::<SecondaryRATDataUsageReportList>() - 8usize];
    ["Offset of field: SecondaryRATDataUsageReportList::list"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportList, list) - 0usize];
    ["Offset of field: SecondaryRATDataUsageReportList::_asn_ctx"]
        [::std::mem::offset_of!(SecondaryRATDataUsageReportList, _asn_ctx) - 24usize];
};
pub type SecondaryRATDataUsageReportList_t = SecondaryRATDataUsageReportList;
unsafe extern "C" {
    pub static mut asn_DEF_SecondaryRATDataUsageReportList: asn_TYPE_descriptor_t;
}
pub type Correlation_ID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Correlation_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Correlation_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Correlation_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Correlation_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Correlation_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ReportArea_ReportArea_ecgi: ReportArea = 0;
pub type ReportArea = ::std::os::raw::c_uint;
pub use self::ReportArea as e_ReportArea;
pub type ReportArea_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ReportArea_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ReportArea: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ReportArea_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ReportArea_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ReportArea_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReportArea_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReportArea_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportArea_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportArea_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportArea_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportArea_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportArea_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReportArea_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReportArea_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSetupItemCtxtSUReq {
    pub e_RAB_ID: E_RAB_ID_t,
    pub e_RABlevelQoSParameters: E_RABLevelQoSParameters_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub nAS_PDU: *mut NAS_PDU_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSetupItemCtxtSUReq"]
        [::std::mem::size_of::<E_RABToBeSetupItemCtxtSUReq>() - 240usize];
    ["Alignment of E_RABToBeSetupItemCtxtSUReq"]
        [::std::mem::align_of::<E_RABToBeSetupItemCtxtSUReq>() - 8usize];
    ["Offset of field: E_RABToBeSetupItemCtxtSUReq::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeSetupItemCtxtSUReq, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeSetupItemCtxtSUReq::e_RABlevelQoSParameters"]
        [::std::mem::offset_of!(E_RABToBeSetupItemCtxtSUReq, e_RABlevelQoSParameters) - 8usize];
    ["Offset of field: E_RABToBeSetupItemCtxtSUReq::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABToBeSetupItemCtxtSUReq, transportLayerAddress) - 112usize];
    ["Offset of field: E_RABToBeSetupItemCtxtSUReq::gTP_TEID"]
        [::std::mem::offset_of!(E_RABToBeSetupItemCtxtSUReq, gTP_TEID) - 160usize];
    ["Offset of field: E_RABToBeSetupItemCtxtSUReq::nAS_PDU"]
        [::std::mem::offset_of!(E_RABToBeSetupItemCtxtSUReq, nAS_PDU) - 200usize];
    ["Offset of field: E_RABToBeSetupItemCtxtSUReq::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeSetupItemCtxtSUReq, iE_Extensions) - 208usize];
    ["Offset of field: E_RABToBeSetupItemCtxtSUReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeSetupItemCtxtSUReq, _asn_ctx) - 216usize];
};
pub type E_RABToBeSetupItemCtxtSUReq_t = E_RABToBeSetupItemCtxtSUReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSetupItemCtxtSUReq: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAPSResponseInfoList {
    pub list: DAPSResponseInfoList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAPSResponseInfoList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DAPSResponseInfoList__bindgen_ty_1"]
        [::std::mem::size_of::<DAPSResponseInfoList__bindgen_ty_1>() - 24usize];
    ["Alignment of DAPSResponseInfoList__bindgen_ty_1"]
        [::std::mem::align_of::<DAPSResponseInfoList__bindgen_ty_1>() - 8usize];
    ["Offset of field: DAPSResponseInfoList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(DAPSResponseInfoList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: DAPSResponseInfoList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(DAPSResponseInfoList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: DAPSResponseInfoList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(DAPSResponseInfoList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: DAPSResponseInfoList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(DAPSResponseInfoList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DAPSResponseInfoList"][::std::mem::size_of::<DAPSResponseInfoList>() - 48usize];
    ["Alignment of DAPSResponseInfoList"][::std::mem::align_of::<DAPSResponseInfoList>() - 8usize];
    ["Offset of field: DAPSResponseInfoList::list"]
        [::std::mem::offset_of!(DAPSResponseInfoList, list) - 0usize];
    ["Offset of field: DAPSResponseInfoList::_asn_ctx"]
        [::std::mem::offset_of!(DAPSResponseInfoList, _asn_ctx) - 24usize];
};
pub type DAPSResponseInfoList_t = DAPSResponseInfoList;
unsafe extern "C" {
    pub static mut asn_DEF_DAPSResponseInfoList: asn_TYPE_descriptor_t;
}
pub const UECapabilityInfoRequest_UECapabilityInfoRequest_requested: UECapabilityInfoRequest = 0;
pub type UECapabilityInfoRequest = ::std::os::raw::c_uint;
pub use self::UECapabilityInfoRequest as e_UECapabilityInfoRequest;
pub type UECapabilityInfoRequest_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_UECapabilityInfoRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UECapabilityInfoRequest_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyListBearerModConf {
    pub list: E_RABModifyListBearerModConf__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyListBearerModConf__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyListBearerModConf__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABModifyListBearerModConf__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABModifyListBearerModConf__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABModifyListBearerModConf__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABModifyListBearerModConf__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABModifyListBearerModConf__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABModifyListBearerModConf__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABModifyListBearerModConf__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABModifyListBearerModConf__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABModifyListBearerModConf__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABModifyListBearerModConf__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABModifyListBearerModConf__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyListBearerModConf"]
        [::std::mem::size_of::<E_RABModifyListBearerModConf>() - 48usize];
    ["Alignment of E_RABModifyListBearerModConf"]
        [::std::mem::align_of::<E_RABModifyListBearerModConf>() - 8usize];
    ["Offset of field: E_RABModifyListBearerModConf::list"]
        [::std::mem::offset_of!(E_RABModifyListBearerModConf, list) - 0usize];
    ["Offset of field: E_RABModifyListBearerModConf::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModifyListBearerModConf, _asn_ctx) - 24usize];
};
pub type E_RABModifyListBearerModConf_t = E_RABModifyListBearerModConf;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModifyListBearerModConf: asn_TYPE_descriptor_t;
}
pub const TraceDepth_TraceDepth_minimum: TraceDepth = 0;
pub const TraceDepth_TraceDepth_medium: TraceDepth = 1;
pub const TraceDepth_TraceDepth_maximum: TraceDepth = 2;
pub const TraceDepth_TraceDepth_minimumWithoutVendorSpecificExtension: TraceDepth = 3;
pub const TraceDepth_TraceDepth_mediumWithoutVendorSpecificExtension: TraceDepth = 4;
pub const TraceDepth_TraceDepth_maximumWithoutVendorSpecificExtension: TraceDepth = 5;
pub type TraceDepth = ::std::os::raw::c_uint;
pub use self::TraceDepth as e_TraceDepth;
pub type TraceDepth_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_TraceDepth_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_TraceDepth: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_TraceDepth_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn TraceDepth_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TraceDepth_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TraceDepth_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TraceDepth_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TraceDepth_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TraceDepth_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TraceDepth_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TraceDepth_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TraceDepth_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TraceDepth_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TraceDepth_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellIdListforMDT {
    pub list: CellIdListforMDT__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellIdListforMDT__bindgen_ty_1 {
    pub array: *mut *mut EUTRAN_CGI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EUTRAN_CGI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellIdListforMDT__bindgen_ty_1"]
        [::std::mem::size_of::<CellIdListforMDT__bindgen_ty_1>() - 24usize];
    ["Alignment of CellIdListforMDT__bindgen_ty_1"]
        [::std::mem::align_of::<CellIdListforMDT__bindgen_ty_1>() - 8usize];
    ["Offset of field: CellIdListforMDT__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CellIdListforMDT__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CellIdListforMDT__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CellIdListforMDT__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CellIdListforMDT__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CellIdListforMDT__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CellIdListforMDT__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CellIdListforMDT__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellIdListforMDT"][::std::mem::size_of::<CellIdListforMDT>() - 48usize];
    ["Alignment of CellIdListforMDT"][::std::mem::align_of::<CellIdListforMDT>() - 8usize];
    ["Offset of field: CellIdListforMDT::list"]
        [::std::mem::offset_of!(CellIdListforMDT, list) - 0usize];
    ["Offset of field: CellIdListforMDT::_asn_ctx"]
        [::std::mem::offset_of!(CellIdListforMDT, _asn_ctx) - 24usize];
};
pub type CellIdListforMDT_t = CellIdListforMDT;
unsafe extern "C" {
    pub static mut asn_DEF_CellIdListforMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellIdListforMDT_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellIdListforMDT_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CellIdListforMDT_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellBasedMDT {
    pub cellIdListforMDT: CellIdListforMDT_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellBasedMDT"][::std::mem::size_of::<CellBasedMDT>() - 80usize];
    ["Alignment of CellBasedMDT"][::std::mem::align_of::<CellBasedMDT>() - 8usize];
    ["Offset of field: CellBasedMDT::cellIdListforMDT"]
        [::std::mem::offset_of!(CellBasedMDT, cellIdListforMDT) - 0usize];
    ["Offset of field: CellBasedMDT::iE_Extensions"]
        [::std::mem::offset_of!(CellBasedMDT, iE_Extensions) - 48usize];
    ["Offset of field: CellBasedMDT::_asn_ctx"]
        [::std::mem::offset_of!(CellBasedMDT, _asn_ctx) - 56usize];
};
pub type CellBasedMDT_t = CellBasedMDT;
unsafe extern "C" {
    pub static mut asn_DEF_CellBasedMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellBasedMDT_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellBasedMDT_1: [asn_TYPE_member_t; 2usize];
}
pub const AreaScopeOfMDT_PR_AreaScopeOfMDT_PR_NOTHING: AreaScopeOfMDT_PR = 0;
pub const AreaScopeOfMDT_PR_AreaScopeOfMDT_PR_cellBased: AreaScopeOfMDT_PR = 1;
pub const AreaScopeOfMDT_PR_AreaScopeOfMDT_PR_tABased: AreaScopeOfMDT_PR = 2;
pub const AreaScopeOfMDT_PR_AreaScopeOfMDT_PR_pLMNWide: AreaScopeOfMDT_PR = 3;
pub const AreaScopeOfMDT_PR_AreaScopeOfMDT_PR_tAIBased: AreaScopeOfMDT_PR = 4;
pub type AreaScopeOfMDT_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AreaScopeOfMDT {
    pub present: AreaScopeOfMDT_PR,
    pub choice: AreaScopeOfMDT_AreaScopeOfMDT_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AreaScopeOfMDT_AreaScopeOfMDT_u {
    pub cellBased: CellBasedMDT_t,
    pub tABased: TABasedMDT_t,
    pub pLMNWide: NULL_t,
    pub tAIBased: TAIBasedMDT_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AreaScopeOfMDT_AreaScopeOfMDT_u"]
        [::std::mem::size_of::<AreaScopeOfMDT_AreaScopeOfMDT_u>() - 80usize];
    ["Alignment of AreaScopeOfMDT_AreaScopeOfMDT_u"]
        [::std::mem::align_of::<AreaScopeOfMDT_AreaScopeOfMDT_u>() - 8usize];
    ["Offset of field: AreaScopeOfMDT_AreaScopeOfMDT_u::cellBased"]
        [::std::mem::offset_of!(AreaScopeOfMDT_AreaScopeOfMDT_u, cellBased) - 0usize];
    ["Offset of field: AreaScopeOfMDT_AreaScopeOfMDT_u::tABased"]
        [::std::mem::offset_of!(AreaScopeOfMDT_AreaScopeOfMDT_u, tABased) - 0usize];
    ["Offset of field: AreaScopeOfMDT_AreaScopeOfMDT_u::pLMNWide"]
        [::std::mem::offset_of!(AreaScopeOfMDT_AreaScopeOfMDT_u, pLMNWide) - 0usize];
    ["Offset of field: AreaScopeOfMDT_AreaScopeOfMDT_u::tAIBased"]
        [::std::mem::offset_of!(AreaScopeOfMDT_AreaScopeOfMDT_u, tAIBased) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AreaScopeOfMDT"][::std::mem::size_of::<AreaScopeOfMDT>() - 112usize];
    ["Alignment of AreaScopeOfMDT"][::std::mem::align_of::<AreaScopeOfMDT>() - 8usize];
    ["Offset of field: AreaScopeOfMDT::present"]
        [::std::mem::offset_of!(AreaScopeOfMDT, present) - 0usize];
    ["Offset of field: AreaScopeOfMDT::choice"]
        [::std::mem::offset_of!(AreaScopeOfMDT, choice) - 8usize];
    ["Offset of field: AreaScopeOfMDT::_asn_ctx"]
        [::std::mem::offset_of!(AreaScopeOfMDT, _asn_ctx) - 88usize];
};
pub type AreaScopeOfMDT_t = AreaScopeOfMDT;
unsafe extern "C" {
    pub static mut asn_DEF_AreaScopeOfMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_AreaScopeOfMDT_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_AreaScopeOfMDT_1: [asn_TYPE_member_t; 4usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_AreaScopeOfMDT_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MDT_Configuration {
    pub mdt_Activation: MDT_Activation_t,
    pub areaScopeOfMDT: AreaScopeOfMDT_t,
    pub mDTMode: MDTMode_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MDT_Configuration"][::std::mem::size_of::<MDT_Configuration>() - 288usize];
    ["Alignment of MDT_Configuration"][::std::mem::align_of::<MDT_Configuration>() - 8usize];
    ["Offset of field: MDT_Configuration::mdt_Activation"]
        [::std::mem::offset_of!(MDT_Configuration, mdt_Activation) - 0usize];
    ["Offset of field: MDT_Configuration::areaScopeOfMDT"]
        [::std::mem::offset_of!(MDT_Configuration, areaScopeOfMDT) - 8usize];
    ["Offset of field: MDT_Configuration::mDTMode"]
        [::std::mem::offset_of!(MDT_Configuration, mDTMode) - 120usize];
    ["Offset of field: MDT_Configuration::iE_Extensions"]
        [::std::mem::offset_of!(MDT_Configuration, iE_Extensions) - 256usize];
    ["Offset of field: MDT_Configuration::_asn_ctx"]
        [::std::mem::offset_of!(MDT_Configuration, _asn_ctx) - 264usize];
};
pub type MDT_Configuration_t = MDT_Configuration;
unsafe extern "C" {
    pub static mut asn_DEF_MDT_Configuration: asn_TYPE_descriptor_t;
}
pub type Masked_IMEISV_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Masked_IMEISV: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Masked_IMEISV_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Masked_IMEISV_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ForbiddenInterRATs_ForbiddenInterRATs_all: ForbiddenInterRATs = 0;
pub const ForbiddenInterRATs_ForbiddenInterRATs_geran: ForbiddenInterRATs = 1;
pub const ForbiddenInterRATs_ForbiddenInterRATs_utran: ForbiddenInterRATs = 2;
pub const ForbiddenInterRATs_ForbiddenInterRATs_cdma2000: ForbiddenInterRATs = 3;
pub const ForbiddenInterRATs_ForbiddenInterRATs_geranandutran: ForbiddenInterRATs = 4;
pub const ForbiddenInterRATs_ForbiddenInterRATs_cdma2000andutran: ForbiddenInterRATs = 5;
pub type ForbiddenInterRATs = ::std::os::raw::c_uint;
pub use self::ForbiddenInterRATs as e_ForbiddenInterRATs;
pub type ForbiddenInterRATs_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ForbiddenInterRATs_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ForbiddenInterRATs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ForbiddenInterRATs_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ForbiddenInterRATs_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct HandoverRestrictionList {
    pub servingPLMN: PLMNidentity_t,
    pub equivalentPLMNs: *mut EPLMNs,
    pub forbiddenTAs: *mut ForbiddenTAs,
    pub forbiddenLAs: *mut ForbiddenLAs,
    pub forbiddenInterRATs: *mut ForbiddenInterRATs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of HandoverRestrictionList"]
        [::std::mem::size_of::<HandoverRestrictionList>() - 104usize];
    ["Alignment of HandoverRestrictionList"]
        [::std::mem::align_of::<HandoverRestrictionList>() - 8usize];
    ["Offset of field: HandoverRestrictionList::servingPLMN"]
        [::std::mem::offset_of!(HandoverRestrictionList, servingPLMN) - 0usize];
    ["Offset of field: HandoverRestrictionList::equivalentPLMNs"]
        [::std::mem::offset_of!(HandoverRestrictionList, equivalentPLMNs) - 40usize];
    ["Offset of field: HandoverRestrictionList::forbiddenTAs"]
        [::std::mem::offset_of!(HandoverRestrictionList, forbiddenTAs) - 48usize];
    ["Offset of field: HandoverRestrictionList::forbiddenLAs"]
        [::std::mem::offset_of!(HandoverRestrictionList, forbiddenLAs) - 56usize];
    ["Offset of field: HandoverRestrictionList::forbiddenInterRATs"]
        [::std::mem::offset_of!(HandoverRestrictionList, forbiddenInterRATs) - 64usize];
    ["Offset of field: HandoverRestrictionList::iE_Extensions"]
        [::std::mem::offset_of!(HandoverRestrictionList, iE_Extensions) - 72usize];
    ["Offset of field: HandoverRestrictionList::_asn_ctx"]
        [::std::mem::offset_of!(HandoverRestrictionList, _asn_ctx) - 80usize];
};
pub type HandoverRestrictionList_t = HandoverRestrictionList;
unsafe extern "C" {
    pub static mut asn_DEF_HandoverRestrictionList: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EPLMNs {
    pub list: EPLMNs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EPLMNs__bindgen_ty_1 {
    pub array: *mut *mut PLMNidentity_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLMNidentity_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EPLMNs__bindgen_ty_1"][::std::mem::size_of::<EPLMNs__bindgen_ty_1>() - 24usize];
    ["Alignment of EPLMNs__bindgen_ty_1"][::std::mem::align_of::<EPLMNs__bindgen_ty_1>() - 8usize];
    ["Offset of field: EPLMNs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(EPLMNs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: EPLMNs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(EPLMNs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: EPLMNs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(EPLMNs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: EPLMNs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(EPLMNs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EPLMNs"][::std::mem::size_of::<EPLMNs>() - 48usize];
    ["Alignment of EPLMNs"][::std::mem::align_of::<EPLMNs>() - 8usize];
    ["Offset of field: EPLMNs::list"][::std::mem::offset_of!(EPLMNs, list) - 0usize];
    ["Offset of field: EPLMNs::_asn_ctx"][::std::mem::offset_of!(EPLMNs, _asn_ctx) - 24usize];
};
pub type EPLMNs_t = EPLMNs;
unsafe extern "C" {
    pub static mut asn_DEF_EPLMNs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EPLMNs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EPLMNs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_EPLMNs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenTAs {
    pub list: ForbiddenTAs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenTAs__bindgen_ty_1 {
    pub array: *mut *mut ForbiddenTAs_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ForbiddenTAs_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenTAs__bindgen_ty_1"]
        [::std::mem::size_of::<ForbiddenTAs__bindgen_ty_1>() - 24usize];
    ["Alignment of ForbiddenTAs__bindgen_ty_1"]
        [::std::mem::align_of::<ForbiddenTAs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ForbiddenTAs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ForbiddenTAs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ForbiddenTAs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ForbiddenTAs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ForbiddenTAs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ForbiddenTAs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ForbiddenTAs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ForbiddenTAs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenTAs"][::std::mem::size_of::<ForbiddenTAs>() - 48usize];
    ["Alignment of ForbiddenTAs"][::std::mem::align_of::<ForbiddenTAs>() - 8usize];
    ["Offset of field: ForbiddenTAs::list"][::std::mem::offset_of!(ForbiddenTAs, list) - 0usize];
    ["Offset of field: ForbiddenTAs::_asn_ctx"]
        [::std::mem::offset_of!(ForbiddenTAs, _asn_ctx) - 24usize];
};
pub type ForbiddenTAs_t = ForbiddenTAs;
unsafe extern "C" {
    pub static mut asn_DEF_ForbiddenTAs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ForbiddenTAs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ForbiddenTAs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ForbiddenTAs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenTACs {
    pub list: ForbiddenTACs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenTACs__bindgen_ty_1 {
    pub array: *mut *mut TAC_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAC_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenTACs__bindgen_ty_1"]
        [::std::mem::size_of::<ForbiddenTACs__bindgen_ty_1>() - 24usize];
    ["Alignment of ForbiddenTACs__bindgen_ty_1"]
        [::std::mem::align_of::<ForbiddenTACs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ForbiddenTACs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ForbiddenTACs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ForbiddenTACs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ForbiddenTACs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ForbiddenTACs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ForbiddenTACs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ForbiddenTACs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ForbiddenTACs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenTACs"][::std::mem::size_of::<ForbiddenTACs>() - 48usize];
    ["Alignment of ForbiddenTACs"][::std::mem::align_of::<ForbiddenTACs>() - 8usize];
    ["Offset of field: ForbiddenTACs::list"][::std::mem::offset_of!(ForbiddenTACs, list) - 0usize];
    ["Offset of field: ForbiddenTACs::_asn_ctx"]
        [::std::mem::offset_of!(ForbiddenTACs, _asn_ctx) - 24usize];
};
pub type ForbiddenTACs_t = ForbiddenTACs;
unsafe extern "C" {
    pub static mut asn_DEF_ForbiddenTACs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ForbiddenTACs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ForbiddenTACs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ForbiddenTACs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenTAs_Item {
    pub pLMN_Identity: PLMNidentity_t,
    pub forbiddenTACs: ForbiddenTACs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenTAs_Item"][::std::mem::size_of::<ForbiddenTAs_Item>() - 120usize];
    ["Alignment of ForbiddenTAs_Item"][::std::mem::align_of::<ForbiddenTAs_Item>() - 8usize];
    ["Offset of field: ForbiddenTAs_Item::pLMN_Identity"]
        [::std::mem::offset_of!(ForbiddenTAs_Item, pLMN_Identity) - 0usize];
    ["Offset of field: ForbiddenTAs_Item::forbiddenTACs"]
        [::std::mem::offset_of!(ForbiddenTAs_Item, forbiddenTACs) - 40usize];
    ["Offset of field: ForbiddenTAs_Item::iE_Extensions"]
        [::std::mem::offset_of!(ForbiddenTAs_Item, iE_Extensions) - 88usize];
    ["Offset of field: ForbiddenTAs_Item::_asn_ctx"]
        [::std::mem::offset_of!(ForbiddenTAs_Item, _asn_ctx) - 96usize];
};
pub type ForbiddenTAs_Item_t = ForbiddenTAs_Item;
unsafe extern "C" {
    pub static mut asn_DEF_ForbiddenTAs_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ForbiddenTAs_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ForbiddenTAs_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenLAs {
    pub list: ForbiddenLAs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ForbiddenLAs__bindgen_ty_1 {
    pub array: *mut *mut ForbiddenLAs_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ForbiddenLAs_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenLAs__bindgen_ty_1"]
        [::std::mem::size_of::<ForbiddenLAs__bindgen_ty_1>() - 24usize];
    ["Alignment of ForbiddenLAs__bindgen_ty_1"]
        [::std::mem::align_of::<ForbiddenLAs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ForbiddenLAs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ForbiddenLAs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ForbiddenLAs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ForbiddenLAs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ForbiddenLAs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ForbiddenLAs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ForbiddenLAs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ForbiddenLAs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ForbiddenLAs"][::std::mem::size_of::<ForbiddenLAs>() - 48usize];
    ["Alignment of ForbiddenLAs"][::std::mem::align_of::<ForbiddenLAs>() - 8usize];
    ["Offset of field: ForbiddenLAs::list"][::std::mem::offset_of!(ForbiddenLAs, list) - 0usize];
    ["Offset of field: ForbiddenLAs::_asn_ctx"]
        [::std::mem::offset_of!(ForbiddenLAs, _asn_ctx) - 24usize];
};
pub type ForbiddenLAs_t = ForbiddenLAs;
unsafe extern "C" {
    pub static mut asn_DEF_ForbiddenLAs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ForbiddenLAs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ForbiddenLAs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ForbiddenLAs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaID_Broadcast {
    pub list: EmergencyAreaID_Broadcast__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaID_Broadcast__bindgen_ty_1 {
    pub array: *mut *mut EmergencyAreaID_Broadcast_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut EmergencyAreaID_Broadcast_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaID_Broadcast__bindgen_ty_1"]
        [::std::mem::size_of::<EmergencyAreaID_Broadcast__bindgen_ty_1>() - 24usize];
    ["Alignment of EmergencyAreaID_Broadcast__bindgen_ty_1"]
        [::std::mem::align_of::<EmergencyAreaID_Broadcast__bindgen_ty_1>() - 8usize];
    ["Offset of field: EmergencyAreaID_Broadcast__bindgen_ty_1::array"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast__bindgen_ty_1, array) - 0usize];
    ["Offset of field: EmergencyAreaID_Broadcast__bindgen_ty_1::count"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast__bindgen_ty_1, count) - 8usize];
    ["Offset of field: EmergencyAreaID_Broadcast__bindgen_ty_1::size"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast__bindgen_ty_1, size) - 12usize];
    ["Offset of field: EmergencyAreaID_Broadcast__bindgen_ty_1::free"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaID_Broadcast"]
        [::std::mem::size_of::<EmergencyAreaID_Broadcast>() - 48usize];
    ["Alignment of EmergencyAreaID_Broadcast"]
        [::std::mem::align_of::<EmergencyAreaID_Broadcast>() - 8usize];
    ["Offset of field: EmergencyAreaID_Broadcast::list"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast, list) - 0usize];
    ["Offset of field: EmergencyAreaID_Broadcast::_asn_ctx"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast, _asn_ctx) - 24usize];
};
pub type EmergencyAreaID_Broadcast_t = EmergencyAreaID_Broadcast;
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyAreaID_Broadcast: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EmergencyAreaID_Broadcast_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EmergencyAreaID_Broadcast_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_EmergencyAreaID_Broadcast_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompletedCellinEAI {
    pub list: CompletedCellinEAI__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompletedCellinEAI__bindgen_ty_1 {
    pub array: *mut *mut CompletedCellinEAI_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CompletedCellinEAI_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompletedCellinEAI__bindgen_ty_1"]
        [::std::mem::size_of::<CompletedCellinEAI__bindgen_ty_1>() - 24usize];
    ["Alignment of CompletedCellinEAI__bindgen_ty_1"]
        [::std::mem::align_of::<CompletedCellinEAI__bindgen_ty_1>() - 8usize];
    ["Offset of field: CompletedCellinEAI__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CompletedCellinEAI__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CompletedCellinEAI__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CompletedCellinEAI__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CompletedCellinEAI__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CompletedCellinEAI__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CompletedCellinEAI__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CompletedCellinEAI__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompletedCellinEAI"][::std::mem::size_of::<CompletedCellinEAI>() - 48usize];
    ["Alignment of CompletedCellinEAI"][::std::mem::align_of::<CompletedCellinEAI>() - 8usize];
    ["Offset of field: CompletedCellinEAI::list"]
        [::std::mem::offset_of!(CompletedCellinEAI, list) - 0usize];
    ["Offset of field: CompletedCellinEAI::_asn_ctx"]
        [::std::mem::offset_of!(CompletedCellinEAI, _asn_ctx) - 24usize];
};
pub type CompletedCellinEAI_t = CompletedCellinEAI;
unsafe extern "C" {
    pub static mut asn_DEF_CompletedCellinEAI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CompletedCellinEAI_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CompletedCellinEAI_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CompletedCellinEAI_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CompletedCellinEAI_Item {
    pub eCGI: EUTRAN_CGI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CompletedCellinEAI_Item"]
        [::std::mem::size_of::<CompletedCellinEAI_Item>() - 152usize];
    ["Alignment of CompletedCellinEAI_Item"]
        [::std::mem::align_of::<CompletedCellinEAI_Item>() - 8usize];
    ["Offset of field: CompletedCellinEAI_Item::eCGI"]
        [::std::mem::offset_of!(CompletedCellinEAI_Item, eCGI) - 0usize];
    ["Offset of field: CompletedCellinEAI_Item::iE_Extensions"]
        [::std::mem::offset_of!(CompletedCellinEAI_Item, iE_Extensions) - 120usize];
    ["Offset of field: CompletedCellinEAI_Item::_asn_ctx"]
        [::std::mem::offset_of!(CompletedCellinEAI_Item, _asn_ctx) - 128usize];
};
pub type CompletedCellinEAI_Item_t = CompletedCellinEAI_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CompletedCellinEAI_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CompletedCellinEAI_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CompletedCellinEAI_Item_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaID_Broadcast_Item {
    pub emergencyAreaID: EmergencyAreaID_t,
    pub completedCellinEAI: CompletedCellinEAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaID_Broadcast_Item"]
        [::std::mem::size_of::<EmergencyAreaID_Broadcast_Item>() - 120usize];
    ["Alignment of EmergencyAreaID_Broadcast_Item"]
        [::std::mem::align_of::<EmergencyAreaID_Broadcast_Item>() - 8usize];
    ["Offset of field: EmergencyAreaID_Broadcast_Item::emergencyAreaID"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast_Item, emergencyAreaID) - 0usize];
    ["Offset of field: EmergencyAreaID_Broadcast_Item::completedCellinEAI"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast_Item, completedCellinEAI) - 40usize];
    ["Offset of field: EmergencyAreaID_Broadcast_Item::iE_Extensions"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast_Item, iE_Extensions) - 88usize];
    ["Offset of field: EmergencyAreaID_Broadcast_Item::_asn_ctx"]
        [::std::mem::offset_of!(EmergencyAreaID_Broadcast_Item, _asn_ctx) - 96usize];
};
pub type EmergencyAreaID_Broadcast_Item_t = EmergencyAreaID_Broadcast_Item;
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyAreaID_Broadcast_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_EmergencyAreaID_Broadcast_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_EmergencyAreaID_Broadcast_Item_1: [asn_TYPE_member_t; 3usize];
}
pub const M6report_Interval_M6report_Interval_ms1024: M6report_Interval = 0;
pub const M6report_Interval_M6report_Interval_ms2048: M6report_Interval = 1;
pub const M6report_Interval_M6report_Interval_ms5120: M6report_Interval = 2;
pub const M6report_Interval_M6report_Interval_ms10240: M6report_Interval = 3;
pub type M6report_Interval = ::std::os::raw::c_uint;
pub use self::M6report_Interval as e_M6report_Interval;
pub type M6report_Interval_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_M6report_Interval_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M6report_Interval: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_M6report_Interval_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M6report_Interval_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M6report_Interval_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M6report_Interval_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6report_Interval_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const M6delay_threshold_M6delay_threshold_ms30: M6delay_threshold = 0;
pub const M6delay_threshold_M6delay_threshold_ms40: M6delay_threshold = 1;
pub const M6delay_threshold_M6delay_threshold_ms50: M6delay_threshold = 2;
pub const M6delay_threshold_M6delay_threshold_ms60: M6delay_threshold = 3;
pub const M6delay_threshold_M6delay_threshold_ms70: M6delay_threshold = 4;
pub const M6delay_threshold_M6delay_threshold_ms80: M6delay_threshold = 5;
pub const M6delay_threshold_M6delay_threshold_ms90: M6delay_threshold = 6;
pub const M6delay_threshold_M6delay_threshold_ms100: M6delay_threshold = 7;
pub const M6delay_threshold_M6delay_threshold_ms150: M6delay_threshold = 8;
pub const M6delay_threshold_M6delay_threshold_ms300: M6delay_threshold = 9;
pub const M6delay_threshold_M6delay_threshold_ms500: M6delay_threshold = 10;
pub const M6delay_threshold_M6delay_threshold_ms750: M6delay_threshold = 11;
pub type M6delay_threshold = ::std::os::raw::c_uint;
pub use self::M6delay_threshold as e_M6delay_threshold;
pub type M6delay_threshold_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_M6delay_threshold_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M6delay_threshold: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_M6delay_threshold_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M6delay_threshold_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M6delay_threshold_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M6delay_threshold_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M6delay_threshold_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct M6Configuration {
    pub m6report_Interval: M6report_Interval_t,
    pub m6delay_threshold: *mut M6delay_threshold_t,
    pub m6_links_to_log: Links_to_log_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of M6Configuration"][::std::mem::size_of::<M6Configuration>() - 56usize];
    ["Alignment of M6Configuration"][::std::mem::align_of::<M6Configuration>() - 8usize];
    ["Offset of field: M6Configuration::m6report_Interval"]
        [::std::mem::offset_of!(M6Configuration, m6report_Interval) - 0usize];
    ["Offset of field: M6Configuration::m6delay_threshold"]
        [::std::mem::offset_of!(M6Configuration, m6delay_threshold) - 8usize];
    ["Offset of field: M6Configuration::m6_links_to_log"]
        [::std::mem::offset_of!(M6Configuration, m6_links_to_log) - 16usize];
    ["Offset of field: M6Configuration::iE_Extensions"]
        [::std::mem::offset_of!(M6Configuration, iE_Extensions) - 24usize];
    ["Offset of field: M6Configuration::_asn_ctx"]
        [::std::mem::offset_of!(M6Configuration, _asn_ctx) - 32usize];
};
pub type M6Configuration_t = M6Configuration;
unsafe extern "C" {
    pub static mut asn_DEF_M6Configuration: asn_TYPE_descriptor_t;
}
pub const VoiceSupportMatchIndicator_VoiceSupportMatchIndicator_supported:
    VoiceSupportMatchIndicator = 0;
pub const VoiceSupportMatchIndicator_VoiceSupportMatchIndicator_not_supported:
    VoiceSupportMatchIndicator = 1;
pub type VoiceSupportMatchIndicator = ::std::os::raw::c_uint;
pub use self::VoiceSupportMatchIndicator as e_VoiceSupportMatchIndicator;
pub type VoiceSupportMatchIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_VoiceSupportMatchIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn VoiceSupportMatchIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator_Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator_periodically : Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator = 0 ;
pub const Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator_Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator_ondemand : Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator = 1 ;
pub type Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator =
    ::std::os::raw::c_uint;
pub use self::Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator as e_Subscription_Based_UE_DifferentiationInfo__periodicCommunicationIndicator;
pub const Subscription_Based_UE_DifferentiationInfo__stationaryIndication_Subscription_Based_UE_DifferentiationInfo__stationaryIndication_stationary : Subscription_Based_UE_DifferentiationInfo__stationaryIndication = 0 ;
pub const Subscription_Based_UE_DifferentiationInfo__stationaryIndication_Subscription_Based_UE_DifferentiationInfo__stationaryIndication_mobile : Subscription_Based_UE_DifferentiationInfo__stationaryIndication = 1 ;
pub type Subscription_Based_UE_DifferentiationInfo__stationaryIndication = ::std::os::raw::c_uint;
pub use self::Subscription_Based_UE_DifferentiationInfo__stationaryIndication as e_Subscription_Based_UE_DifferentiationInfo__stationaryIndication;
pub const Subscription_Based_UE_DifferentiationInfo__trafficProfile_Subscription_Based_UE_DifferentiationInfo__trafficProfile_single_packet : Subscription_Based_UE_DifferentiationInfo__trafficProfile = 0 ;
pub const Subscription_Based_UE_DifferentiationInfo__trafficProfile_Subscription_Based_UE_DifferentiationInfo__trafficProfile_dual_packets : Subscription_Based_UE_DifferentiationInfo__trafficProfile = 1 ;
pub const Subscription_Based_UE_DifferentiationInfo__trafficProfile_Subscription_Based_UE_DifferentiationInfo__trafficProfile_multiple_packets : Subscription_Based_UE_DifferentiationInfo__trafficProfile = 2 ;
pub type Subscription_Based_UE_DifferentiationInfo__trafficProfile = ::std::os::raw::c_uint;
pub use self::Subscription_Based_UE_DifferentiationInfo__trafficProfile as e_Subscription_Based_UE_DifferentiationInfo__trafficProfile;
pub const Subscription_Based_UE_DifferentiationInfo__batteryIndication_Subscription_Based_UE_DifferentiationInfo__batteryIndication_battery_powered : Subscription_Based_UE_DifferentiationInfo__batteryIndication = 0 ;
pub const Subscription_Based_UE_DifferentiationInfo__batteryIndication_Subscription_Based_UE_DifferentiationInfo__batteryIndication_battery_powered_not_rechargeable_or_replaceable : Subscription_Based_UE_DifferentiationInfo__batteryIndication = 1 ;
pub const Subscription_Based_UE_DifferentiationInfo__batteryIndication_Subscription_Based_UE_DifferentiationInfo__batteryIndication_not_battery_powered : Subscription_Based_UE_DifferentiationInfo__batteryIndication = 2 ;
pub type Subscription_Based_UE_DifferentiationInfo__batteryIndication = ::std::os::raw::c_uint;
pub use self::Subscription_Based_UE_DifferentiationInfo__batteryIndication as e_Subscription_Based_UE_DifferentiationInfo__batteryIndication;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Subscription_Based_UE_DifferentiationInfo {
    pub periodicCommunicationIndicator: *mut ::std::os::raw::c_long,
    pub periodicTime: *mut ::std::os::raw::c_long,
    pub scheduledCommunicationTime: *mut ScheduledCommunicationTime,
    pub stationaryIndication: *mut ::std::os::raw::c_long,
    pub trafficProfile: *mut ::std::os::raw::c_long,
    pub batteryIndication: *mut ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Subscription_Based_UE_DifferentiationInfo"]
        [::std::mem::size_of::<Subscription_Based_UE_DifferentiationInfo>() - 80usize];
    ["Alignment of Subscription_Based_UE_DifferentiationInfo"]
        [::std::mem::align_of::<Subscription_Based_UE_DifferentiationInfo>() - 8usize];
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::periodicCommunicationIndicator"] [:: std :: mem :: offset_of ! (Subscription_Based_UE_DifferentiationInfo , periodicCommunicationIndicator) - 0usize] ;
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::periodicTime"]
        [::std::mem::offset_of!(Subscription_Based_UE_DifferentiationInfo, periodicTime) - 8usize];
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::scheduledCommunicationTime"][::std::mem::offset_of!(
        Subscription_Based_UE_DifferentiationInfo,
        scheduledCommunicationTime
    )
        - 16usize];
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::stationaryIndication"][::std::mem::offset_of!(
        Subscription_Based_UE_DifferentiationInfo,
        stationaryIndication
    )
        - 24usize];
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::trafficProfile"][::std::mem::offset_of!(
        Subscription_Based_UE_DifferentiationInfo,
        trafficProfile
    ) - 32usize];
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::batteryIndication"][::std::mem::offset_of!(
        Subscription_Based_UE_DifferentiationInfo,
        batteryIndication
    ) - 40usize];
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::iE_Extensions"][::std::mem::offset_of!(
        Subscription_Based_UE_DifferentiationInfo,
        iE_Extensions
    ) - 48usize];
    ["Offset of field: Subscription_Based_UE_DifferentiationInfo::_asn_ctx"]
        [::std::mem::offset_of!(Subscription_Based_UE_DifferentiationInfo, _asn_ctx) - 56usize];
};
pub type Subscription_Based_UE_DifferentiationInfo_t = Subscription_Based_UE_DifferentiationInfo;
unsafe extern "C" {
    pub static mut asn_DEF_Subscription_Based_UE_DifferentiationInfo: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellID_Broadcast {
    pub list: CellID_Broadcast__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellID_Broadcast__bindgen_ty_1 {
    pub array: *mut *mut CellID_Broadcast_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CellID_Broadcast_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellID_Broadcast__bindgen_ty_1"]
        [::std::mem::size_of::<CellID_Broadcast__bindgen_ty_1>() - 24usize];
    ["Alignment of CellID_Broadcast__bindgen_ty_1"]
        [::std::mem::align_of::<CellID_Broadcast__bindgen_ty_1>() - 8usize];
    ["Offset of field: CellID_Broadcast__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CellID_Broadcast__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CellID_Broadcast__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CellID_Broadcast__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CellID_Broadcast__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CellID_Broadcast__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CellID_Broadcast__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CellID_Broadcast__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellID_Broadcast"][::std::mem::size_of::<CellID_Broadcast>() - 48usize];
    ["Alignment of CellID_Broadcast"][::std::mem::align_of::<CellID_Broadcast>() - 8usize];
    ["Offset of field: CellID_Broadcast::list"]
        [::std::mem::offset_of!(CellID_Broadcast, list) - 0usize];
    ["Offset of field: CellID_Broadcast::_asn_ctx"]
        [::std::mem::offset_of!(CellID_Broadcast, _asn_ctx) - 24usize];
};
pub type CellID_Broadcast_t = CellID_Broadcast;
unsafe extern "C" {
    pub static mut asn_DEF_CellID_Broadcast: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellID_Broadcast_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellID_Broadcast_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CellID_Broadcast_constr_1: asn_per_constraints_t;
}
pub type RelativeMMECapacity_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_RelativeMMECapacity_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_RelativeMMECapacity: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelativeMMECapacity_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedDCNsItem {
    pub dCN_ID: DCN_ID_t,
    pub relativeDCNCapacity: RelativeMMECapacity_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedDCNsItem"][::std::mem::size_of::<ServedDCNsItem>() - 48usize];
    ["Alignment of ServedDCNsItem"][::std::mem::align_of::<ServedDCNsItem>() - 8usize];
    ["Offset of field: ServedDCNsItem::dCN_ID"]
        [::std::mem::offset_of!(ServedDCNsItem, dCN_ID) - 0usize];
    ["Offset of field: ServedDCNsItem::relativeDCNCapacity"]
        [::std::mem::offset_of!(ServedDCNsItem, relativeDCNCapacity) - 8usize];
    ["Offset of field: ServedDCNsItem::iE_Extensions"]
        [::std::mem::offset_of!(ServedDCNsItem, iE_Extensions) - 16usize];
    ["Offset of field: ServedDCNsItem::_asn_ctx"]
        [::std::mem::offset_of!(ServedDCNsItem, _asn_ctx) - 24usize];
};
pub type ServedDCNsItem_t = ServedDCNsItem;
unsafe extern "C" {
    pub static mut asn_DEF_ServedDCNsItem: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ServedDCNsItem_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ServedDCNsItem_1: [asn_TYPE_member_t; 3usize];
}
pub type E_RABToBeSwitchedDLList_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSwitchedDLList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeSwitchedDLList_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABSubjecttoDataForwardingList_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSubjecttoDataForwardingList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABSubjecttoDataForwardingList_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupItemBearerSURes {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupItemBearerSURes"]
        [::std::mem::size_of::<E_RABSetupItemBearerSURes>() - 128usize];
    ["Alignment of E_RABSetupItemBearerSURes"]
        [::std::mem::align_of::<E_RABSetupItemBearerSURes>() - 8usize];
    ["Offset of field: E_RABSetupItemBearerSURes::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABSetupItemBearerSURes, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABSetupItemBearerSURes::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABSetupItemBearerSURes, transportLayerAddress) - 8usize];
    ["Offset of field: E_RABSetupItemBearerSURes::gTP_TEID"]
        [::std::mem::offset_of!(E_RABSetupItemBearerSURes, gTP_TEID) - 56usize];
    ["Offset of field: E_RABSetupItemBearerSURes::iE_Extensions"]
        [::std::mem::offset_of!(E_RABSetupItemBearerSURes, iE_Extensions) - 96usize];
    ["Offset of field: E_RABSetupItemBearerSURes::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSetupItemBearerSURes, _asn_ctx) - 104usize];
};
pub type E_RABSetupItemBearerSURes_t = E_RABSetupItemBearerSURes;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSetupItemBearerSURes: asn_TYPE_descriptor_t;
}
pub const EmergencyIndicator_EmergencyIndicator_true: EmergencyIndicator = 0;
pub type EmergencyIndicator = ::std::os::raw::c_uint;
pub use self::EmergencyIndicator as e_EmergencyIndicator;
pub type EmergencyIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EmergencyIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EmergencyIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENB_StatusTransfer_TransparentContainer {
    pub bearers_SubjectToStatusTransferList: Bearers_SubjectToStatusTransferList_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENB_StatusTransfer_TransparentContainer"]
        [::std::mem::size_of::<ENB_StatusTransfer_TransparentContainer>() - 80usize];
    ["Alignment of ENB_StatusTransfer_TransparentContainer"]
        [::std::mem::align_of::<ENB_StatusTransfer_TransparentContainer>() - 8usize];
    ["Offset of field: ENB_StatusTransfer_TransparentContainer::bearers_SubjectToStatusTransferList"] [:: std :: mem :: offset_of ! (ENB_StatusTransfer_TransparentContainer , bearers_SubjectToStatusTransferList) - 0usize] ;
    ["Offset of field: ENB_StatusTransfer_TransparentContainer::iE_Extensions"]
        [::std::mem::offset_of!(ENB_StatusTransfer_TransparentContainer, iE_Extensions) - 48usize];
    ["Offset of field: ENB_StatusTransfer_TransparentContainer::_asn_ctx"]
        [::std::mem::offset_of!(ENB_StatusTransfer_TransparentContainer, _asn_ctx) - 56usize];
};
pub type ENB_StatusTransfer_TransparentContainer_t = ENB_StatusTransfer_TransparentContainer;
unsafe extern "C" {
    pub static mut asn_DEF_ENB_StatusTransfer_TransparentContainer: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_associatedLogicalS1_ConnectionListRes {
    pub list: UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1"]
        [::std::mem::size_of::<UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1>() - 24usize];
    ["Alignment of UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1"]
        [::std::mem::align_of::<UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1>() - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1::array"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1,
        array
    ) - 0usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1::count"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1,
        count
    ) - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1::size"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1,
        size
    ) - 12usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1::free"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListRes__bindgen_ty_1,
        free
    ) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_associatedLogicalS1_ConnectionListRes"]
        [::std::mem::size_of::<UE_associatedLogicalS1_ConnectionListRes>() - 48usize];
    ["Alignment of UE_associatedLogicalS1_ConnectionListRes"]
        [::std::mem::align_of::<UE_associatedLogicalS1_ConnectionListRes>() - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListRes::list"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionListRes, list) - 0usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListRes::_asn_ctx"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionListRes, _asn_ctx) - 24usize];
};
pub type UE_associatedLogicalS1_ConnectionListRes_t = UE_associatedLogicalS1_ConnectionListRes;
unsafe extern "C" {
    pub static mut asn_DEF_UE_associatedLogicalS1_ConnectionListRes: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UE_associatedLogicalS1_ConnectionListRes_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UE_associatedLogicalS1_ConnectionListRes_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_UE_associatedLogicalS1_ConnectionListRes_constr_1:
        asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSetupListCtxtSUReq {
    pub list: E_RABToBeSetupListCtxtSUReq__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSetupListCtxtSUReq__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSetupListCtxtSUReq__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABToBeSetupListCtxtSUReq__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABToBeSetupListCtxtSUReq__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABToBeSetupListCtxtSUReq__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABToBeSetupListCtxtSUReq__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABToBeSetupListCtxtSUReq__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABToBeSetupListCtxtSUReq__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABToBeSetupListCtxtSUReq__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABToBeSetupListCtxtSUReq__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABToBeSetupListCtxtSUReq__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABToBeSetupListCtxtSUReq__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABToBeSetupListCtxtSUReq__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSetupListCtxtSUReq"]
        [::std::mem::size_of::<E_RABToBeSetupListCtxtSUReq>() - 48usize];
    ["Alignment of E_RABToBeSetupListCtxtSUReq"]
        [::std::mem::align_of::<E_RABToBeSetupListCtxtSUReq>() - 8usize];
    ["Offset of field: E_RABToBeSetupListCtxtSUReq::list"]
        [::std::mem::offset_of!(E_RABToBeSetupListCtxtSUReq, list) - 0usize];
    ["Offset of field: E_RABToBeSetupListCtxtSUReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeSetupListCtxtSUReq, _asn_ctx) - 24usize];
};
pub type E_RABToBeSetupListCtxtSUReq_t = E_RABToBeSetupListCtxtSUReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSetupListCtxtSUReq: asn_TYPE_descriptor_t;
}
pub type WarningMessageContents_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_WarningMessageContents: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn WarningMessageContents_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningMessageContents_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningMessageContents_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningMessageContents_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type WarningAreaCoordinates_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_WarningAreaCoordinates: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningAreaCoordinates_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSG_IdList {
    pub list: CSG_IdList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSG_IdList__bindgen_ty_1 {
    pub array: *mut *mut CSG_IdList_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CSG_IdList_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CSG_IdList__bindgen_ty_1"]
        [::std::mem::size_of::<CSG_IdList__bindgen_ty_1>() - 24usize];
    ["Alignment of CSG_IdList__bindgen_ty_1"]
        [::std::mem::align_of::<CSG_IdList__bindgen_ty_1>() - 8usize];
    ["Offset of field: CSG_IdList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CSG_IdList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CSG_IdList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CSG_IdList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CSG_IdList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CSG_IdList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CSG_IdList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CSG_IdList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CSG_IdList"][::std::mem::size_of::<CSG_IdList>() - 48usize];
    ["Alignment of CSG_IdList"][::std::mem::align_of::<CSG_IdList>() - 8usize];
    ["Offset of field: CSG_IdList::list"][::std::mem::offset_of!(CSG_IdList, list) - 0usize];
    ["Offset of field: CSG_IdList::_asn_ctx"]
        [::std::mem::offset_of!(CSG_IdList, _asn_ctx) - 24usize];
};
pub type CSG_IdList_t = CSG_IdList;
unsafe extern "C" {
    pub static mut asn_DEF_CSG_IdList: asn_TYPE_descriptor_t;
}
pub type CSG_Id_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_CSG_Id_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CSG_Id: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn CSG_Id_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CSG_Id_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSG_Id_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSG_Id_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSG_Id_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSG_Id_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSG_Id_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSG_Id_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSG_Id_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSG_Id_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSG_Id_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSG_IdList_Item {
    pub cSG_Id: CSG_Id_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CSG_IdList_Item"][::std::mem::size_of::<CSG_IdList_Item>() - 80usize];
    ["Alignment of CSG_IdList_Item"][::std::mem::align_of::<CSG_IdList_Item>() - 8usize];
    ["Offset of field: CSG_IdList_Item::cSG_Id"]
        [::std::mem::offset_of!(CSG_IdList_Item, cSG_Id) - 0usize];
    ["Offset of field: CSG_IdList_Item::iE_Extensions"]
        [::std::mem::offset_of!(CSG_IdList_Item, iE_Extensions) - 48usize];
    ["Offset of field: CSG_IdList_Item::_asn_ctx"]
        [::std::mem::offset_of!(CSG_IdList_Item, _asn_ctx) - 56usize];
};
pub type CSG_IdList_Item_t = CSG_IdList_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CSG_IdList_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CSG_IdList_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CSG_IdList_Item_1: [asn_TYPE_member_t; 2usize];
}
pub type UE_Application_Layer_Measurement_Capability_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UE_Application_Layer_Measurement_Capability: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_Application_Layer_Measurement_Capability_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ResetAll_ResetAll_reset_all: ResetAll = 0;
pub type ResetAll = ::std::os::raw::c_uint;
pub use self::ResetAll as e_ResetAll;
pub type ResetAll_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ResetAll_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ResetAll: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ResetAll_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ResetAll_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ResetAll_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ResetAll_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ResetAll_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ResetAll_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ResetAll_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ResetAll_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ResetAll_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ResetAll_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ResetAll_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ResetAll_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ResetType_PR_ResetType_PR_NOTHING: ResetType_PR = 0;
pub const ResetType_PR_ResetType_PR_s1_Interface: ResetType_PR = 1;
pub const ResetType_PR_ResetType_PR_partOfS1_Interface: ResetType_PR = 2;
pub type ResetType_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct ResetType {
    pub present: ResetType_PR,
    pub choice: ResetType_ResetType_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union ResetType_ResetType_u {
    pub s1_Interface: ResetAll_t,
    pub partOfS1_Interface: UE_associatedLogicalS1_ConnectionListRes_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ResetType_ResetType_u"][::std::mem::size_of::<ResetType_ResetType_u>() - 48usize];
    ["Alignment of ResetType_ResetType_u"]
        [::std::mem::align_of::<ResetType_ResetType_u>() - 8usize];
    ["Offset of field: ResetType_ResetType_u::s1_Interface"]
        [::std::mem::offset_of!(ResetType_ResetType_u, s1_Interface) - 0usize];
    ["Offset of field: ResetType_ResetType_u::partOfS1_Interface"]
        [::std::mem::offset_of!(ResetType_ResetType_u, partOfS1_Interface) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ResetType"][::std::mem::size_of::<ResetType>() - 80usize];
    ["Alignment of ResetType"][::std::mem::align_of::<ResetType>() - 8usize];
    ["Offset of field: ResetType::present"][::std::mem::offset_of!(ResetType, present) - 0usize];
    ["Offset of field: ResetType::choice"][::std::mem::offset_of!(ResetType, choice) - 8usize];
    ["Offset of field: ResetType::_asn_ctx"][::std::mem::offset_of!(ResetType, _asn_ctx) - 56usize];
};
pub type ResetType_t = ResetType;
unsafe extern "C" {
    pub static mut asn_DEF_ResetType: asn_TYPE_descriptor_t;
}
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hfhalf: Paging_eDRX_Cycle = 0;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf1: Paging_eDRX_Cycle = 1;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf2: Paging_eDRX_Cycle = 2;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf4: Paging_eDRX_Cycle = 3;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf6: Paging_eDRX_Cycle = 4;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf8: Paging_eDRX_Cycle = 5;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf10: Paging_eDRX_Cycle = 6;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf12: Paging_eDRX_Cycle = 7;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf14: Paging_eDRX_Cycle = 8;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf16: Paging_eDRX_Cycle = 9;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf32: Paging_eDRX_Cycle = 10;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf64: Paging_eDRX_Cycle = 11;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf128: Paging_eDRX_Cycle = 12;
pub const Paging_eDRX_Cycle_Paging_eDRX_Cycle_hf256: Paging_eDRX_Cycle = 13;
pub type Paging_eDRX_Cycle = ::std::os::raw::c_uint;
pub use self::Paging_eDRX_Cycle as e_Paging_eDRX_Cycle;
pub type Paging_eDRX_Cycle_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Paging_eDRX_Cycle_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Paging_eDRX_Cycle: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Paging_eDRX_Cycle_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Paging_eDRX_Cycle_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const PagingTimeWindow_PagingTimeWindow_s1: PagingTimeWindow = 0;
pub const PagingTimeWindow_PagingTimeWindow_s2: PagingTimeWindow = 1;
pub const PagingTimeWindow_PagingTimeWindow_s3: PagingTimeWindow = 2;
pub const PagingTimeWindow_PagingTimeWindow_s4: PagingTimeWindow = 3;
pub const PagingTimeWindow_PagingTimeWindow_s5: PagingTimeWindow = 4;
pub const PagingTimeWindow_PagingTimeWindow_s6: PagingTimeWindow = 5;
pub const PagingTimeWindow_PagingTimeWindow_s7: PagingTimeWindow = 6;
pub const PagingTimeWindow_PagingTimeWindow_s8: PagingTimeWindow = 7;
pub const PagingTimeWindow_PagingTimeWindow_s9: PagingTimeWindow = 8;
pub const PagingTimeWindow_PagingTimeWindow_s10: PagingTimeWindow = 9;
pub const PagingTimeWindow_PagingTimeWindow_s11: PagingTimeWindow = 10;
pub const PagingTimeWindow_PagingTimeWindow_s12: PagingTimeWindow = 11;
pub const PagingTimeWindow_PagingTimeWindow_s13: PagingTimeWindow = 12;
pub const PagingTimeWindow_PagingTimeWindow_s14: PagingTimeWindow = 13;
pub const PagingTimeWindow_PagingTimeWindow_s15: PagingTimeWindow = 14;
pub const PagingTimeWindow_PagingTimeWindow_s16: PagingTimeWindow = 15;
pub type PagingTimeWindow = ::std::os::raw::c_uint;
pub use self::PagingTimeWindow as e_PagingTimeWindow;
pub type PagingTimeWindow_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PagingTimeWindow_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PagingTimeWindow: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_PagingTimeWindow_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PagingTimeWindow_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingTimeWindow_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Paging_eDRXInformation {
    pub paging_eDRX_Cycle: Paging_eDRX_Cycle_t,
    pub pagingTimeWindow: *mut PagingTimeWindow_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Paging_eDRXInformation"][::std::mem::size_of::<Paging_eDRXInformation>() - 48usize];
    ["Alignment of Paging_eDRXInformation"]
        [::std::mem::align_of::<Paging_eDRXInformation>() - 8usize];
    ["Offset of field: Paging_eDRXInformation::paging_eDRX_Cycle"]
        [::std::mem::offset_of!(Paging_eDRXInformation, paging_eDRX_Cycle) - 0usize];
    ["Offset of field: Paging_eDRXInformation::pagingTimeWindow"]
        [::std::mem::offset_of!(Paging_eDRXInformation, pagingTimeWindow) - 8usize];
    ["Offset of field: Paging_eDRXInformation::iE_Extensions"]
        [::std::mem::offset_of!(Paging_eDRXInformation, iE_Extensions) - 16usize];
    ["Offset of field: Paging_eDRXInformation::_asn_ctx"]
        [::std::mem::offset_of!(Paging_eDRXInformation, _asn_ctx) - 24usize];
};
pub type Paging_eDRXInformation_t = Paging_eDRXInformation;
unsafe extern "C" {
    pub static mut asn_DEF_Paging_eDRXInformation: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIList {
    pub list: TAIList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIList__bindgen_ty_1"][::std::mem::size_of::<TAIList__bindgen_ty_1>() - 24usize];
    ["Alignment of TAIList__bindgen_ty_1"]
        [::std::mem::align_of::<TAIList__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAIList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAIList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAIList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAIList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAIList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAIList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAIList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAIList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIList"][::std::mem::size_of::<TAIList>() - 48usize];
    ["Alignment of TAIList"][::std::mem::align_of::<TAIList>() - 8usize];
    ["Offset of field: TAIList::list"][::std::mem::offset_of!(TAIList, list) - 0usize];
    ["Offset of field: TAIList::_asn_ctx"][::std::mem::offset_of!(TAIList, _asn_ctx) - 24usize];
};
pub type TAIList_t = TAIList;
unsafe extern "C" {
    pub static mut asn_DEF_TAIList: asn_TYPE_descriptor_t;
}
pub const Cdma2000HOStatus_Cdma2000HOStatus_hOSuccess: Cdma2000HOStatus = 0;
pub const Cdma2000HOStatus_Cdma2000HOStatus_hOFailure: Cdma2000HOStatus = 1;
pub type Cdma2000HOStatus = ::std::os::raw::c_uint;
pub use self::Cdma2000HOStatus as e_Cdma2000HOStatus;
pub type Cdma2000HOStatus_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000HOStatus: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HOStatus_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSwitchedULItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSwitchedULItem"]
        [::std::mem::size_of::<E_RABToBeSwitchedULItem>() - 128usize];
    ["Alignment of E_RABToBeSwitchedULItem"]
        [::std::mem::align_of::<E_RABToBeSwitchedULItem>() - 8usize];
    ["Offset of field: E_RABToBeSwitchedULItem::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeSwitchedULItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeSwitchedULItem::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABToBeSwitchedULItem, transportLayerAddress) - 8usize];
    ["Offset of field: E_RABToBeSwitchedULItem::gTP_TEID"]
        [::std::mem::offset_of!(E_RABToBeSwitchedULItem, gTP_TEID) - 56usize];
    ["Offset of field: E_RABToBeSwitchedULItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeSwitchedULItem, iE_Extensions) - 96usize];
    ["Offset of field: E_RABToBeSwitchedULItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeSwitchedULItem, _asn_ctx) - 104usize];
};
pub type E_RABToBeSwitchedULItem_t = E_RABToBeSwitchedULItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSwitchedULItem: asn_TYPE_descriptor_t;
}
pub type NRencryptionAlgorithms_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_NRencryptionAlgorithms_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NRencryptionAlgorithms: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRencryptionAlgorithms_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListforQMC {
    pub list: TAIListforQMC__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListforQMC__bindgen_ty_1 {
    pub array: *mut *mut TAI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListforQMC__bindgen_ty_1"]
        [::std::mem::size_of::<TAIListforQMC__bindgen_ty_1>() - 24usize];
    ["Alignment of TAIListforQMC__bindgen_ty_1"]
        [::std::mem::align_of::<TAIListforQMC__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAIListforQMC__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAIListforQMC__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAIListforQMC__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAIListforQMC__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAIListforQMC__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAIListforQMC__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAIListforQMC__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAIListforQMC__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListforQMC"][::std::mem::size_of::<TAIListforQMC>() - 48usize];
    ["Alignment of TAIListforQMC"][::std::mem::align_of::<TAIListforQMC>() - 8usize];
    ["Offset of field: TAIListforQMC::list"][::std::mem::offset_of!(TAIListforQMC, list) - 0usize];
    ["Offset of field: TAIListforQMC::_asn_ctx"]
        [::std::mem::offset_of!(TAIListforQMC, _asn_ctx) - 24usize];
};
pub type TAIListforQMC_t = TAIListforQMC;
unsafe extern "C" {
    pub static mut asn_DEF_TAIListforQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAIListforQMC_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAIListforQMC_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_TAIListforQMC_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIBasedQMC {
    pub tAIListforQMC: TAIListforQMC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIBasedQMC"][::std::mem::size_of::<TAIBasedQMC>() - 80usize];
    ["Alignment of TAIBasedQMC"][::std::mem::align_of::<TAIBasedQMC>() - 8usize];
    ["Offset of field: TAIBasedQMC::tAIListforQMC"]
        [::std::mem::offset_of!(TAIBasedQMC, tAIListforQMC) - 0usize];
    ["Offset of field: TAIBasedQMC::iE_Extensions"]
        [::std::mem::offset_of!(TAIBasedQMC, iE_Extensions) - 48usize];
    ["Offset of field: TAIBasedQMC::_asn_ctx"]
        [::std::mem::offset_of!(TAIBasedQMC, _asn_ctx) - 56usize];
};
pub type TAIBasedQMC_t = TAIBasedQMC;
unsafe extern "C" {
    pub static mut asn_DEF_TAIBasedQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TAIBasedQMC_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TAIBasedQMC_1: [asn_TYPE_member_t; 2usize];
}
pub type ExtendedRepetitionPeriod_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_ExtendedRepetitionPeriod: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedRepetitionPeriod_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupListCtxtSURes {
    pub list: E_RABSetupListCtxtSURes__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupListCtxtSURes__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupListCtxtSURes__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABSetupListCtxtSURes__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABSetupListCtxtSURes__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABSetupListCtxtSURes__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABSetupListCtxtSURes__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABSetupListCtxtSURes__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABSetupListCtxtSURes__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABSetupListCtxtSURes__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABSetupListCtxtSURes__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABSetupListCtxtSURes__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABSetupListCtxtSURes__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABSetupListCtxtSURes__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupListCtxtSURes"][::std::mem::size_of::<E_RABSetupListCtxtSURes>() - 48usize];
    ["Alignment of E_RABSetupListCtxtSURes"]
        [::std::mem::align_of::<E_RABSetupListCtxtSURes>() - 8usize];
    ["Offset of field: E_RABSetupListCtxtSURes::list"]
        [::std::mem::offset_of!(E_RABSetupListCtxtSURes, list) - 0usize];
    ["Offset of field: E_RABSetupListCtxtSURes::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSetupListCtxtSURes, _asn_ctx) - 24usize];
};
pub type E_RABSetupListCtxtSURes_t = E_RABSetupListCtxtSURes;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSetupListCtxtSURes: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBX2ExtTLAs {
    pub list: ENBX2ExtTLAs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBX2ExtTLAs__bindgen_ty_1 {
    pub array: *mut *mut ENBX2ExtTLA,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ENBX2ExtTLA)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBX2ExtTLAs__bindgen_ty_1"]
        [::std::mem::size_of::<ENBX2ExtTLAs__bindgen_ty_1>() - 24usize];
    ["Alignment of ENBX2ExtTLAs__bindgen_ty_1"]
        [::std::mem::align_of::<ENBX2ExtTLAs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ENBX2ExtTLAs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ENBX2ExtTLAs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ENBX2ExtTLAs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ENBX2ExtTLAs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ENBX2ExtTLAs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ENBX2ExtTLAs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ENBX2ExtTLAs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ENBX2ExtTLAs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBX2ExtTLAs"][::std::mem::size_of::<ENBX2ExtTLAs>() - 48usize];
    ["Alignment of ENBX2ExtTLAs"][::std::mem::align_of::<ENBX2ExtTLAs>() - 8usize];
    ["Offset of field: ENBX2ExtTLAs::list"][::std::mem::offset_of!(ENBX2ExtTLAs, list) - 0usize];
    ["Offset of field: ENBX2ExtTLAs::_asn_ctx"]
        [::std::mem::offset_of!(ENBX2ExtTLAs, _asn_ctx) - 24usize];
};
pub type ENBX2ExtTLAs_t = ENBX2ExtTLAs;
unsafe extern "C" {
    pub static mut asn_DEF_ENBX2ExtTLAs: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBX2ExtTLA {
    pub iPsecTLA: *mut TransportLayerAddress_t,
    pub gTPTLAa: *mut ENBX2GTPTLAs,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBX2ExtTLA"][::std::mem::size_of::<ENBX2ExtTLA>() - 48usize];
    ["Alignment of ENBX2ExtTLA"][::std::mem::align_of::<ENBX2ExtTLA>() - 8usize];
    ["Offset of field: ENBX2ExtTLA::iPsecTLA"]
        [::std::mem::offset_of!(ENBX2ExtTLA, iPsecTLA) - 0usize];
    ["Offset of field: ENBX2ExtTLA::gTPTLAa"]
        [::std::mem::offset_of!(ENBX2ExtTLA, gTPTLAa) - 8usize];
    ["Offset of field: ENBX2ExtTLA::iE_Extensions"]
        [::std::mem::offset_of!(ENBX2ExtTLA, iE_Extensions) - 16usize];
    ["Offset of field: ENBX2ExtTLA::_asn_ctx"]
        [::std::mem::offset_of!(ENBX2ExtTLA, _asn_ctx) - 24usize];
};
pub type ENBX2ExtTLA_t = ENBX2ExtTLA;
unsafe extern "C" {
    pub static mut asn_DEF_ENBX2ExtTLA: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBX2ExtTLA_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBX2ExtTLA_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBX2GTPTLAs {
    pub list: ENBX2GTPTLAs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ENBX2GTPTLAs__bindgen_ty_1 {
    pub array: *mut *mut TransportLayerAddress_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TransportLayerAddress_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBX2GTPTLAs__bindgen_ty_1"]
        [::std::mem::size_of::<ENBX2GTPTLAs__bindgen_ty_1>() - 24usize];
    ["Alignment of ENBX2GTPTLAs__bindgen_ty_1"]
        [::std::mem::align_of::<ENBX2GTPTLAs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ENBX2GTPTLAs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ENBX2GTPTLAs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ENBX2GTPTLAs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ENBX2GTPTLAs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ENBX2GTPTLAs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ENBX2GTPTLAs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ENBX2GTPTLAs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ENBX2GTPTLAs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ENBX2GTPTLAs"][::std::mem::size_of::<ENBX2GTPTLAs>() - 48usize];
    ["Alignment of ENBX2GTPTLAs"][::std::mem::align_of::<ENBX2GTPTLAs>() - 8usize];
    ["Offset of field: ENBX2GTPTLAs::list"][::std::mem::offset_of!(ENBX2GTPTLAs, list) - 0usize];
    ["Offset of field: ENBX2GTPTLAs::_asn_ctx"]
        [::std::mem::offset_of!(ENBX2GTPTLAs, _asn_ctx) - 24usize];
};
pub type ENBX2GTPTLAs_t = ENBX2GTPTLAs;
unsafe extern "C" {
    pub static mut asn_DEF_ENBX2GTPTLAs: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ENBX2GTPTLAs_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ENBX2GTPTLAs_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ENBX2GTPTLAs_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LTE_NTN_TAI_Information {
    pub servingPLMN: PLMNidentity_t,
    pub tACList_In_LTE_NTN: TACList_In_LTE_NTN_t,
    pub uE_Location_Derived_TAC: *mut TAC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LTE_NTN_TAI_Information"]
        [::std::mem::size_of::<LTE_NTN_TAI_Information>() - 128usize];
    ["Alignment of LTE_NTN_TAI_Information"]
        [::std::mem::align_of::<LTE_NTN_TAI_Information>() - 8usize];
    ["Offset of field: LTE_NTN_TAI_Information::servingPLMN"]
        [::std::mem::offset_of!(LTE_NTN_TAI_Information, servingPLMN) - 0usize];
    ["Offset of field: LTE_NTN_TAI_Information::tACList_In_LTE_NTN"]
        [::std::mem::offset_of!(LTE_NTN_TAI_Information, tACList_In_LTE_NTN) - 40usize];
    ["Offset of field: LTE_NTN_TAI_Information::uE_Location_Derived_TAC"]
        [::std::mem::offset_of!(LTE_NTN_TAI_Information, uE_Location_Derived_TAC) - 88usize];
    ["Offset of field: LTE_NTN_TAI_Information::iE_Extensions"]
        [::std::mem::offset_of!(LTE_NTN_TAI_Information, iE_Extensions) - 96usize];
    ["Offset of field: LTE_NTN_TAI_Information::_asn_ctx"]
        [::std::mem::offset_of!(LTE_NTN_TAI_Information, _asn_ctx) - 104usize];
};
pub type LTE_NTN_TAI_Information_t = LTE_NTN_TAI_Information;
unsafe extern "C" {
    pub static mut asn_DEF_LTE_NTN_TAI_Information: asn_TYPE_descriptor_t;
}
pub const PS_ServiceNotAvailable_PS_ServiceNotAvailable_ps_service_not_available:
    PS_ServiceNotAvailable = 0;
pub type PS_ServiceNotAvailable = ::std::os::raw::c_uint;
pub use self::PS_ServiceNotAvailable as e_PS_ServiceNotAvailable;
pub type PS_ServiceNotAvailable_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_PS_ServiceNotAvailable: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PS_ServiceNotAvailable_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const NotifySourceeNB_NotifySourceeNB_notifySource: NotifySourceeNB = 0;
pub type NotifySourceeNB = ::std::os::raw::c_uint;
pub use self::NotifySourceeNB as e_NotifySourceeNB;
pub type NotifySourceeNB_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_NotifySourceeNB: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NotifySourceeNB_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NotifySourceeNB_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type SourceBSS_ToTargetBSS_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_SourceBSS_ToTargetBSS_TransparentContainer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceBSS_ToTargetBSS_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const TriggeringMessage_TriggeringMessage_initiating_message: TriggeringMessage = 0;
pub const TriggeringMessage_TriggeringMessage_successful_outcome: TriggeringMessage = 1;
pub const TriggeringMessage_TriggeringMessage_unsuccessfull_outcome: TriggeringMessage = 2;
pub type TriggeringMessage = ::std::os::raw::c_uint;
pub use self::TriggeringMessage as e_TriggeringMessage;
pub type TriggeringMessage_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_TriggeringMessage_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_TriggeringMessage: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_TriggeringMessage_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TriggeringMessage_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TriggeringMessage_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TriggeringMessage_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TriggeringMessage_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const CellAccessMode_CellAccessMode_hybrid: CellAccessMode = 0;
pub type CellAccessMode = ::std::os::raw::c_uint;
pub use self::CellAccessMode as e_CellAccessMode;
pub type CellAccessMode_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CellAccessMode_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CellAccessMode: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CellAccessMode_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CellAccessMode_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CellAccessMode_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CellAccessMode_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CellAccessMode_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type SourceRNC_ToTargetRNC_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_SourceRNC_ToTargetRNC_TransparentContainer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceRNC_ToTargetRNC_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CriticalityDiagnostics_IE_List {
    pub list: CriticalityDiagnostics_IE_List__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CriticalityDiagnostics_IE_List__bindgen_ty_1 {
    pub array: *mut *mut CriticalityDiagnostics_IE_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free:
        ::std::option::Option<unsafe extern "C" fn(arg1: *mut CriticalityDiagnostics_IE_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CriticalityDiagnostics_IE_List__bindgen_ty_1"]
        [::std::mem::size_of::<CriticalityDiagnostics_IE_List__bindgen_ty_1>() - 24usize];
    ["Alignment of CriticalityDiagnostics_IE_List__bindgen_ty_1"]
        [::std::mem::align_of::<CriticalityDiagnostics_IE_List__bindgen_ty_1>() - 8usize];
    ["Offset of field: CriticalityDiagnostics_IE_List__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_List__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CriticalityDiagnostics_IE_List__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_List__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CriticalityDiagnostics_IE_List__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_List__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CriticalityDiagnostics_IE_List__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_List__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CriticalityDiagnostics_IE_List"]
        [::std::mem::size_of::<CriticalityDiagnostics_IE_List>() - 48usize];
    ["Alignment of CriticalityDiagnostics_IE_List"]
        [::std::mem::align_of::<CriticalityDiagnostics_IE_List>() - 8usize];
    ["Offset of field: CriticalityDiagnostics_IE_List::list"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_List, list) - 0usize];
    ["Offset of field: CriticalityDiagnostics_IE_List::_asn_ctx"]
        [::std::mem::offset_of!(CriticalityDiagnostics_IE_List, _asn_ctx) - 24usize];
};
pub type CriticalityDiagnostics_IE_List_t = CriticalityDiagnostics_IE_List;
unsafe extern "C" {
    pub static mut asn_DEF_CriticalityDiagnostics_IE_List: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CriticalityDiagnostics_IE_List_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CriticalityDiagnostics_IE_List_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_CriticalityDiagnostics_IE_List_constr_1: asn_per_constraints_t;
}
pub type Cdma2000OneXPilot_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000OneXPilot: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXPilot_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Cdma2000OneXSRVCCInfo {
    pub cdma2000OneXMEID: Cdma2000OneXMEID_t,
    pub cdma2000OneXMSI: Cdma2000OneXMSI_t,
    pub cdma2000OneXPilot: Cdma2000OneXPilot_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Cdma2000OneXSRVCCInfo"][::std::mem::size_of::<Cdma2000OneXSRVCCInfo>() - 152usize];
    ["Alignment of Cdma2000OneXSRVCCInfo"]
        [::std::mem::align_of::<Cdma2000OneXSRVCCInfo>() - 8usize];
    ["Offset of field: Cdma2000OneXSRVCCInfo::cdma2000OneXMEID"]
        [::std::mem::offset_of!(Cdma2000OneXSRVCCInfo, cdma2000OneXMEID) - 0usize];
    ["Offset of field: Cdma2000OneXSRVCCInfo::cdma2000OneXMSI"]
        [::std::mem::offset_of!(Cdma2000OneXSRVCCInfo, cdma2000OneXMSI) - 40usize];
    ["Offset of field: Cdma2000OneXSRVCCInfo::cdma2000OneXPilot"]
        [::std::mem::offset_of!(Cdma2000OneXSRVCCInfo, cdma2000OneXPilot) - 80usize];
    ["Offset of field: Cdma2000OneXSRVCCInfo::iE_Extensions"]
        [::std::mem::offset_of!(Cdma2000OneXSRVCCInfo, iE_Extensions) - 120usize];
    ["Offset of field: Cdma2000OneXSRVCCInfo::_asn_ctx"]
        [::std::mem::offset_of!(Cdma2000OneXSRVCCInfo, _asn_ctx) - 128usize];
};
pub type Cdma2000OneXSRVCCInfo_t = Cdma2000OneXSRVCCInfo;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000OneXSRVCCInfo: asn_TYPE_descriptor_t;
}
pub type SubscriberProfileIDforRFP_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_SubscriberProfileIDforRFP_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_SubscriberProfileIDforRFP: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SubscriberProfileIDforRFP_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CNTypeRestrictions {
    pub list: CNTypeRestrictions__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CNTypeRestrictions__bindgen_ty_1 {
    pub array: *mut *mut CNTypeRestrictions_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut CNTypeRestrictions_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CNTypeRestrictions__bindgen_ty_1"]
        [::std::mem::size_of::<CNTypeRestrictions__bindgen_ty_1>() - 24usize];
    ["Alignment of CNTypeRestrictions__bindgen_ty_1"]
        [::std::mem::align_of::<CNTypeRestrictions__bindgen_ty_1>() - 8usize];
    ["Offset of field: CNTypeRestrictions__bindgen_ty_1::array"]
        [::std::mem::offset_of!(CNTypeRestrictions__bindgen_ty_1, array) - 0usize];
    ["Offset of field: CNTypeRestrictions__bindgen_ty_1::count"]
        [::std::mem::offset_of!(CNTypeRestrictions__bindgen_ty_1, count) - 8usize];
    ["Offset of field: CNTypeRestrictions__bindgen_ty_1::size"]
        [::std::mem::offset_of!(CNTypeRestrictions__bindgen_ty_1, size) - 12usize];
    ["Offset of field: CNTypeRestrictions__bindgen_ty_1::free"]
        [::std::mem::offset_of!(CNTypeRestrictions__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CNTypeRestrictions"][::std::mem::size_of::<CNTypeRestrictions>() - 48usize];
    ["Alignment of CNTypeRestrictions"][::std::mem::align_of::<CNTypeRestrictions>() - 8usize];
    ["Offset of field: CNTypeRestrictions::list"]
        [::std::mem::offset_of!(CNTypeRestrictions, list) - 0usize];
    ["Offset of field: CNTypeRestrictions::_asn_ctx"]
        [::std::mem::offset_of!(CNTypeRestrictions, _asn_ctx) - 24usize];
};
pub type CNTypeRestrictions_t = CNTypeRestrictions;
unsafe extern "C" {
    pub static mut asn_DEF_CNTypeRestrictions: asn_TYPE_descriptor_t;
}
pub const CNType_CNType_fiveGCForbidden: CNType = 0;
pub const CNType_CNType_epc_Forbiddden: CNType = 1;
pub type CNType = ::std::os::raw::c_uint;
pub use self::CNType as e_CNType;
pub type CNType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CNType_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CNType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CNType_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CNType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CNType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CNType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CNType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CNType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CNType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CNType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CNType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CNTypeRestrictions_Item {
    pub pLMN_Identity: PLMNidentity_t,
    pub cNType: CNType_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CNTypeRestrictions_Item"][::std::mem::size_of::<CNTypeRestrictions_Item>() - 80usize];
    ["Alignment of CNTypeRestrictions_Item"]
        [::std::mem::align_of::<CNTypeRestrictions_Item>() - 8usize];
    ["Offset of field: CNTypeRestrictions_Item::pLMN_Identity"]
        [::std::mem::offset_of!(CNTypeRestrictions_Item, pLMN_Identity) - 0usize];
    ["Offset of field: CNTypeRestrictions_Item::cNType"]
        [::std::mem::offset_of!(CNTypeRestrictions_Item, cNType) - 40usize];
    ["Offset of field: CNTypeRestrictions_Item::iE_Extensions"]
        [::std::mem::offset_of!(CNTypeRestrictions_Item, iE_Extensions) - 48usize];
    ["Offset of field: CNTypeRestrictions_Item::_asn_ctx"]
        [::std::mem::offset_of!(CNTypeRestrictions_Item, _asn_ctx) - 56usize];
};
pub type CNTypeRestrictions_Item_t = CNTypeRestrictions_Item;
unsafe extern "C" {
    pub static mut asn_DEF_CNTypeRestrictions_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CNTypeRestrictions_Item_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CNTypeRestrictions_Item_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Bearers_SubjectToStatusTransfer_Item {
    pub e_RAB_ID: E_RAB_ID_t,
    pub uL_COUNTvalue: COUNTvalue_t,
    pub dL_COUNTvalue: COUNTvalue_t,
    pub receiveStatusofULPDCPSDUs: *mut ReceiveStatusofULPDCPSDUs_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Bearers_SubjectToStatusTransfer_Item"]
        [::std::mem::size_of::<Bearers_SubjectToStatusTransfer_Item>() - 144usize];
    ["Alignment of Bearers_SubjectToStatusTransfer_Item"]
        [::std::mem::align_of::<Bearers_SubjectToStatusTransfer_Item>() - 8usize];
    ["Offset of field: Bearers_SubjectToStatusTransfer_Item::e_RAB_ID"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransfer_Item, e_RAB_ID) - 0usize];
    ["Offset of field: Bearers_SubjectToStatusTransfer_Item::uL_COUNTvalue"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransfer_Item, uL_COUNTvalue) - 8usize];
    ["Offset of field: Bearers_SubjectToStatusTransfer_Item::dL_COUNTvalue"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransfer_Item, dL_COUNTvalue) - 56usize];
    ["Offset of field: Bearers_SubjectToStatusTransfer_Item::receiveStatusofULPDCPSDUs"][::std::mem::offset_of!(
        Bearers_SubjectToStatusTransfer_Item,
        receiveStatusofULPDCPSDUs
    )
        - 104usize];
    ["Offset of field: Bearers_SubjectToStatusTransfer_Item::iE_Extensions"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransfer_Item, iE_Extensions) - 112usize];
    ["Offset of field: Bearers_SubjectToStatusTransfer_Item::_asn_ctx"]
        [::std::mem::offset_of!(Bearers_SubjectToStatusTransfer_Item, _asn_ctx) - 120usize];
};
pub type Bearers_SubjectToStatusTransfer_Item_t = Bearers_SubjectToStatusTransfer_Item;
unsafe extern "C" {
    pub static mut asn_DEF_Bearers_SubjectToStatusTransfer_Item: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UL_CP_SecurityInformation {
    pub ul_NAS_MAC: UL_NAS_MAC_t,
    pub ul_NAS_Count: UL_NAS_Count_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UL_CP_SecurityInformation"]
        [::std::mem::size_of::<UL_CP_SecurityInformation>() - 128usize];
    ["Alignment of UL_CP_SecurityInformation"]
        [::std::mem::align_of::<UL_CP_SecurityInformation>() - 8usize];
    ["Offset of field: UL_CP_SecurityInformation::ul_NAS_MAC"]
        [::std::mem::offset_of!(UL_CP_SecurityInformation, ul_NAS_MAC) - 0usize];
    ["Offset of field: UL_CP_SecurityInformation::ul_NAS_Count"]
        [::std::mem::offset_of!(UL_CP_SecurityInformation, ul_NAS_Count) - 48usize];
    ["Offset of field: UL_CP_SecurityInformation::iE_Extensions"]
        [::std::mem::offset_of!(UL_CP_SecurityInformation, iE_Extensions) - 96usize];
    ["Offset of field: UL_CP_SecurityInformation::_asn_ctx"]
        [::std::mem::offset_of!(UL_CP_SecurityInformation, _asn_ctx) - 104usize];
};
pub type UL_CP_SecurityInformation_t = UL_CP_SecurityInformation;
unsafe extern "C" {
    pub static mut asn_DEF_UL_CP_SecurityInformation: asn_TYPE_descriptor_t;
}
pub type WarningSecurityInfo_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_WarningSecurityInfo: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WarningSecurityInfo_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UEAggregateMaximumBitrate {
    pub uEaggregateMaximumBitRateDL: BitRate_t,
    pub uEaggregateMaximumBitRateUL: BitRate_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEAggregateMaximumBitrate"]
        [::std::mem::size_of::<UEAggregateMaximumBitrate>() - 64usize];
    ["Alignment of UEAggregateMaximumBitrate"]
        [::std::mem::align_of::<UEAggregateMaximumBitrate>() - 8usize];
    ["Offset of field: UEAggregateMaximumBitrate::uEaggregateMaximumBitRateDL"]
        [::std::mem::offset_of!(UEAggregateMaximumBitrate, uEaggregateMaximumBitRateDL) - 0usize];
    ["Offset of field: UEAggregateMaximumBitrate::uEaggregateMaximumBitRateUL"]
        [::std::mem::offset_of!(UEAggregateMaximumBitrate, uEaggregateMaximumBitRateUL) - 16usize];
    ["Offset of field: UEAggregateMaximumBitrate::iE_Extensions"]
        [::std::mem::offset_of!(UEAggregateMaximumBitrate, iE_Extensions) - 32usize];
    ["Offset of field: UEAggregateMaximumBitrate::_asn_ctx"]
        [::std::mem::offset_of!(UEAggregateMaximumBitrate, _asn_ctx) - 40usize];
};
pub type UEAggregateMaximumBitrate_t = UEAggregateMaximumBitrate;
unsafe extern "C" {
    pub static mut asn_DEF_UEAggregateMaximumBitrate: asn_TYPE_descriptor_t;
}
pub const NRrestrictioninEPSasSecondaryRAT_NRrestrictioninEPSasSecondaryRAT_nRrestrictedinEPSasSecondaryRAT : NRrestrictioninEPSasSecondaryRAT = 0 ;
pub type NRrestrictioninEPSasSecondaryRAT = ::std::os::raw::c_uint;
pub use self::NRrestrictioninEPSasSecondaryRAT as e_NRrestrictioninEPSasSecondaryRAT;
pub type NRrestrictioninEPSasSecondaryRAT_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_NRrestrictioninEPSasSecondaryRAT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictioninEPSasSecondaryRAT_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type DataSize_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_DataSize: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn DataSize_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn DataSize_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DataSize_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DataSize_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataSize_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DataSize_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataSize_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DataSize_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataSize_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DataSize_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataSize_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type RRC_Container_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_RRC_Container: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RRC_Container_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RRC_Container_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RRC_Container_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RRC_Container_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Container_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Container_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Container_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Container_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Container_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Container_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Container_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_HistoryInformation {
    pub list: UE_HistoryInformation__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_HistoryInformation__bindgen_ty_1 {
    pub array: *mut *mut LastVisitedCell_Item,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut LastVisitedCell_Item)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_HistoryInformation__bindgen_ty_1"]
        [::std::mem::size_of::<UE_HistoryInformation__bindgen_ty_1>() - 24usize];
    ["Alignment of UE_HistoryInformation__bindgen_ty_1"]
        [::std::mem::align_of::<UE_HistoryInformation__bindgen_ty_1>() - 8usize];
    ["Offset of field: UE_HistoryInformation__bindgen_ty_1::array"]
        [::std::mem::offset_of!(UE_HistoryInformation__bindgen_ty_1, array) - 0usize];
    ["Offset of field: UE_HistoryInformation__bindgen_ty_1::count"]
        [::std::mem::offset_of!(UE_HistoryInformation__bindgen_ty_1, count) - 8usize];
    ["Offset of field: UE_HistoryInformation__bindgen_ty_1::size"]
        [::std::mem::offset_of!(UE_HistoryInformation__bindgen_ty_1, size) - 12usize];
    ["Offset of field: UE_HistoryInformation__bindgen_ty_1::free"]
        [::std::mem::offset_of!(UE_HistoryInformation__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_HistoryInformation"][::std::mem::size_of::<UE_HistoryInformation>() - 48usize];
    ["Alignment of UE_HistoryInformation"]
        [::std::mem::align_of::<UE_HistoryInformation>() - 8usize];
    ["Offset of field: UE_HistoryInformation::list"]
        [::std::mem::offset_of!(UE_HistoryInformation, list) - 0usize];
    ["Offset of field: UE_HistoryInformation::_asn_ctx"]
        [::std::mem::offset_of!(UE_HistoryInformation, _asn_ctx) - 24usize];
};
pub type UE_HistoryInformation_t = UE_HistoryInformation;
unsafe extern "C" {
    pub static mut asn_DEF_UE_HistoryInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_UE_HistoryInformation_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_UE_HistoryInformation_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_UE_HistoryInformation_constr_1: asn_per_constraints_t;
}
pub const Cell_Size_Cell_Size_verysmall: Cell_Size = 0;
pub const Cell_Size_Cell_Size_small: Cell_Size = 1;
pub const Cell_Size_Cell_Size_medium: Cell_Size = 2;
pub const Cell_Size_Cell_Size_large: Cell_Size = 3;
pub type Cell_Size = ::std::os::raw::c_uint;
pub use self::Cell_Size as e_Cell_Size;
pub type Cell_Size_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Cell_Size_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Cell_Size: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Cell_Size_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Cell_Size_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cell_Size_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cell_Size_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cell_Size_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cell_Size_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cell_Size_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cell_Size_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cell_Size_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cell_Size_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cell_Size_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cell_Size_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellType {
    pub cell_Size: Cell_Size_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellType"][::std::mem::size_of::<CellType>() - 40usize];
    ["Alignment of CellType"][::std::mem::align_of::<CellType>() - 8usize];
    ["Offset of field: CellType::cell_Size"][::std::mem::offset_of!(CellType, cell_Size) - 0usize];
    ["Offset of field: CellType::iE_Extensions"]
        [::std::mem::offset_of!(CellType, iE_Extensions) - 8usize];
    ["Offset of field: CellType::_asn_ctx"][::std::mem::offset_of!(CellType, _asn_ctx) - 16usize];
};
pub type CellType_t = CellType;
unsafe extern "C" {
    pub static mut asn_DEF_CellType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellType_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellType_1: [asn_TYPE_member_t; 2usize];
}
pub type Time_UE_StayedInCell_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Time_UE_StayedInCell_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Time_UE_StayedInCell: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LastVisitedEUTRANCellInformation {
    pub global_Cell_ID: EUTRAN_CGI_t,
    pub cellType: CellType_t,
    pub time_UE_StayedInCell: Time_UE_StayedInCell_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedEUTRANCellInformation"]
        [::std::mem::size_of::<LastVisitedEUTRANCellInformation>() - 200usize];
    ["Alignment of LastVisitedEUTRANCellInformation"]
        [::std::mem::align_of::<LastVisitedEUTRANCellInformation>() - 8usize];
    ["Offset of field: LastVisitedEUTRANCellInformation::global_Cell_ID"]
        [::std::mem::offset_of!(LastVisitedEUTRANCellInformation, global_Cell_ID) - 0usize];
    ["Offset of field: LastVisitedEUTRANCellInformation::cellType"]
        [::std::mem::offset_of!(LastVisitedEUTRANCellInformation, cellType) - 120usize];
    ["Offset of field: LastVisitedEUTRANCellInformation::time_UE_StayedInCell"]
        [::std::mem::offset_of!(LastVisitedEUTRANCellInformation, time_UE_StayedInCell) - 160usize];
    ["Offset of field: LastVisitedEUTRANCellInformation::iE_Extensions"]
        [::std::mem::offset_of!(LastVisitedEUTRANCellInformation, iE_Extensions) - 168usize];
    ["Offset of field: LastVisitedEUTRANCellInformation::_asn_ctx"]
        [::std::mem::offset_of!(LastVisitedEUTRANCellInformation, _asn_ctx) - 176usize];
};
pub type LastVisitedEUTRANCellInformation_t = LastVisitedEUTRANCellInformation;
unsafe extern "C" {
    pub static mut asn_DEF_LastVisitedEUTRANCellInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LastVisitedEUTRANCellInformation_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LastVisitedEUTRANCellInformation_1: [asn_TYPE_member_t; 4usize];
}
pub type LastVisitedUTRANCellInformation_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_LastVisitedUTRANCellInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LastVisitedUTRANCellInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const LastVisitedCell_Item_PR_LastVisitedCell_Item_PR_NOTHING: LastVisitedCell_Item_PR = 0;
pub const LastVisitedCell_Item_PR_LastVisitedCell_Item_PR_e_UTRAN_Cell: LastVisitedCell_Item_PR = 1;
pub const LastVisitedCell_Item_PR_LastVisitedCell_Item_PR_uTRAN_Cell: LastVisitedCell_Item_PR = 2;
pub const LastVisitedCell_Item_PR_LastVisitedCell_Item_PR_gERAN_Cell: LastVisitedCell_Item_PR = 3;
pub const LastVisitedCell_Item_PR_LastVisitedCell_Item_PR_nG_RAN_Cell: LastVisitedCell_Item_PR = 4;
pub type LastVisitedCell_Item_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LastVisitedCell_Item {
    pub present: LastVisitedCell_Item_PR,
    pub choice: LastVisitedCell_Item_LastVisitedCell_Item_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LastVisitedCell_Item_LastVisitedCell_Item_u {
    pub e_UTRAN_Cell: LastVisitedEUTRANCellInformation_t,
    pub uTRAN_Cell: LastVisitedUTRANCellInformation_t,
    pub gERAN_Cell: LastVisitedGERANCellInformation_t,
    pub nG_RAN_Cell: LastVisitedNGRANCellInformation_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedCell_Item_LastVisitedCell_Item_u"]
        [::std::mem::size_of::<LastVisitedCell_Item_LastVisitedCell_Item_u>() - 200usize];
    ["Alignment of LastVisitedCell_Item_LastVisitedCell_Item_u"]
        [::std::mem::align_of::<LastVisitedCell_Item_LastVisitedCell_Item_u>() - 8usize];
    ["Offset of field: LastVisitedCell_Item_LastVisitedCell_Item_u::e_UTRAN_Cell"][::std::mem::offset_of!(
        LastVisitedCell_Item_LastVisitedCell_Item_u,
        e_UTRAN_Cell
    ) - 0usize];
    ["Offset of field: LastVisitedCell_Item_LastVisitedCell_Item_u::uTRAN_Cell"]
        [::std::mem::offset_of!(LastVisitedCell_Item_LastVisitedCell_Item_u, uTRAN_Cell) - 0usize];
    ["Offset of field: LastVisitedCell_Item_LastVisitedCell_Item_u::gERAN_Cell"]
        [::std::mem::offset_of!(LastVisitedCell_Item_LastVisitedCell_Item_u, gERAN_Cell) - 0usize];
    ["Offset of field: LastVisitedCell_Item_LastVisitedCell_Item_u::nG_RAN_Cell"]
        [::std::mem::offset_of!(LastVisitedCell_Item_LastVisitedCell_Item_u, nG_RAN_Cell) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LastVisitedCell_Item"][::std::mem::size_of::<LastVisitedCell_Item>() - 232usize];
    ["Alignment of LastVisitedCell_Item"][::std::mem::align_of::<LastVisitedCell_Item>() - 8usize];
    ["Offset of field: LastVisitedCell_Item::present"]
        [::std::mem::offset_of!(LastVisitedCell_Item, present) - 0usize];
    ["Offset of field: LastVisitedCell_Item::choice"]
        [::std::mem::offset_of!(LastVisitedCell_Item, choice) - 8usize];
    ["Offset of field: LastVisitedCell_Item::_asn_ctx"]
        [::std::mem::offset_of!(LastVisitedCell_Item, _asn_ctx) - 208usize];
};
pub type LastVisitedCell_Item_t = LastVisitedCell_Item;
unsafe extern "C" {
    pub static mut asn_DEF_LastVisitedCell_Item: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LastVisitedCell_Item_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LastVisitedCell_Item_1: [asn_TYPE_member_t; 4usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_LastVisitedCell_Item_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SourceeNB_ToTargeteNB_TransparentContainer {
    pub rRC_Container: RRC_Container_t,
    pub e_RABInformationList: *mut E_RABInformationList,
    pub targetCell_ID: EUTRAN_CGI_t,
    pub subscriberProfileIDforRFP: *mut SubscriberProfileIDforRFP_t,
    pub uE_HistoryInformation: UE_HistoryInformation_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SourceeNB_ToTargeteNB_TransparentContainer"]
        [::std::mem::size_of::<SourceeNB_ToTargeteNB_TransparentContainer>() - 256usize];
    ["Alignment of SourceeNB_ToTargeteNB_TransparentContainer"]
        [::std::mem::align_of::<SourceeNB_ToTargeteNB_TransparentContainer>() - 8usize];
    ["Offset of field: SourceeNB_ToTargeteNB_TransparentContainer::rRC_Container"][::std::mem::offset_of!(
        SourceeNB_ToTargeteNB_TransparentContainer,
        rRC_Container
    ) - 0usize];
    ["Offset of field: SourceeNB_ToTargeteNB_TransparentContainer::e_RABInformationList"][::std::mem::offset_of!(
        SourceeNB_ToTargeteNB_TransparentContainer,
        e_RABInformationList
    )
        - 40usize];
    ["Offset of field: SourceeNB_ToTargeteNB_TransparentContainer::targetCell_ID"][::std::mem::offset_of!(
        SourceeNB_ToTargeteNB_TransparentContainer,
        targetCell_ID
    ) - 48usize];
    ["Offset of field: SourceeNB_ToTargeteNB_TransparentContainer::subscriberProfileIDforRFP"][::std::mem::offset_of!(
        SourceeNB_ToTargeteNB_TransparentContainer,
        subscriberProfileIDforRFP
    )
        - 168usize];
    ["Offset of field: SourceeNB_ToTargeteNB_TransparentContainer::uE_HistoryInformation"][::std::mem::offset_of!(
        SourceeNB_ToTargeteNB_TransparentContainer,
        uE_HistoryInformation
    )
        - 176usize];
    ["Offset of field: SourceeNB_ToTargeteNB_TransparentContainer::iE_Extensions"][::std::mem::offset_of!(
        SourceeNB_ToTargeteNB_TransparentContainer,
        iE_Extensions
    ) - 224usize];
    ["Offset of field: SourceeNB_ToTargeteNB_TransparentContainer::_asn_ctx"]
        [::std::mem::offset_of!(SourceeNB_ToTargeteNB_TransparentContainer, _asn_ctx) - 232usize];
};
pub type SourceeNB_ToTargeteNB_TransparentContainer_t = SourceeNB_ToTargeteNB_TransparentContainer;
unsafe extern "C" {
    pub static mut asn_DEF_SourceeNB_ToTargeteNB_TransparentContainer: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABInformationList {
    pub list: E_RABInformationList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABInformationList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABInformationList__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABInformationList__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABInformationList__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABInformationList__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABInformationList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABInformationList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABInformationList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABInformationList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABInformationList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABInformationList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABInformationList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABInformationList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABInformationList"][::std::mem::size_of::<E_RABInformationList>() - 48usize];
    ["Alignment of E_RABInformationList"][::std::mem::align_of::<E_RABInformationList>() - 8usize];
    ["Offset of field: E_RABInformationList::list"]
        [::std::mem::offset_of!(E_RABInformationList, list) - 0usize];
    ["Offset of field: E_RABInformationList::_asn_ctx"]
        [::std::mem::offset_of!(E_RABInformationList, _asn_ctx) - 24usize];
};
pub type E_RABInformationList_t = E_RABInformationList;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABInformationList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_E_RABInformationList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_E_RABInformationList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_E_RABInformationList_constr_1: asn_per_constraints_t;
}
pub const DL_Forwarding_DL_Forwarding_dL_Forwarding_proposed: DL_Forwarding = 0;
pub type DL_Forwarding = ::std::os::raw::c_uint;
pub use self::DL_Forwarding as e_DL_Forwarding;
pub type DL_Forwarding_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_DL_Forwarding_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_DL_Forwarding: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_DL_Forwarding_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn DL_Forwarding_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DL_Forwarding_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DL_Forwarding_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DL_Forwarding_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const M4period_M4period_ms1024: M4period = 0;
pub const M4period_M4period_ms2048: M4period = 1;
pub const M4period_M4period_ms5120: M4period = 2;
pub const M4period_M4period_ms10240: M4period = 3;
pub const M4period_M4period_min1: M4period = 4;
pub type M4period = ::std::os::raw::c_uint;
pub use self::M4period as e_M4period;
pub type M4period_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_M4period_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M4period: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_M4period_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn M4period_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M4period_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M4period_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M4period_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M4period_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M4period_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M4period_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M4period_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M4period_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M4period_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M4period_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct M4Configuration {
    pub m4period: M4period_t,
    pub m4_links_to_log: Links_to_log_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of M4Configuration"][::std::mem::size_of::<M4Configuration>() - 48usize];
    ["Alignment of M4Configuration"][::std::mem::align_of::<M4Configuration>() - 8usize];
    ["Offset of field: M4Configuration::m4period"]
        [::std::mem::offset_of!(M4Configuration, m4period) - 0usize];
    ["Offset of field: M4Configuration::m4_links_to_log"]
        [::std::mem::offset_of!(M4Configuration, m4_links_to_log) - 8usize];
    ["Offset of field: M4Configuration::iE_Extensions"]
        [::std::mem::offset_of!(M4Configuration, iE_Extensions) - 16usize];
    ["Offset of field: M4Configuration::_asn_ctx"]
        [::std::mem::offset_of!(M4Configuration, _asn_ctx) - 24usize];
};
pub type M4Configuration_t = M4Configuration;
unsafe extern "C" {
    pub static mut asn_DEF_M4Configuration: asn_TYPE_descriptor_t;
}
pub type SecurityKey_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_SecurityKey_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_SecurityKey: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SecurityKey_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SecurityKey_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SecurityKey_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SecurityKey_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecurityKey_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecurityKey_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecurityKey_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecurityKey_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecurityKey_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecurityKey_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecurityKey_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SecurityContext {
    pub nextHopChainingCount: ::std::os::raw::c_long,
    pub nextHopParameter: SecurityKey_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SecurityContext"][::std::mem::size_of::<SecurityContext>() - 88usize];
    ["Alignment of SecurityContext"][::std::mem::align_of::<SecurityContext>() - 8usize];
    ["Offset of field: SecurityContext::nextHopChainingCount"]
        [::std::mem::offset_of!(SecurityContext, nextHopChainingCount) - 0usize];
    ["Offset of field: SecurityContext::nextHopParameter"]
        [::std::mem::offset_of!(SecurityContext, nextHopParameter) - 8usize];
    ["Offset of field: SecurityContext::iE_Extensions"]
        [::std::mem::offset_of!(SecurityContext, iE_Extensions) - 56usize];
    ["Offset of field: SecurityContext::_asn_ctx"]
        [::std::mem::offset_of!(SecurityContext, _asn_ctx) - 64usize];
};
pub type SecurityContext_t = SecurityContext;
unsafe extern "C" {
    pub static mut asn_DEF_SecurityContext: asn_TYPE_descriptor_t;
}
pub const UEUserPlaneCIoTSupportIndicator_UEUserPlaneCIoTSupportIndicator_supported:
    UEUserPlaneCIoTSupportIndicator = 0;
pub type UEUserPlaneCIoTSupportIndicator = ::std::os::raw::c_uint;
pub use self::UEUserPlaneCIoTSupportIndicator as e_UEUserPlaneCIoTSupportIndicator;
pub type UEUserPlaneCIoTSupportIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_UEUserPlaneCIoTSupportIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEUserPlaneCIoTSupportIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type NB_IoT_UEIdentityIndexValue_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_NB_IoT_UEIdentityIndexValue: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_UEIdentityIndexValue_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const NextPagingAreaScope_NextPagingAreaScope_same: NextPagingAreaScope = 0;
pub const NextPagingAreaScope_NextPagingAreaScope_changed: NextPagingAreaScope = 1;
pub type NextPagingAreaScope = ::std::os::raw::c_uint;
pub use self::NextPagingAreaScope as e_NextPagingAreaScope;
pub type NextPagingAreaScope_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_NextPagingAreaScope_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NextPagingAreaScope: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_NextPagingAreaScope_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NextPagingAreaScope_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type RNC_ID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_RNC_ID_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_RNC_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RNC_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RNC_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RNC_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RNC_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RNC_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RNC_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RNC_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RNC_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RNC_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RNC_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RNC_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ConcurrentWarningMessageIndicator_ConcurrentWarningMessageIndicator_true:
    ConcurrentWarningMessageIndicator = 0;
pub type ConcurrentWarningMessageIndicator = ::std::os::raw::c_uint;
pub use self::ConcurrentWarningMessageIndicator as e_ConcurrentWarningMessageIndicator;
pub type ConcurrentWarningMessageIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_ConcurrentWarningMessageIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ConcurrentWarningMessageIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const M3period_M3period_ms100: M3period = 0;
pub const M3period_M3period_ms1000: M3period = 1;
pub const M3period_M3period_ms10000: M3period = 2;
pub const M3period_M3period_ms1024: M3period = 3;
pub const M3period_M3period_ms1280: M3period = 4;
pub const M3period_M3period_ms2048: M3period = 5;
pub const M3period_M3period_ms2560: M3period = 6;
pub const M3period_M3period_ms5120: M3period = 7;
pub const M3period_M3period_ms10240: M3period = 8;
pub const M3period_M3period_min1: M3period = 9;
pub type M3period = ::std::os::raw::c_uint;
pub use self::M3period as e_M3period;
pub type M3period_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_M3period_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M3period: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_M3period_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn M3period_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M3period_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M3period_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M3period_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M3period_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M3period_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M3period_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M3period_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M3period_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M3period_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M3period_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct M3Configuration {
    pub m3period: M3period_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of M3Configuration"][::std::mem::size_of::<M3Configuration>() - 40usize];
    ["Alignment of M3Configuration"][::std::mem::align_of::<M3Configuration>() - 8usize];
    ["Offset of field: M3Configuration::m3period"]
        [::std::mem::offset_of!(M3Configuration, m3period) - 0usize];
    ["Offset of field: M3Configuration::iE_Extensions"]
        [::std::mem::offset_of!(M3Configuration, iE_Extensions) - 8usize];
    ["Offset of field: M3Configuration::_asn_ctx"]
        [::std::mem::offset_of!(M3Configuration, _asn_ctx) - 16usize];
};
pub type M3Configuration_t = M3Configuration;
unsafe extern "C" {
    pub static mut asn_DEF_M3Configuration: asn_TYPE_descriptor_t;
}
pub const PendingDataIndication_PendingDataIndication_true: PendingDataIndication = 0;
pub type PendingDataIndication = ::std::os::raw::c_uint;
pub use self::PendingDataIndication as e_PendingDataIndication;
pub type PendingDataIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_PendingDataIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PendingDataIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PendingDataIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PendingDataIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PendingDataIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const MutingPatternInformation__muting_pattern_period_MutingPatternInformation__muting_pattern_period_ms0 : MutingPatternInformation__muting_pattern_period = 0 ;
pub const MutingPatternInformation__muting_pattern_period_MutingPatternInformation__muting_pattern_period_ms1280 : MutingPatternInformation__muting_pattern_period = 1 ;
pub const MutingPatternInformation__muting_pattern_period_MutingPatternInformation__muting_pattern_period_ms2560 : MutingPatternInformation__muting_pattern_period = 2 ;
pub const MutingPatternInformation__muting_pattern_period_MutingPatternInformation__muting_pattern_period_ms5120 : MutingPatternInformation__muting_pattern_period = 3 ;
pub const MutingPatternInformation__muting_pattern_period_MutingPatternInformation__muting_pattern_period_ms10240 : MutingPatternInformation__muting_pattern_period = 4 ;
pub type MutingPatternInformation__muting_pattern_period = ::std::os::raw::c_uint;
pub use self::MutingPatternInformation__muting_pattern_period as e_MutingPatternInformation__muting_pattern_period;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MutingPatternInformation {
    pub muting_pattern_period: ::std::os::raw::c_long,
    pub muting_pattern_offset: *mut ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MutingPatternInformation"]
        [::std::mem::size_of::<MutingPatternInformation>() - 48usize];
    ["Alignment of MutingPatternInformation"]
        [::std::mem::align_of::<MutingPatternInformation>() - 8usize];
    ["Offset of field: MutingPatternInformation::muting_pattern_period"]
        [::std::mem::offset_of!(MutingPatternInformation, muting_pattern_period) - 0usize];
    ["Offset of field: MutingPatternInformation::muting_pattern_offset"]
        [::std::mem::offset_of!(MutingPatternInformation, muting_pattern_offset) - 8usize];
    ["Offset of field: MutingPatternInformation::iE_Extensions"]
        [::std::mem::offset_of!(MutingPatternInformation, iE_Extensions) - 16usize];
    ["Offset of field: MutingPatternInformation::_asn_ctx"]
        [::std::mem::offset_of!(MutingPatternInformation, _asn_ctx) - 24usize];
};
pub type MutingPatternInformation_t = MutingPatternInformation;
unsafe extern "C" {
    pub static mut asn_DEF_MutingPatternInformation: asn_TYPE_descriptor_t;
}
pub type UERadioCapabilityID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UERadioCapabilityID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapabilityID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ProSeUEtoNetworkRelaying_ProSeUEtoNetworkRelaying_authorized: ProSeUEtoNetworkRelaying =
    0;
pub const ProSeUEtoNetworkRelaying_ProSeUEtoNetworkRelaying_not_authorized:
    ProSeUEtoNetworkRelaying = 1;
pub type ProSeUEtoNetworkRelaying = ::std::os::raw::c_uint;
pub use self::ProSeUEtoNetworkRelaying as e_ProSeUEtoNetworkRelaying;
pub type ProSeUEtoNetworkRelaying_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_ProSeUEtoNetworkRelaying: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ProSeUEtoNetworkRelaying_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const CSGMembershipStatus_CSGMembershipStatus_member: CSGMembershipStatus = 0;
pub const CSGMembershipStatus_CSGMembershipStatus_not_member: CSGMembershipStatus = 1;
pub type CSGMembershipStatus = ::std::os::raw::c_uint;
pub use self::CSGMembershipStatus as e_CSGMembershipStatus;
pub type CSGMembershipStatus_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_CSGMembershipStatus_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_CSGMembershipStatus: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_CSGMembershipStatus_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn CSGMembershipStatus_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CSGMembershipInfo {
    pub cSGMembershipStatus: CSGMembershipStatus_t,
    pub cSG_Id: CSG_Id_t,
    pub cellAccessMode: *mut CellAccessMode_t,
    pub pLMNidentity: *mut PLMNidentity_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CSGMembershipInfo"][::std::mem::size_of::<CSGMembershipInfo>() - 104usize];
    ["Alignment of CSGMembershipInfo"][::std::mem::align_of::<CSGMembershipInfo>() - 8usize];
    ["Offset of field: CSGMembershipInfo::cSGMembershipStatus"]
        [::std::mem::offset_of!(CSGMembershipInfo, cSGMembershipStatus) - 0usize];
    ["Offset of field: CSGMembershipInfo::cSG_Id"]
        [::std::mem::offset_of!(CSGMembershipInfo, cSG_Id) - 8usize];
    ["Offset of field: CSGMembershipInfo::cellAccessMode"]
        [::std::mem::offset_of!(CSGMembershipInfo, cellAccessMode) - 56usize];
    ["Offset of field: CSGMembershipInfo::pLMNidentity"]
        [::std::mem::offset_of!(CSGMembershipInfo, pLMNidentity) - 64usize];
    ["Offset of field: CSGMembershipInfo::iE_Extensions"]
        [::std::mem::offset_of!(CSGMembershipInfo, iE_Extensions) - 72usize];
    ["Offset of field: CSGMembershipInfo::_asn_ctx"]
        [::std::mem::offset_of!(CSGMembershipInfo, _asn_ctx) - 80usize];
};
pub type CSGMembershipInfo_t = CSGMembershipInfo;
unsafe extern "C" {
    pub static mut asn_DEF_CSGMembershipInfo: asn_TYPE_descriptor_t;
}
pub const EventType_EventType_direct: EventType = 0;
pub const EventType_EventType_change_of_serve_cell: EventType = 1;
pub const EventType_EventType_stop_change_of_serve_cell: EventType = 2;
pub type EventType = ::std::os::raw::c_uint;
pub use self::EventType as e_EventType;
pub type EventType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_EventType_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_EventType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_EventType_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn EventType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EventType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EventType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EventType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EventType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EventType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EventType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EventType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EventType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EventType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EventType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RequestType {
    pub eventType: EventType_t,
    pub reportArea: ReportArea_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RequestType"][::std::mem::size_of::<RequestType>() - 48usize];
    ["Alignment of RequestType"][::std::mem::align_of::<RequestType>() - 8usize];
    ["Offset of field: RequestType::eventType"]
        [::std::mem::offset_of!(RequestType, eventType) - 0usize];
    ["Offset of field: RequestType::reportArea"]
        [::std::mem::offset_of!(RequestType, reportArea) - 8usize];
    ["Offset of field: RequestType::iE_Extensions"]
        [::std::mem::offset_of!(RequestType, iE_Extensions) - 16usize];
    ["Offset of field: RequestType::_asn_ctx"]
        [::std::mem::offset_of!(RequestType, _asn_ctx) - 24usize];
};
pub type RequestType_t = RequestType;
unsafe extern "C" {
    pub static mut asn_DEF_RequestType: asn_TYPE_descriptor_t;
}
pub type FiveQI_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_FiveQI_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_FiveQI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn FiveQI_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn FiveQI_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FiveQI_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn FiveQI_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveQI_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn FiveQI_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveQI_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn FiveQI_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveQI_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn FiveQI_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn FiveQI_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const WLANMeasurementConfiguration__wlan_rssi_WLANMeasurementConfiguration__wlan_rssi_true:
    WLANMeasurementConfiguration__wlan_rssi = 0;
pub type WLANMeasurementConfiguration__wlan_rssi = ::std::os::raw::c_uint;
pub use self::WLANMeasurementConfiguration__wlan_rssi as e_WLANMeasurementConfiguration__wlan_rssi;
pub const WLANMeasurementConfiguration__wlan_rtt_WLANMeasurementConfiguration__wlan_rtt_true:
    WLANMeasurementConfiguration__wlan_rtt = 0;
pub type WLANMeasurementConfiguration__wlan_rtt = ::std::os::raw::c_uint;
pub use self::WLANMeasurementConfiguration__wlan_rtt as e_WLANMeasurementConfiguration__wlan_rtt;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WLANMeasurementConfiguration {
    pub wlanMeasConfig: WLANMeasConfig_t,
    pub wlanMeasConfigNameList: *mut WLANMeasConfigNameList,
    pub wlan_rssi: *mut ::std::os::raw::c_long,
    pub wlan_rtt: *mut ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WLANMeasurementConfiguration"]
        [::std::mem::size_of::<WLANMeasurementConfiguration>() - 64usize];
    ["Alignment of WLANMeasurementConfiguration"]
        [::std::mem::align_of::<WLANMeasurementConfiguration>() - 8usize];
    ["Offset of field: WLANMeasurementConfiguration::wlanMeasConfig"]
        [::std::mem::offset_of!(WLANMeasurementConfiguration, wlanMeasConfig) - 0usize];
    ["Offset of field: WLANMeasurementConfiguration::wlanMeasConfigNameList"]
        [::std::mem::offset_of!(WLANMeasurementConfiguration, wlanMeasConfigNameList) - 8usize];
    ["Offset of field: WLANMeasurementConfiguration::wlan_rssi"]
        [::std::mem::offset_of!(WLANMeasurementConfiguration, wlan_rssi) - 16usize];
    ["Offset of field: WLANMeasurementConfiguration::wlan_rtt"]
        [::std::mem::offset_of!(WLANMeasurementConfiguration, wlan_rtt) - 24usize];
    ["Offset of field: WLANMeasurementConfiguration::iE_Extensions"]
        [::std::mem::offset_of!(WLANMeasurementConfiguration, iE_Extensions) - 32usize];
    ["Offset of field: WLANMeasurementConfiguration::_asn_ctx"]
        [::std::mem::offset_of!(WLANMeasurementConfiguration, _asn_ctx) - 40usize];
};
pub type WLANMeasurementConfiguration_t = WLANMeasurementConfiguration;
unsafe extern "C" {
    pub static mut asn_DEF_WLANMeasurementConfiguration: asn_TYPE_descriptor_t;
}
pub type WLANName_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_WLANName_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_WLANName: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn WLANName_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn WLANName_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WLANName_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn WLANName_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANName_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WLANName_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANName_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WLANName_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANName_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn WLANName_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn WLANName_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WLANMeasConfigNameList {
    pub list: WLANMeasConfigNameList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WLANMeasConfigNameList__bindgen_ty_1 {
    pub array: *mut *mut WLANName_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut WLANName_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WLANMeasConfigNameList__bindgen_ty_1"]
        [::std::mem::size_of::<WLANMeasConfigNameList__bindgen_ty_1>() - 24usize];
    ["Alignment of WLANMeasConfigNameList__bindgen_ty_1"]
        [::std::mem::align_of::<WLANMeasConfigNameList__bindgen_ty_1>() - 8usize];
    ["Offset of field: WLANMeasConfigNameList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(WLANMeasConfigNameList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: WLANMeasConfigNameList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(WLANMeasConfigNameList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: WLANMeasConfigNameList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(WLANMeasConfigNameList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: WLANMeasConfigNameList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(WLANMeasConfigNameList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WLANMeasConfigNameList"][::std::mem::size_of::<WLANMeasConfigNameList>() - 48usize];
    ["Alignment of WLANMeasConfigNameList"]
        [::std::mem::align_of::<WLANMeasConfigNameList>() - 8usize];
    ["Offset of field: WLANMeasConfigNameList::list"]
        [::std::mem::offset_of!(WLANMeasConfigNameList, list) - 0usize];
    ["Offset of field: WLANMeasConfigNameList::_asn_ctx"]
        [::std::mem::offset_of!(WLANMeasConfigNameList, _asn_ctx) - 24usize];
};
pub type WLANMeasConfigNameList_t = WLANMeasConfigNameList;
unsafe extern "C" {
    pub static mut asn_DEF_WLANMeasConfigNameList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_WLANMeasConfigNameList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_WLANMeasConfigNameList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_WLANMeasConfigNameList_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeUpdatedItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub securityIndication: *mut SecurityIndication,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeUpdatedItem"][::std::mem::size_of::<E_RABToBeUpdatedItem>() - 48usize];
    ["Alignment of E_RABToBeUpdatedItem"][::std::mem::align_of::<E_RABToBeUpdatedItem>() - 8usize];
    ["Offset of field: E_RABToBeUpdatedItem::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeUpdatedItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeUpdatedItem::securityIndication"]
        [::std::mem::offset_of!(E_RABToBeUpdatedItem, securityIndication) - 8usize];
    ["Offset of field: E_RABToBeUpdatedItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeUpdatedItem, iE_Extensions) - 16usize];
    ["Offset of field: E_RABToBeUpdatedItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeUpdatedItem, _asn_ctx) - 24usize];
};
pub type E_RABToBeUpdatedItem_t = E_RABToBeUpdatedItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeUpdatedItem: asn_TYPE_descriptor_t;
}
pub const GWContextReleaseIndication_GWContextReleaseIndication_true: GWContextReleaseIndication =
    0;
pub type GWContextReleaseIndication = ::std::os::raw::c_uint;
pub use self::GWContextReleaseIndication as e_GWContextReleaseIndication;
pub type GWContextReleaseIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_GWContextReleaseIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GWContextReleaseIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MessageIdentifier_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_MessageIdentifier: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MessageIdentifier_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MessageIdentifier_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MessageIdentifier_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MessageIdentifier_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const PedestrianUE_PedestrianUE_authorized: PedestrianUE = 0;
pub const PedestrianUE_PedestrianUE_not_authorized: PedestrianUE = 1;
pub type PedestrianUE = ::std::os::raw::c_uint;
pub use self::PedestrianUE as e_PedestrianUE;
pub type PedestrianUE_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PedestrianUE_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PedestrianUE: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_PedestrianUE_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PedestrianUE_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PedestrianUE_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PedestrianUE_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PedestrianUE_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SecondaryRATDataUsageRequest_SecondaryRATDataUsageRequest_requested:
    SecondaryRATDataUsageRequest = 0;
pub type SecondaryRATDataUsageRequest = ::std::os::raw::c_uint;
pub use self::SecondaryRATDataUsageRequest as e_SecondaryRATDataUsageRequest;
pub type SecondaryRATDataUsageRequest_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_SecondaryRATDataUsageRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SecondaryRATDataUsageRequest_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const NB_IoT_DefaultPagingDRX_NB_IoT_DefaultPagingDRX_v128: NB_IoT_DefaultPagingDRX = 0;
pub const NB_IoT_DefaultPagingDRX_NB_IoT_DefaultPagingDRX_v256: NB_IoT_DefaultPagingDRX = 1;
pub const NB_IoT_DefaultPagingDRX_NB_IoT_DefaultPagingDRX_v512: NB_IoT_DefaultPagingDRX = 2;
pub const NB_IoT_DefaultPagingDRX_NB_IoT_DefaultPagingDRX_v1024: NB_IoT_DefaultPagingDRX = 3;
pub type NB_IoT_DefaultPagingDRX = ::std::os::raw::c_uint;
pub use self::NB_IoT_DefaultPagingDRX as e_NB_IoT_DefaultPagingDRX;
pub type NB_IoT_DefaultPagingDRX_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_NB_IoT_DefaultPagingDRX: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_DefaultPagingDRX_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const AdditionalCSFallbackIndicator_AdditionalCSFallbackIndicator_no_restriction:
    AdditionalCSFallbackIndicator = 0;
pub const AdditionalCSFallbackIndicator_AdditionalCSFallbackIndicator_restriction:
    AdditionalCSFallbackIndicator = 1;
pub type AdditionalCSFallbackIndicator = ::std::os::raw::c_uint;
pub use self::AdditionalCSFallbackIndicator as e_AdditionalCSFallbackIndicator;
pub type AdditionalCSFallbackIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_AdditionalCSFallbackIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalCSFallbackIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const KillAllWarningMessages_KillAllWarningMessages_true: KillAllWarningMessages = 0;
pub type KillAllWarningMessages = ::std::os::raw::c_uint;
pub use self::KillAllWarningMessages as e_KillAllWarningMessages;
pub type KillAllWarningMessages_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_KillAllWarningMessages: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn KillAllWarningMessages_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type UEIdentityIndexValue_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UEIdentityIndexValue: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UEIdentityIndexValue_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const EnhancedCoverageRestricted_EnhancedCoverageRestricted_restricted:
    EnhancedCoverageRestricted = 0;
pub type EnhancedCoverageRestricted = ::std::os::raw::c_uint;
pub use self::EnhancedCoverageRestricted as e_EnhancedCoverageRestricted;
pub type EnhancedCoverageRestricted_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_EnhancedCoverageRestricted: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EnhancedCoverageRestricted_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const OverloadAction_OverloadAction_reject_non_emergency_mo_dt: OverloadAction = 0;
pub const OverloadAction_OverloadAction_reject_rrc_cr_signalling: OverloadAction = 1;
pub const OverloadAction_OverloadAction_permit_emergency_sessions_and_mobile_terminated_services_only : OverloadAction = 2 ;
pub const OverloadAction_OverloadAction_permit_high_priority_sessions_and_mobile_terminated_services_only : OverloadAction = 3 ;
pub const OverloadAction_OverloadAction_reject_delay_tolerant_access: OverloadAction = 4;
pub const OverloadAction_OverloadAction_permit_high_priority_sessions_and_exception_reporting_and_mobile_terminated_services_only : OverloadAction = 5 ;
pub const OverloadAction_OverloadAction_not_accept_mo_data_or_delay_tolerant_access_from_CP_CIoT:
    OverloadAction = 6;
pub type OverloadAction = ::std::os::raw::c_uint;
pub use self::OverloadAction as e_OverloadAction;
pub type OverloadAction_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_OverloadAction_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_OverloadAction: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_OverloadAction_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn OverloadAction_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn OverloadAction_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OverloadAction_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OverloadAction_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OverloadAction_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OverloadAction_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OverloadAction_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OverloadAction_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OverloadAction_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OverloadAction_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OverloadAction_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const NRrestrictionin5GS_NRrestrictionin5GS_nRrestrictedin5GS: NRrestrictionin5GS = 0;
pub type NRrestrictionin5GS = ::std::os::raw::c_uint;
pub use self::NRrestrictionin5GS as e_NRrestrictionin5GS;
pub type NRrestrictionin5GS_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_NRrestrictionin5GS: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRrestrictionin5GS_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type PagingAttemptCount_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PagingAttemptCount_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PagingAttemptCount: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PagingAttemptCount_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingAttemptCount_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RIMTransfer {
    pub rIMInformation: RIMInformation_t,
    pub rIMRoutingAddress: *mut RIMRoutingAddress,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RIMTransfer"][::std::mem::size_of::<RIMTransfer>() - 80usize];
    ["Alignment of RIMTransfer"][::std::mem::align_of::<RIMTransfer>() - 8usize];
    ["Offset of field: RIMTransfer::rIMInformation"]
        [::std::mem::offset_of!(RIMTransfer, rIMInformation) - 0usize];
    ["Offset of field: RIMTransfer::rIMRoutingAddress"]
        [::std::mem::offset_of!(RIMTransfer, rIMRoutingAddress) - 40usize];
    ["Offset of field: RIMTransfer::iE_Extensions"]
        [::std::mem::offset_of!(RIMTransfer, iE_Extensions) - 48usize];
    ["Offset of field: RIMTransfer::_asn_ctx"]
        [::std::mem::offset_of!(RIMTransfer, _asn_ctx) - 56usize];
};
pub type RIMTransfer_t = RIMTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_RIMTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RIMTransfer_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RIMTransfer_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LAI {
    pub pLMNidentity: PLMNidentity_t,
    pub lAC: LAC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LAI"][::std::mem::size_of::<LAI>() - 112usize];
    ["Alignment of LAI"][::std::mem::align_of::<LAI>() - 8usize];
    ["Offset of field: LAI::pLMNidentity"][::std::mem::offset_of!(LAI, pLMNidentity) - 0usize];
    ["Offset of field: LAI::lAC"][::std::mem::offset_of!(LAI, lAC) - 40usize];
    ["Offset of field: LAI::iE_Extensions"][::std::mem::offset_of!(LAI, iE_Extensions) - 80usize];
    ["Offset of field: LAI::_asn_ctx"][::std::mem::offset_of!(LAI, _asn_ctx) - 88usize];
};
pub type LAI_t = LAI;
unsafe extern "C" {
    pub static mut asn_DEF_LAI: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_LAI_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_LAI_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GERAN_Cell_ID {
    pub lAI: LAI_t,
    pub rAC: RAC_t,
    pub cI: CI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GERAN_Cell_ID"][::std::mem::size_of::<GERAN_Cell_ID>() - 224usize];
    ["Alignment of GERAN_Cell_ID"][::std::mem::align_of::<GERAN_Cell_ID>() - 8usize];
    ["Offset of field: GERAN_Cell_ID::lAI"][::std::mem::offset_of!(GERAN_Cell_ID, lAI) - 0usize];
    ["Offset of field: GERAN_Cell_ID::rAC"][::std::mem::offset_of!(GERAN_Cell_ID, rAC) - 112usize];
    ["Offset of field: GERAN_Cell_ID::cI"][::std::mem::offset_of!(GERAN_Cell_ID, cI) - 152usize];
    ["Offset of field: GERAN_Cell_ID::iE_Extensions"]
        [::std::mem::offset_of!(GERAN_Cell_ID, iE_Extensions) - 192usize];
    ["Offset of field: GERAN_Cell_ID::_asn_ctx"]
        [::std::mem::offset_of!(GERAN_Cell_ID, _asn_ctx) - 200usize];
};
pub type GERAN_Cell_ID_t = GERAN_Cell_ID;
unsafe extern "C" {
    pub static mut asn_DEF_GERAN_Cell_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_GERAN_Cell_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_GERAN_Cell_ID_1: [asn_TYPE_member_t; 4usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TargetRNC_ID {
    pub lAI: LAI_t,
    pub rAC: *mut RAC_t,
    pub rNC_ID: RNC_ID_t,
    pub extendedRNC_ID: *mut ExtendedRNC_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TargetRNC_ID"][::std::mem::size_of::<TargetRNC_ID>() - 168usize];
    ["Alignment of TargetRNC_ID"][::std::mem::align_of::<TargetRNC_ID>() - 8usize];
    ["Offset of field: TargetRNC_ID::lAI"][::std::mem::offset_of!(TargetRNC_ID, lAI) - 0usize];
    ["Offset of field: TargetRNC_ID::rAC"][::std::mem::offset_of!(TargetRNC_ID, rAC) - 112usize];
    ["Offset of field: TargetRNC_ID::rNC_ID"]
        [::std::mem::offset_of!(TargetRNC_ID, rNC_ID) - 120usize];
    ["Offset of field: TargetRNC_ID::extendedRNC_ID"]
        [::std::mem::offset_of!(TargetRNC_ID, extendedRNC_ID) - 128usize];
    ["Offset of field: TargetRNC_ID::iE_Extensions"]
        [::std::mem::offset_of!(TargetRNC_ID, iE_Extensions) - 136usize];
    ["Offset of field: TargetRNC_ID::_asn_ctx"]
        [::std::mem::offset_of!(TargetRNC_ID, _asn_ctx) - 144usize];
};
pub type TargetRNC_ID_t = TargetRNC_ID;
unsafe extern "C" {
    pub static mut asn_DEF_TargetRNC_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TargetRNC_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TargetRNC_ID_1: [asn_TYPE_member_t; 5usize];
}
pub const RIMRoutingAddress_PR_RIMRoutingAddress_PR_NOTHING: RIMRoutingAddress_PR = 0;
pub const RIMRoutingAddress_PR_RIMRoutingAddress_PR_gERAN_Cell_ID: RIMRoutingAddress_PR = 1;
pub const RIMRoutingAddress_PR_RIMRoutingAddress_PR_targetRNC_ID: RIMRoutingAddress_PR = 2;
pub const RIMRoutingAddress_PR_RIMRoutingAddress_PR_eHRPD_Sector_ID: RIMRoutingAddress_PR = 3;
pub type RIMRoutingAddress_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RIMRoutingAddress {
    pub present: RIMRoutingAddress_PR,
    pub choice: RIMRoutingAddress_RIMRoutingAddress_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union RIMRoutingAddress_RIMRoutingAddress_u {
    pub gERAN_Cell_ID: GERAN_Cell_ID_t,
    pub targetRNC_ID: TargetRNC_ID_t,
    pub eHRPD_Sector_ID: OCTET_STRING_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RIMRoutingAddress_RIMRoutingAddress_u"]
        [::std::mem::size_of::<RIMRoutingAddress_RIMRoutingAddress_u>() - 224usize];
    ["Alignment of RIMRoutingAddress_RIMRoutingAddress_u"]
        [::std::mem::align_of::<RIMRoutingAddress_RIMRoutingAddress_u>() - 8usize];
    ["Offset of field: RIMRoutingAddress_RIMRoutingAddress_u::gERAN_Cell_ID"]
        [::std::mem::offset_of!(RIMRoutingAddress_RIMRoutingAddress_u, gERAN_Cell_ID) - 0usize];
    ["Offset of field: RIMRoutingAddress_RIMRoutingAddress_u::targetRNC_ID"]
        [::std::mem::offset_of!(RIMRoutingAddress_RIMRoutingAddress_u, targetRNC_ID) - 0usize];
    ["Offset of field: RIMRoutingAddress_RIMRoutingAddress_u::eHRPD_Sector_ID"]
        [::std::mem::offset_of!(RIMRoutingAddress_RIMRoutingAddress_u, eHRPD_Sector_ID) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RIMRoutingAddress"][::std::mem::size_of::<RIMRoutingAddress>() - 256usize];
    ["Alignment of RIMRoutingAddress"][::std::mem::align_of::<RIMRoutingAddress>() - 8usize];
    ["Offset of field: RIMRoutingAddress::present"]
        [::std::mem::offset_of!(RIMRoutingAddress, present) - 0usize];
    ["Offset of field: RIMRoutingAddress::choice"]
        [::std::mem::offset_of!(RIMRoutingAddress, choice) - 8usize];
    ["Offset of field: RIMRoutingAddress::_asn_ctx"]
        [::std::mem::offset_of!(RIMRoutingAddress, _asn_ctx) - 232usize];
};
pub type RIMRoutingAddress_t = RIMRoutingAddress;
unsafe extern "C" {
    pub static mut asn_DEF_RIMRoutingAddress: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RIMRoutingAddress_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RIMRoutingAddress_1: [asn_TYPE_member_t; 3usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_RIMRoutingAddress_constr_1: asn_per_constraints_t;
}
pub const Inter_SystemInformationTransferType_PR_Inter_SystemInformationTransferType_PR_NOTHING:
    Inter_SystemInformationTransferType_PR = 0;
pub const Inter_SystemInformationTransferType_PR_Inter_SystemInformationTransferType_PR_rIMTransfer : Inter_SystemInformationTransferType_PR = 1 ;
pub type Inter_SystemInformationTransferType_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct Inter_SystemInformationTransferType {
    pub present: Inter_SystemInformationTransferType_PR,
    pub choice: Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u {
    pub rIMTransfer: RIMTransfer_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u"]
        [::std::mem::size_of::<
            Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u,
        >() - 80usize];
    ["Alignment of Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u"]
        [::std::mem::align_of::<
            Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u,
        >() - 8usize];
    ["Offset of field: Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u::rIMTransfer"] [:: std :: mem :: offset_of ! (Inter_SystemInformationTransferType_Inter_SystemInformationTransferType_u , rIMTransfer) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Inter_SystemInformationTransferType"]
        [::std::mem::size_of::<Inter_SystemInformationTransferType>() - 112usize];
    ["Alignment of Inter_SystemInformationTransferType"]
        [::std::mem::align_of::<Inter_SystemInformationTransferType>() - 8usize];
    ["Offset of field: Inter_SystemInformationTransferType::present"]
        [::std::mem::offset_of!(Inter_SystemInformationTransferType, present) - 0usize];
    ["Offset of field: Inter_SystemInformationTransferType::choice"]
        [::std::mem::offset_of!(Inter_SystemInformationTransferType, choice) - 8usize];
    ["Offset of field: Inter_SystemInformationTransferType::_asn_ctx"]
        [::std::mem::offset_of!(Inter_SystemInformationTransferType, _asn_ctx) - 88usize];
};
pub type Inter_SystemInformationTransferType_t = Inter_SystemInformationTransferType;
unsafe extern "C" {
    pub static mut asn_DEF_Inter_SystemInformationTransferType: asn_TYPE_descriptor_t;
}
pub type UERadioCapability_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UERadioCapability: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UERadioCapability_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UERadioCapability_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UERadioCapability_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UERadioCapability_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABAdmittedItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub dL_transportLayerAddress: *mut TransportLayerAddress_t,
    pub dL_gTP_TEID: *mut GTP_TEID_t,
    pub uL_TransportLayerAddress: *mut TransportLayerAddress_t,
    pub uL_GTP_TEID: *mut GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABAdmittedItem"][::std::mem::size_of::<E_RABAdmittedItem>() - 160usize];
    ["Alignment of E_RABAdmittedItem"][::std::mem::align_of::<E_RABAdmittedItem>() - 8usize];
    ["Offset of field: E_RABAdmittedItem::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABAdmittedItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABAdmittedItem::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABAdmittedItem, transportLayerAddress) - 8usize];
    ["Offset of field: E_RABAdmittedItem::gTP_TEID"]
        [::std::mem::offset_of!(E_RABAdmittedItem, gTP_TEID) - 56usize];
    ["Offset of field: E_RABAdmittedItem::dL_transportLayerAddress"]
        [::std::mem::offset_of!(E_RABAdmittedItem, dL_transportLayerAddress) - 96usize];
    ["Offset of field: E_RABAdmittedItem::dL_gTP_TEID"]
        [::std::mem::offset_of!(E_RABAdmittedItem, dL_gTP_TEID) - 104usize];
    ["Offset of field: E_RABAdmittedItem::uL_TransportLayerAddress"]
        [::std::mem::offset_of!(E_RABAdmittedItem, uL_TransportLayerAddress) - 112usize];
    ["Offset of field: E_RABAdmittedItem::uL_GTP_TEID"]
        [::std::mem::offset_of!(E_RABAdmittedItem, uL_GTP_TEID) - 120usize];
    ["Offset of field: E_RABAdmittedItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABAdmittedItem, iE_Extensions) - 128usize];
    ["Offset of field: E_RABAdmittedItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABAdmittedItem, _asn_ctx) - 136usize];
};
pub type E_RABAdmittedItem_t = E_RABAdmittedItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABAdmittedItem: asn_TYPE_descriptor_t;
}
pub const BroadcastCompletedAreaList_PR_BroadcastCompletedAreaList_PR_NOTHING:
    BroadcastCompletedAreaList_PR = 0;
pub const BroadcastCompletedAreaList_PR_BroadcastCompletedAreaList_PR_cellID_Broadcast:
    BroadcastCompletedAreaList_PR = 1;
pub const BroadcastCompletedAreaList_PR_BroadcastCompletedAreaList_PR_tAI_Broadcast:
    BroadcastCompletedAreaList_PR = 2;
pub const BroadcastCompletedAreaList_PR_BroadcastCompletedAreaList_PR_emergencyAreaID_Broadcast:
    BroadcastCompletedAreaList_PR = 3;
pub type BroadcastCompletedAreaList_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct BroadcastCompletedAreaList {
    pub present: BroadcastCompletedAreaList_PR,
    pub choice: BroadcastCompletedAreaList_BroadcastCompletedAreaList_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union BroadcastCompletedAreaList_BroadcastCompletedAreaList_u {
    pub cellID_Broadcast: CellID_Broadcast_t,
    pub tAI_Broadcast: TAI_Broadcast_t,
    pub emergencyAreaID_Broadcast: EmergencyAreaID_Broadcast_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BroadcastCompletedAreaList_BroadcastCompletedAreaList_u"][::std::mem::size_of::<
        BroadcastCompletedAreaList_BroadcastCompletedAreaList_u,
    >() - 48usize];
    ["Alignment of BroadcastCompletedAreaList_BroadcastCompletedAreaList_u"][::std::mem::align_of::<
        BroadcastCompletedAreaList_BroadcastCompletedAreaList_u,
    >() - 8usize];
    ["Offset of field: BroadcastCompletedAreaList_BroadcastCompletedAreaList_u::cellID_Broadcast"] [:: std :: mem :: offset_of ! (BroadcastCompletedAreaList_BroadcastCompletedAreaList_u , cellID_Broadcast) - 0usize] ;
    ["Offset of field: BroadcastCompletedAreaList_BroadcastCompletedAreaList_u::tAI_Broadcast"][::std::mem::offset_of!(
        BroadcastCompletedAreaList_BroadcastCompletedAreaList_u,
        tAI_Broadcast
    )
        - 0usize];
    ["Offset of field: BroadcastCompletedAreaList_BroadcastCompletedAreaList_u::emergencyAreaID_Broadcast"] [:: std :: mem :: offset_of ! (BroadcastCompletedAreaList_BroadcastCompletedAreaList_u , emergencyAreaID_Broadcast) - 0usize] ;
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of BroadcastCompletedAreaList"]
        [::std::mem::size_of::<BroadcastCompletedAreaList>() - 80usize];
    ["Alignment of BroadcastCompletedAreaList"]
        [::std::mem::align_of::<BroadcastCompletedAreaList>() - 8usize];
    ["Offset of field: BroadcastCompletedAreaList::present"]
        [::std::mem::offset_of!(BroadcastCompletedAreaList, present) - 0usize];
    ["Offset of field: BroadcastCompletedAreaList::choice"]
        [::std::mem::offset_of!(BroadcastCompletedAreaList, choice) - 8usize];
    ["Offset of field: BroadcastCompletedAreaList::_asn_ctx"]
        [::std::mem::offset_of!(BroadcastCompletedAreaList, _asn_ctx) - 56usize];
};
pub type BroadcastCompletedAreaList_t = BroadcastCompletedAreaList;
unsafe extern "C" {
    pub static mut asn_DEF_BroadcastCompletedAreaList: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaIDListForRestart {
    pub list: EmergencyAreaIDListForRestart__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct EmergencyAreaIDListForRestart__bindgen_ty_1 {
    pub array: *mut *mut EmergencyAreaID_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EmergencyAreaID_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaIDListForRestart__bindgen_ty_1"]
        [::std::mem::size_of::<EmergencyAreaIDListForRestart__bindgen_ty_1>() - 24usize];
    ["Alignment of EmergencyAreaIDListForRestart__bindgen_ty_1"]
        [::std::mem::align_of::<EmergencyAreaIDListForRestart__bindgen_ty_1>() - 8usize];
    ["Offset of field: EmergencyAreaIDListForRestart__bindgen_ty_1::array"]
        [::std::mem::offset_of!(EmergencyAreaIDListForRestart__bindgen_ty_1, array) - 0usize];
    ["Offset of field: EmergencyAreaIDListForRestart__bindgen_ty_1::count"]
        [::std::mem::offset_of!(EmergencyAreaIDListForRestart__bindgen_ty_1, count) - 8usize];
    ["Offset of field: EmergencyAreaIDListForRestart__bindgen_ty_1::size"]
        [::std::mem::offset_of!(EmergencyAreaIDListForRestart__bindgen_ty_1, size) - 12usize];
    ["Offset of field: EmergencyAreaIDListForRestart__bindgen_ty_1::free"]
        [::std::mem::offset_of!(EmergencyAreaIDListForRestart__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of EmergencyAreaIDListForRestart"]
        [::std::mem::size_of::<EmergencyAreaIDListForRestart>() - 48usize];
    ["Alignment of EmergencyAreaIDListForRestart"]
        [::std::mem::align_of::<EmergencyAreaIDListForRestart>() - 8usize];
    ["Offset of field: EmergencyAreaIDListForRestart::list"]
        [::std::mem::offset_of!(EmergencyAreaIDListForRestart, list) - 0usize];
    ["Offset of field: EmergencyAreaIDListForRestart::_asn_ctx"]
        [::std::mem::offset_of!(EmergencyAreaIDListForRestart, _asn_ctx) - 24usize];
};
pub type EmergencyAreaIDListForRestart_t = EmergencyAreaIDListForRestart;
unsafe extern "C" {
    pub static mut asn_DEF_EmergencyAreaIDListForRestart: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct E_RABItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub cause: Cause_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABItem"][::std::mem::size_of::<E_RABItem>() - 80usize];
    ["Alignment of E_RABItem"][::std::mem::align_of::<E_RABItem>() - 8usize];
    ["Offset of field: E_RABItem::e_RAB_ID"][::std::mem::offset_of!(E_RABItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABItem::cause"][::std::mem::offset_of!(E_RABItem, cause) - 8usize];
    ["Offset of field: E_RABItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABItem, iE_Extensions) - 48usize];
    ["Offset of field: E_RABItem::_asn_ctx"][::std::mem::offset_of!(E_RABItem, _asn_ctx) - 56usize];
};
pub type E_RABItem_t = E_RABItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABItem: asn_TYPE_descriptor_t;
}
pub type MDT_Location_Info_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_MDT_Location_Info: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MDT_Location_Info_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_Location_Info_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TargetNgRanNode_ID {
    pub global_RAN_NODE_ID: Global_RAN_NODE_ID_t,
    pub selected_TAI: FiveGSTAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TargetNgRanNode_ID"][::std::mem::size_of::<TargetNgRanNode_ID>() - 360usize];
    ["Alignment of TargetNgRanNode_ID"][::std::mem::align_of::<TargetNgRanNode_ID>() - 8usize];
    ["Offset of field: TargetNgRanNode_ID::global_RAN_NODE_ID"]
        [::std::mem::offset_of!(TargetNgRanNode_ID, global_RAN_NODE_ID) - 0usize];
    ["Offset of field: TargetNgRanNode_ID::selected_TAI"]
        [::std::mem::offset_of!(TargetNgRanNode_ID, selected_TAI) - 216usize];
    ["Offset of field: TargetNgRanNode_ID::iE_Extensions"]
        [::std::mem::offset_of!(TargetNgRanNode_ID, iE_Extensions) - 328usize];
    ["Offset of field: TargetNgRanNode_ID::_asn_ctx"]
        [::std::mem::offset_of!(TargetNgRanNode_ID, _asn_ctx) - 336usize];
};
pub type TargetNgRanNode_ID_t = TargetNgRanNode_ID;
unsafe extern "C" {
    pub static mut asn_DEF_TargetNgRanNode_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TargetNgRanNode_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TargetNgRanNode_ID_1: [asn_TYPE_member_t; 3usize];
}
pub type StratumLevel_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_StratumLevel_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_StratumLevel: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn StratumLevel_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn StratumLevel_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn StratumLevel_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn StratumLevel_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn StratumLevel_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn StratumLevel_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn StratumLevel_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn StratumLevel_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn StratumLevel_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn StratumLevel_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn StratumLevel_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const BearerType_BearerType_non_IP: BearerType = 0;
pub type BearerType = ::std::os::raw::c_uint;
pub use self::BearerType as e_BearerType;
pub type BearerType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_BearerType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn BearerType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn BearerType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BearerType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn BearerType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BearerType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BearerType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BearerType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BearerType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BearerType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn BearerType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn BearerType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABInformationListItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub dL_Forwarding: *mut DL_Forwarding_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABInformationListItem"]
        [::std::mem::size_of::<E_RABInformationListItem>() - 48usize];
    ["Alignment of E_RABInformationListItem"]
        [::std::mem::align_of::<E_RABInformationListItem>() - 8usize];
    ["Offset of field: E_RABInformationListItem::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABInformationListItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABInformationListItem::dL_Forwarding"]
        [::std::mem::offset_of!(E_RABInformationListItem, dL_Forwarding) - 8usize];
    ["Offset of field: E_RABInformationListItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABInformationListItem, iE_Extensions) - 16usize];
    ["Offset of field: E_RABInformationListItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABInformationListItem, _asn_ctx) - 24usize];
};
pub type E_RABInformationListItem_t = E_RABInformationListItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABInformationListItem: asn_TYPE_descriptor_t;
}
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf2: NB_IoT_Paging_eDRX_Cycle = 0;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf4: NB_IoT_Paging_eDRX_Cycle = 1;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf6: NB_IoT_Paging_eDRX_Cycle = 2;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf8: NB_IoT_Paging_eDRX_Cycle = 3;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf10: NB_IoT_Paging_eDRX_Cycle = 4;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf12: NB_IoT_Paging_eDRX_Cycle = 5;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf14: NB_IoT_Paging_eDRX_Cycle = 6;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf16: NB_IoT_Paging_eDRX_Cycle = 7;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf32: NB_IoT_Paging_eDRX_Cycle = 8;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf64: NB_IoT_Paging_eDRX_Cycle = 9;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf128: NB_IoT_Paging_eDRX_Cycle = 10;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf256: NB_IoT_Paging_eDRX_Cycle = 11;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf512: NB_IoT_Paging_eDRX_Cycle = 12;
pub const NB_IoT_Paging_eDRX_Cycle_NB_IoT_Paging_eDRX_Cycle_hf1024: NB_IoT_Paging_eDRX_Cycle = 13;
pub type NB_IoT_Paging_eDRX_Cycle = ::std::os::raw::c_uint;
pub use self::NB_IoT_Paging_eDRX_Cycle as e_NB_IoT_Paging_eDRX_Cycle;
pub type NB_IoT_Paging_eDRX_Cycle_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_NB_IoT_Paging_eDRX_Cycle_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NB_IoT_Paging_eDRX_Cycle: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_NB_IoT_Paging_eDRX_Cycle_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_Paging_eDRX_Cycle_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s1: NB_IoT_PagingTimeWindow = 0;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s2: NB_IoT_PagingTimeWindow = 1;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s3: NB_IoT_PagingTimeWindow = 2;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s4: NB_IoT_PagingTimeWindow = 3;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s5: NB_IoT_PagingTimeWindow = 4;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s6: NB_IoT_PagingTimeWindow = 5;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s7: NB_IoT_PagingTimeWindow = 6;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s8: NB_IoT_PagingTimeWindow = 7;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s9: NB_IoT_PagingTimeWindow = 8;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s10: NB_IoT_PagingTimeWindow = 9;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s11: NB_IoT_PagingTimeWindow = 10;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s12: NB_IoT_PagingTimeWindow = 11;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s13: NB_IoT_PagingTimeWindow = 12;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s14: NB_IoT_PagingTimeWindow = 13;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s15: NB_IoT_PagingTimeWindow = 14;
pub const NB_IoT_PagingTimeWindow_NB_IoT_PagingTimeWindow_s16: NB_IoT_PagingTimeWindow = 15;
pub type NB_IoT_PagingTimeWindow = ::std::os::raw::c_uint;
pub use self::NB_IoT_PagingTimeWindow as e_NB_IoT_PagingTimeWindow;
pub type NB_IoT_PagingTimeWindow_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_NB_IoT_PagingTimeWindow_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NB_IoT_PagingTimeWindow: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_NB_IoT_PagingTimeWindow_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingTimeWindow_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NB_IoT_Paging_eDRXInformation {
    pub nB_IoT_paging_eDRX_Cycle: NB_IoT_Paging_eDRX_Cycle_t,
    pub nB_IoT_pagingTimeWindow: *mut NB_IoT_PagingTimeWindow_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NB_IoT_Paging_eDRXInformation"]
        [::std::mem::size_of::<NB_IoT_Paging_eDRXInformation>() - 48usize];
    ["Alignment of NB_IoT_Paging_eDRXInformation"]
        [::std::mem::align_of::<NB_IoT_Paging_eDRXInformation>() - 8usize];
    ["Offset of field: NB_IoT_Paging_eDRXInformation::nB_IoT_paging_eDRX_Cycle"]
        [::std::mem::offset_of!(NB_IoT_Paging_eDRXInformation, nB_IoT_paging_eDRX_Cycle) - 0usize];
    ["Offset of field: NB_IoT_Paging_eDRXInformation::nB_IoT_pagingTimeWindow"]
        [::std::mem::offset_of!(NB_IoT_Paging_eDRXInformation, nB_IoT_pagingTimeWindow) - 8usize];
    ["Offset of field: NB_IoT_Paging_eDRXInformation::iE_Extensions"]
        [::std::mem::offset_of!(NB_IoT_Paging_eDRXInformation, iE_Extensions) - 16usize];
    ["Offset of field: NB_IoT_Paging_eDRXInformation::_asn_ctx"]
        [::std::mem::offset_of!(NB_IoT_Paging_eDRXInformation, _asn_ctx) - 24usize];
};
pub type NB_IoT_Paging_eDRXInformation_t = NB_IoT_Paging_eDRXInformation;
unsafe extern "C" {
    pub static mut asn_DEF_NB_IoT_Paging_eDRXInformation: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedDCNs {
    pub list: ServedDCNs__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ServedDCNs__bindgen_ty_1 {
    pub array: *mut *mut ServedDCNsItem,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ServedDCNsItem)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedDCNs__bindgen_ty_1"]
        [::std::mem::size_of::<ServedDCNs__bindgen_ty_1>() - 24usize];
    ["Alignment of ServedDCNs__bindgen_ty_1"]
        [::std::mem::align_of::<ServedDCNs__bindgen_ty_1>() - 8usize];
    ["Offset of field: ServedDCNs__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ServedDCNs__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ServedDCNs__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ServedDCNs__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ServedDCNs__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ServedDCNs__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ServedDCNs__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ServedDCNs__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ServedDCNs"][::std::mem::size_of::<ServedDCNs>() - 48usize];
    ["Alignment of ServedDCNs"][::std::mem::align_of::<ServedDCNs>() - 8usize];
    ["Offset of field: ServedDCNs::list"][::std::mem::offset_of!(ServedDCNs, list) - 0usize];
    ["Offset of field: ServedDCNs::_asn_ctx"]
        [::std::mem::offset_of!(ServedDCNs, _asn_ctx) - 24usize];
};
pub type ServedDCNs_t = ServedDCNs;
unsafe extern "C" {
    pub static mut asn_DEF_ServedDCNs: asn_TYPE_descriptor_t;
}
pub type NB_IoT_RLF_Report_Container_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_NB_IoT_RLF_Report_Container: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_RLF_Report_Container_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const RelayNode_Indicator_RelayNode_Indicator_true: RelayNode_Indicator = 0;
pub type RelayNode_Indicator = ::std::os::raw::c_uint;
pub use self::RelayNode_Indicator as e_RelayNode_Indicator;
pub type RelayNode_Indicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_RelayNode_Indicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RelayNode_Indicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type UE_RLF_Report_Container_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_UE_RLF_Report_Container: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn UE_RLF_Report_Container_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RLFReportInformation {
    pub uE_RLF_Report_Container: UE_RLF_Report_Container_t,
    pub uE_RLF_Report_Container_for_extended_bands:
        *mut UE_RLF_Report_Container_for_extended_bands_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RLFReportInformation"][::std::mem::size_of::<RLFReportInformation>() - 80usize];
    ["Alignment of RLFReportInformation"][::std::mem::align_of::<RLFReportInformation>() - 8usize];
    ["Offset of field: RLFReportInformation::uE_RLF_Report_Container"]
        [::std::mem::offset_of!(RLFReportInformation, uE_RLF_Report_Container) - 0usize];
    ["Offset of field: RLFReportInformation::uE_RLF_Report_Container_for_extended_bands"][::std::mem::offset_of!(
        RLFReportInformation,
        uE_RLF_Report_Container_for_extended_bands
    )
        - 40usize];
    ["Offset of field: RLFReportInformation::iE_Extensions"]
        [::std::mem::offset_of!(RLFReportInformation, iE_Extensions) - 48usize];
    ["Offset of field: RLFReportInformation::_asn_ctx"]
        [::std::mem::offset_of!(RLFReportInformation, _asn_ctx) - 56usize];
};
pub type RLFReportInformation_t = RLFReportInformation;
unsafe extern "C" {
    pub static mut asn_DEF_RLFReportInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RLFReportInformation_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RLFReportInformation_1: [asn_TYPE_member_t; 3usize];
}
pub const SONInformationReport_PR_SONInformationReport_PR_NOTHING: SONInformationReport_PR = 0;
pub const SONInformationReport_PR_SONInformationReport_PR_rLFReportInformation:
    SONInformationReport_PR = 1;
pub type SONInformationReport_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SONInformationReport {
    pub present: SONInformationReport_PR,
    pub choice: SONInformationReport_SONInformationReport_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SONInformationReport_SONInformationReport_u {
    pub rLFReportInformation: RLFReportInformation_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SONInformationReport_SONInformationReport_u"]
        [::std::mem::size_of::<SONInformationReport_SONInformationReport_u>() - 80usize];
    ["Alignment of SONInformationReport_SONInformationReport_u"]
        [::std::mem::align_of::<SONInformationReport_SONInformationReport_u>() - 8usize];
    ["Offset of field: SONInformationReport_SONInformationReport_u::rLFReportInformation"][::std::mem::offset_of!(
        SONInformationReport_SONInformationReport_u,
        rLFReportInformation
    )
        - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SONInformationReport"][::std::mem::size_of::<SONInformationReport>() - 112usize];
    ["Alignment of SONInformationReport"][::std::mem::align_of::<SONInformationReport>() - 8usize];
    ["Offset of field: SONInformationReport::present"]
        [::std::mem::offset_of!(SONInformationReport, present) - 0usize];
    ["Offset of field: SONInformationReport::choice"]
        [::std::mem::offset_of!(SONInformationReport, choice) - 8usize];
    ["Offset of field: SONInformationReport::_asn_ctx"]
        [::std::mem::offset_of!(SONInformationReport, _asn_ctx) - 88usize];
};
pub type SONInformationReport_t = SONInformationReport;
unsafe extern "C" {
    pub static mut asn_DEF_SONInformationReport: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RAT_Restrictions {
    pub list: RAT_Restrictions__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RAT_Restrictions__bindgen_ty_1 {
    pub array: *mut *mut RAT_RestrictionsItem,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut RAT_RestrictionsItem)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RAT_Restrictions__bindgen_ty_1"]
        [::std::mem::size_of::<RAT_Restrictions__bindgen_ty_1>() - 24usize];
    ["Alignment of RAT_Restrictions__bindgen_ty_1"]
        [::std::mem::align_of::<RAT_Restrictions__bindgen_ty_1>() - 8usize];
    ["Offset of field: RAT_Restrictions__bindgen_ty_1::array"]
        [::std::mem::offset_of!(RAT_Restrictions__bindgen_ty_1, array) - 0usize];
    ["Offset of field: RAT_Restrictions__bindgen_ty_1::count"]
        [::std::mem::offset_of!(RAT_Restrictions__bindgen_ty_1, count) - 8usize];
    ["Offset of field: RAT_Restrictions__bindgen_ty_1::size"]
        [::std::mem::offset_of!(RAT_Restrictions__bindgen_ty_1, size) - 12usize];
    ["Offset of field: RAT_Restrictions__bindgen_ty_1::free"]
        [::std::mem::offset_of!(RAT_Restrictions__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RAT_Restrictions"][::std::mem::size_of::<RAT_Restrictions>() - 48usize];
    ["Alignment of RAT_Restrictions"][::std::mem::align_of::<RAT_Restrictions>() - 8usize];
    ["Offset of field: RAT_Restrictions::list"]
        [::std::mem::offset_of!(RAT_Restrictions, list) - 0usize];
    ["Offset of field: RAT_Restrictions::_asn_ctx"]
        [::std::mem::offset_of!(RAT_Restrictions, _asn_ctx) - 24usize];
};
pub type RAT_Restrictions_t = RAT_Restrictions;
unsafe extern "C" {
    pub static mut asn_DEF_RAT_Restrictions: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RAT_RestrictionsItem {
    pub pLMNidentity: PLMNidentity_t,
    pub rAT_RestrictionInformation: BIT_STRING_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RAT_RestrictionsItem"][::std::mem::size_of::<RAT_RestrictionsItem>() - 120usize];
    ["Alignment of RAT_RestrictionsItem"][::std::mem::align_of::<RAT_RestrictionsItem>() - 8usize];
    ["Offset of field: RAT_RestrictionsItem::pLMNidentity"]
        [::std::mem::offset_of!(RAT_RestrictionsItem, pLMNidentity) - 0usize];
    ["Offset of field: RAT_RestrictionsItem::rAT_RestrictionInformation"]
        [::std::mem::offset_of!(RAT_RestrictionsItem, rAT_RestrictionInformation) - 40usize];
    ["Offset of field: RAT_RestrictionsItem::iE_Extensions"]
        [::std::mem::offset_of!(RAT_RestrictionsItem, iE_Extensions) - 88usize];
    ["Offset of field: RAT_RestrictionsItem::_asn_ctx"]
        [::std::mem::offset_of!(RAT_RestrictionsItem, _asn_ctx) - 96usize];
};
pub type RAT_RestrictionsItem_t = RAT_RestrictionsItem;
unsafe extern "C" {
    pub static mut asn_DEF_RAT_RestrictionsItem: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_RAT_RestrictionsItem_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_RAT_RestrictionsItem_1: [asn_TYPE_member_t; 3usize];
}
pub type M7period_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_M7period_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_M7period: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn M7period_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn M7period_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M7period_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn M7period_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M7period_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M7period_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M7period_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M7period_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M7period_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn M7period_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn M7period_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MobilityInformation_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_MobilityInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MobilityInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MobilityInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MobilityInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MobilityInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PC5QoSFlowList {
    pub list: PC5QoSFlowList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PC5QoSFlowList__bindgen_ty_1 {
    pub array: *mut *mut PC5QoSFlowItem,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PC5QoSFlowItem)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PC5QoSFlowList__bindgen_ty_1"]
        [::std::mem::size_of::<PC5QoSFlowList__bindgen_ty_1>() - 24usize];
    ["Alignment of PC5QoSFlowList__bindgen_ty_1"]
        [::std::mem::align_of::<PC5QoSFlowList__bindgen_ty_1>() - 8usize];
    ["Offset of field: PC5QoSFlowList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(PC5QoSFlowList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: PC5QoSFlowList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(PC5QoSFlowList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: PC5QoSFlowList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(PC5QoSFlowList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: PC5QoSFlowList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(PC5QoSFlowList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PC5QoSFlowList"][::std::mem::size_of::<PC5QoSFlowList>() - 48usize];
    ["Alignment of PC5QoSFlowList"][::std::mem::align_of::<PC5QoSFlowList>() - 8usize];
    ["Offset of field: PC5QoSFlowList::list"]
        [::std::mem::offset_of!(PC5QoSFlowList, list) - 0usize];
    ["Offset of field: PC5QoSFlowList::_asn_ctx"]
        [::std::mem::offset_of!(PC5QoSFlowList, _asn_ctx) - 24usize];
};
pub type PC5QoSFlowList_t = PC5QoSFlowList;
unsafe extern "C" {
    pub static mut asn_DEF_PC5QoSFlowList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PC5QoSFlowList_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PC5QoSFlowList_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_PC5QoSFlowList_constr_1: asn_per_constraints_t;
}
pub const Range_Range_m50: Range = 0;
pub const Range_Range_m80: Range = 1;
pub const Range_Range_m180: Range = 2;
pub const Range_Range_m200: Range = 3;
pub const Range_Range_m350: Range = 4;
pub const Range_Range_m400: Range = 5;
pub const Range_Range_m500: Range = 6;
pub const Range_Range_m700: Range = 7;
pub const Range_Range_m1000: Range = 8;
pub type Range = ::std::os::raw::c_uint;
pub use self::Range as e_Range;
pub type Range_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Range_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Range: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Range_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Range_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Range_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Range_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Range_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Range_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Range_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Range_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Range_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Range_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Range_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Range_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PC5QoSFlowItem {
    pub pQI: FiveQI_t,
    pub pc5FlowBitRates: *mut PC5FlowBitRates,
    pub range: *mut Range_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PC5QoSFlowItem"][::std::mem::size_of::<PC5QoSFlowItem>() - 56usize];
    ["Alignment of PC5QoSFlowItem"][::std::mem::align_of::<PC5QoSFlowItem>() - 8usize];
    ["Offset of field: PC5QoSFlowItem::pQI"][::std::mem::offset_of!(PC5QoSFlowItem, pQI) - 0usize];
    ["Offset of field: PC5QoSFlowItem::pc5FlowBitRates"]
        [::std::mem::offset_of!(PC5QoSFlowItem, pc5FlowBitRates) - 8usize];
    ["Offset of field: PC5QoSFlowItem::range"]
        [::std::mem::offset_of!(PC5QoSFlowItem, range) - 16usize];
    ["Offset of field: PC5QoSFlowItem::iE_Extensions"]
        [::std::mem::offset_of!(PC5QoSFlowItem, iE_Extensions) - 24usize];
    ["Offset of field: PC5QoSFlowItem::_asn_ctx"]
        [::std::mem::offset_of!(PC5QoSFlowItem, _asn_ctx) - 32usize];
};
pub type PC5QoSFlowItem_t = PC5QoSFlowItem;
unsafe extern "C" {
    pub static mut asn_DEF_PC5QoSFlowItem: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PC5QoSFlowItem_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PC5QoSFlowItem_1: [asn_TYPE_member_t; 4usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PC5QoSParameters {
    pub pc5QoSFlowList: PC5QoSFlowList_t,
    pub pc5LinkAggregatedBitRates: *mut BitRate_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PC5QoSParameters"][::std::mem::size_of::<PC5QoSParameters>() - 88usize];
    ["Alignment of PC5QoSParameters"][::std::mem::align_of::<PC5QoSParameters>() - 8usize];
    ["Offset of field: PC5QoSParameters::pc5QoSFlowList"]
        [::std::mem::offset_of!(PC5QoSParameters, pc5QoSFlowList) - 0usize];
    ["Offset of field: PC5QoSParameters::pc5LinkAggregatedBitRates"]
        [::std::mem::offset_of!(PC5QoSParameters, pc5LinkAggregatedBitRates) - 48usize];
    ["Offset of field: PC5QoSParameters::iE_Extensions"]
        [::std::mem::offset_of!(PC5QoSParameters, iE_Extensions) - 56usize];
    ["Offset of field: PC5QoSParameters::_asn_ctx"]
        [::std::mem::offset_of!(PC5QoSParameters, _asn_ctx) - 64usize];
};
pub type PC5QoSParameters_t = PC5QoSParameters;
unsafe extern "C" {
    pub static mut asn_DEF_PC5QoSParameters: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct Additional_GUTI {
    pub gUMMEI: GUMMEI_t,
    pub m_TMSI: M_TMSI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of Additional_GUTI"][::std::mem::size_of::<Additional_GUTI>() - 224usize];
    ["Alignment of Additional_GUTI"][::std::mem::align_of::<Additional_GUTI>() - 8usize];
    ["Offset of field: Additional_GUTI::gUMMEI"]
        [::std::mem::offset_of!(Additional_GUTI, gUMMEI) - 0usize];
    ["Offset of field: Additional_GUTI::m_TMSI"]
        [::std::mem::offset_of!(Additional_GUTI, m_TMSI) - 152usize];
    ["Offset of field: Additional_GUTI::iE_Extensions"]
        [::std::mem::offset_of!(Additional_GUTI, iE_Extensions) - 192usize];
    ["Offset of field: Additional_GUTI::_asn_ctx"]
        [::std::mem::offset_of!(Additional_GUTI, _asn_ctx) - 200usize];
};
pub type Additional_GUTI_t = Additional_GUTI;
unsafe extern "C" {
    pub static mut asn_DEF_Additional_GUTI: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CriticalityDiagnostics {
    pub procedureCode: *mut ProcedureCode_t,
    pub triggeringMessage: *mut TriggeringMessage_t,
    pub procedureCriticality: *mut Criticality_t,
    pub iEsCriticalityDiagnostics: *mut CriticalityDiagnostics_IE_List,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CriticalityDiagnostics"][::std::mem::size_of::<CriticalityDiagnostics>() - 64usize];
    ["Alignment of CriticalityDiagnostics"]
        [::std::mem::align_of::<CriticalityDiagnostics>() - 8usize];
    ["Offset of field: CriticalityDiagnostics::procedureCode"]
        [::std::mem::offset_of!(CriticalityDiagnostics, procedureCode) - 0usize];
    ["Offset of field: CriticalityDiagnostics::triggeringMessage"]
        [::std::mem::offset_of!(CriticalityDiagnostics, triggeringMessage) - 8usize];
    ["Offset of field: CriticalityDiagnostics::procedureCriticality"]
        [::std::mem::offset_of!(CriticalityDiagnostics, procedureCriticality) - 16usize];
    ["Offset of field: CriticalityDiagnostics::iEsCriticalityDiagnostics"]
        [::std::mem::offset_of!(CriticalityDiagnostics, iEsCriticalityDiagnostics) - 24usize];
    ["Offset of field: CriticalityDiagnostics::iE_Extensions"]
        [::std::mem::offset_of!(CriticalityDiagnostics, iE_Extensions) - 32usize];
    ["Offset of field: CriticalityDiagnostics::_asn_ctx"]
        [::std::mem::offset_of!(CriticalityDiagnostics, _asn_ctx) - 40usize];
};
pub type CriticalityDiagnostics_t = CriticalityDiagnostics;
unsafe extern "C" {
    pub static mut asn_DEF_CriticalityDiagnostics: asn_TYPE_descriptor_t;
}
pub const PagingDRX_PagingDRX_v32: PagingDRX = 0;
pub const PagingDRX_PagingDRX_v64: PagingDRX = 1;
pub const PagingDRX_PagingDRX_v128: PagingDRX = 2;
pub const PagingDRX_PagingDRX_v256: PagingDRX = 3;
pub type PagingDRX = ::std::os::raw::c_uint;
pub use self::PagingDRX as e_PagingDRX;
pub type PagingDRX_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_PagingDRX: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PagingDRX_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PagingDRX_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingDRX_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingDRX_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingDRX_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingDRX_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingDRX_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingDRX_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingDRX_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingDRX_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingDRX_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type Time_UE_StayedInCell_EnhancedGranularity_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Time_UE_StayedInCell_EnhancedGranularity: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Time_UE_StayedInCell_EnhancedGranularity_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_TargetNgRanNode_ToSourceNgRanNode_TransparentContainer:
        asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TargetNgRanNode_ToSourceNgRanNode_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct InterSystemMeasurementParameters {
    pub measurementDuration: ::std::os::raw::c_long,
    pub interSystemMeasurementList: *mut InterSystemMeasurementList,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of InterSystemMeasurementParameters"]
        [::std::mem::size_of::<InterSystemMeasurementParameters>() - 48usize];
    ["Alignment of InterSystemMeasurementParameters"]
        [::std::mem::align_of::<InterSystemMeasurementParameters>() - 8usize];
    ["Offset of field: InterSystemMeasurementParameters::measurementDuration"]
        [::std::mem::offset_of!(InterSystemMeasurementParameters, measurementDuration) - 0usize];
    ["Offset of field: InterSystemMeasurementParameters::interSystemMeasurementList"][::std::mem::offset_of!(
        InterSystemMeasurementParameters,
        interSystemMeasurementList
    ) - 8usize];
    ["Offset of field: InterSystemMeasurementParameters::iE_Extensions"]
        [::std::mem::offset_of!(InterSystemMeasurementParameters, iE_Extensions) - 16usize];
    ["Offset of field: InterSystemMeasurementParameters::_asn_ctx"]
        [::std::mem::offset_of!(InterSystemMeasurementParameters, _asn_ctx) - 24usize];
};
pub type InterSystemMeasurementParameters_t = InterSystemMeasurementParameters;
unsafe extern "C" {
    pub static mut asn_DEF_InterSystemMeasurementParameters: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_InterSystemMeasurementParameters_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_InterSystemMeasurementParameters_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct IntersystemMeasurementConfiguration {
    pub rSRP: *mut ::std::os::raw::c_long,
    pub rSRQ: *mut ::std::os::raw::c_long,
    pub sINR: *mut ::std::os::raw::c_long,
    pub interSystemMeasurementParameters: InterSystemMeasurementParameters_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of IntersystemMeasurementConfiguration"]
        [::std::mem::size_of::<IntersystemMeasurementConfiguration>() - 104usize];
    ["Alignment of IntersystemMeasurementConfiguration"]
        [::std::mem::align_of::<IntersystemMeasurementConfiguration>() - 8usize];
    ["Offset of field: IntersystemMeasurementConfiguration::rSRP"]
        [::std::mem::offset_of!(IntersystemMeasurementConfiguration, rSRP) - 0usize];
    ["Offset of field: IntersystemMeasurementConfiguration::rSRQ"]
        [::std::mem::offset_of!(IntersystemMeasurementConfiguration, rSRQ) - 8usize];
    ["Offset of field: IntersystemMeasurementConfiguration::sINR"]
        [::std::mem::offset_of!(IntersystemMeasurementConfiguration, sINR) - 16usize];
    ["Offset of field: IntersystemMeasurementConfiguration::interSystemMeasurementParameters"][::std::mem::offset_of!(
        IntersystemMeasurementConfiguration,
        interSystemMeasurementParameters
    )
        - 24usize];
    ["Offset of field: IntersystemMeasurementConfiguration::iE_Extensions"]
        [::std::mem::offset_of!(IntersystemMeasurementConfiguration, iE_Extensions) - 72usize];
    ["Offset of field: IntersystemMeasurementConfiguration::_asn_ctx"]
        [::std::mem::offset_of!(IntersystemMeasurementConfiguration, _asn_ctx) - 80usize];
};
pub type IntersystemMeasurementConfiguration_t = IntersystemMeasurementConfiguration;
unsafe extern "C" {
    pub static mut asn_DEF_IntersystemMeasurementConfiguration: asn_TYPE_descriptor_t;
}
pub const OverloadResponse_PR_OverloadResponse_PR_NOTHING: OverloadResponse_PR = 0;
pub const OverloadResponse_PR_OverloadResponse_PR_overloadAction: OverloadResponse_PR = 1;
pub type OverloadResponse_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct OverloadResponse {
    pub present: OverloadResponse_PR,
    pub choice: OverloadResponse_OverloadResponse_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union OverloadResponse_OverloadResponse_u {
    pub overloadAction: OverloadAction_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OverloadResponse_OverloadResponse_u"]
        [::std::mem::size_of::<OverloadResponse_OverloadResponse_u>() - 8usize];
    ["Alignment of OverloadResponse_OverloadResponse_u"]
        [::std::mem::align_of::<OverloadResponse_OverloadResponse_u>() - 8usize];
    ["Offset of field: OverloadResponse_OverloadResponse_u::overloadAction"]
        [::std::mem::offset_of!(OverloadResponse_OverloadResponse_u, overloadAction) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of OverloadResponse"][::std::mem::size_of::<OverloadResponse>() - 40usize];
    ["Alignment of OverloadResponse"][::std::mem::align_of::<OverloadResponse>() - 8usize];
    ["Offset of field: OverloadResponse::present"]
        [::std::mem::offset_of!(OverloadResponse, present) - 0usize];
    ["Offset of field: OverloadResponse::choice"]
        [::std::mem::offset_of!(OverloadResponse, choice) - 8usize];
    ["Offset of field: OverloadResponse::_asn_ctx"]
        [::std::mem::offset_of!(OverloadResponse, _asn_ctx) - 16usize];
};
pub type OverloadResponse_t = OverloadResponse;
unsafe extern "C" {
    pub static mut asn_DEF_OverloadResponse: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRV2XServicesAuthorized {
    pub vehicleUE: *mut VehicleUE_t,
    pub pedestrianUE: *mut PedestrianUE_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NRV2XServicesAuthorized"][::std::mem::size_of::<NRV2XServicesAuthorized>() - 48usize];
    ["Alignment of NRV2XServicesAuthorized"]
        [::std::mem::align_of::<NRV2XServicesAuthorized>() - 8usize];
    ["Offset of field: NRV2XServicesAuthorized::vehicleUE"]
        [::std::mem::offset_of!(NRV2XServicesAuthorized, vehicleUE) - 0usize];
    ["Offset of field: NRV2XServicesAuthorized::pedestrianUE"]
        [::std::mem::offset_of!(NRV2XServicesAuthorized, pedestrianUE) - 8usize];
    ["Offset of field: NRV2XServicesAuthorized::iE_Extensions"]
        [::std::mem::offset_of!(NRV2XServicesAuthorized, iE_Extensions) - 16usize];
    ["Offset of field: NRV2XServicesAuthorized::_asn_ctx"]
        [::std::mem::offset_of!(NRV2XServicesAuthorized, _asn_ctx) - 24usize];
};
pub type NRV2XServicesAuthorized_t = NRV2XServicesAuthorized;
unsafe extern "C" {
    pub static mut asn_DEF_NRV2XServicesAuthorized: asn_TYPE_descriptor_t;
}
pub type ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_ReceiveStatusOfULPDCPSDUsPDCP_SNlength18: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsPDCP_SNlength18_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type LHN_ID_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_LHN_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn LHN_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn LHN_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LHN_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn LHN_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LHN_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LHN_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LHN_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LHN_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LHN_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn LHN_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn LHN_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct V2XServicesAuthorized {
    pub vehicleUE: *mut VehicleUE_t,
    pub pedestrianUE: *mut PedestrianUE_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of V2XServicesAuthorized"][::std::mem::size_of::<V2XServicesAuthorized>() - 48usize];
    ["Alignment of V2XServicesAuthorized"]
        [::std::mem::align_of::<V2XServicesAuthorized>() - 8usize];
    ["Offset of field: V2XServicesAuthorized::vehicleUE"]
        [::std::mem::offset_of!(V2XServicesAuthorized, vehicleUE) - 0usize];
    ["Offset of field: V2XServicesAuthorized::pedestrianUE"]
        [::std::mem::offset_of!(V2XServicesAuthorized, pedestrianUE) - 8usize];
    ["Offset of field: V2XServicesAuthorized::iE_Extensions"]
        [::std::mem::offset_of!(V2XServicesAuthorized, iE_Extensions) - 16usize];
    ["Offset of field: V2XServicesAuthorized::_asn_ctx"]
        [::std::mem::offset_of!(V2XServicesAuthorized, _asn_ctx) - 24usize];
};
pub type V2XServicesAuthorized_t = V2XServicesAuthorized;
unsafe extern "C" {
    pub static mut asn_DEF_V2XServicesAuthorized: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TransportInformation {
    pub transportLayerAddress: TransportLayerAddress_t,
    pub uL_GTP_TEID: GTP_TEID_t,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TransportInformation"][::std::mem::size_of::<TransportInformation>() - 112usize];
    ["Alignment of TransportInformation"][::std::mem::align_of::<TransportInformation>() - 8usize];
    ["Offset of field: TransportInformation::transportLayerAddress"]
        [::std::mem::offset_of!(TransportInformation, transportLayerAddress) - 0usize];
    ["Offset of field: TransportInformation::uL_GTP_TEID"]
        [::std::mem::offset_of!(TransportInformation, uL_GTP_TEID) - 48usize];
    ["Offset of field: TransportInformation::_asn_ctx"]
        [::std::mem::offset_of!(TransportInformation, _asn_ctx) - 88usize];
};
pub type TransportInformation_t = TransportInformation;
unsafe extern "C" {
    pub static mut asn_DEF_TransportInformation: asn_TYPE_descriptor_t;
}
pub const DAPSResponseInfo__dapsresponseindicator_DAPSResponseInfo__dapsresponseindicator_dAPS_HO_accepted : DAPSResponseInfo__dapsresponseindicator = 0 ;
pub const DAPSResponseInfo__dapsresponseindicator_DAPSResponseInfo__dapsresponseindicator_dAPS_HO_not_accepted : DAPSResponseInfo__dapsresponseindicator = 1 ;
pub type DAPSResponseInfo__dapsresponseindicator = ::std::os::raw::c_uint;
pub use self::DAPSResponseInfo__dapsresponseindicator as e_DAPSResponseInfo__dapsresponseindicator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAPSResponseInfo {
    pub dapsresponseindicator: ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DAPSResponseInfo"][::std::mem::size_of::<DAPSResponseInfo>() - 40usize];
    ["Alignment of DAPSResponseInfo"][::std::mem::align_of::<DAPSResponseInfo>() - 8usize];
    ["Offset of field: DAPSResponseInfo::dapsresponseindicator"]
        [::std::mem::offset_of!(DAPSResponseInfo, dapsresponseindicator) - 0usize];
    ["Offset of field: DAPSResponseInfo::iE_Extensions"]
        [::std::mem::offset_of!(DAPSResponseInfo, iE_Extensions) - 8usize];
    ["Offset of field: DAPSResponseInfo::_asn_ctx"]
        [::std::mem::offset_of!(DAPSResponseInfo, _asn_ctx) - 16usize];
};
pub type DAPSResponseInfo_t = DAPSResponseInfo;
unsafe extern "C" {
    pub static mut asn_DEF_DAPSResponseInfo: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_DAPSResponseInfo_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_DAPSResponseInfo_1: [asn_TYPE_member_t; 2usize];
}
pub const Presence_Presence_optional: Presence = 0;
pub const Presence_Presence_conditional: Presence = 1;
pub const Presence_Presence_mandatory: Presence = 2;
pub type Presence = ::std::os::raw::c_uint;
pub use self::Presence as e_Presence;
pub type Presence_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_Presence_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Presence: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_Presence_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn Presence_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Presence_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Presence_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Presence_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Presence_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Presence_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Presence_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Presence_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Presence_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Presence_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Presence_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSetupItemBearerSUReq {
    pub e_RAB_ID: E_RAB_ID_t,
    pub e_RABlevelQoSParameters: E_RABLevelQoSParameters_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub nAS_PDU: NAS_PDU_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSetupItemBearerSUReq"]
        [::std::mem::size_of::<E_RABToBeSetupItemBearerSUReq>() - 272usize];
    ["Alignment of E_RABToBeSetupItemBearerSUReq"]
        [::std::mem::align_of::<E_RABToBeSetupItemBearerSUReq>() - 8usize];
    ["Offset of field: E_RABToBeSetupItemBearerSUReq::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeSetupItemBearerSUReq, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeSetupItemBearerSUReq::e_RABlevelQoSParameters"]
        [::std::mem::offset_of!(E_RABToBeSetupItemBearerSUReq, e_RABlevelQoSParameters) - 8usize];
    ["Offset of field: E_RABToBeSetupItemBearerSUReq::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABToBeSetupItemBearerSUReq, transportLayerAddress) - 112usize];
    ["Offset of field: E_RABToBeSetupItemBearerSUReq::gTP_TEID"]
        [::std::mem::offset_of!(E_RABToBeSetupItemBearerSUReq, gTP_TEID) - 160usize];
    ["Offset of field: E_RABToBeSetupItemBearerSUReq::nAS_PDU"]
        [::std::mem::offset_of!(E_RABToBeSetupItemBearerSUReq, nAS_PDU) - 200usize];
    ["Offset of field: E_RABToBeSetupItemBearerSUReq::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeSetupItemBearerSUReq, iE_Extensions) - 240usize];
    ["Offset of field: E_RABToBeSetupItemBearerSUReq::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeSetupItemBearerSUReq, _asn_ctx) - 248usize];
};
pub type E_RABToBeSetupItemBearerSUReq_t = E_RABToBeSetupItemBearerSUReq;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSetupItemBearerSUReq: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct E_RABFailedToSetupItemHOReqAck {
    pub e_RAB_ID: E_RAB_ID_t,
    pub cause: Cause_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABFailedToSetupItemHOReqAck"]
        [::std::mem::size_of::<E_RABFailedToSetupItemHOReqAck>() - 80usize];
    ["Alignment of E_RABFailedToSetupItemHOReqAck"]
        [::std::mem::align_of::<E_RABFailedToSetupItemHOReqAck>() - 8usize];
    ["Offset of field: E_RABFailedToSetupItemHOReqAck::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABFailedToSetupItemHOReqAck, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABFailedToSetupItemHOReqAck::cause"]
        [::std::mem::offset_of!(E_RABFailedToSetupItemHOReqAck, cause) - 8usize];
    ["Offset of field: E_RABFailedToSetupItemHOReqAck::iE_Extensions"]
        [::std::mem::offset_of!(E_RABFailedToSetupItemHOReqAck, iE_Extensions) - 48usize];
    ["Offset of field: E_RABFailedToSetupItemHOReqAck::_asn_ctx"]
        [::std::mem::offset_of!(E_RABFailedToSetupItemHOReqAck, _asn_ctx) - 56usize];
};
pub type E_RABFailedToSetupItemHOReqAck_t = E_RABFailedToSetupItemHOReqAck;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABFailedToSetupItemHOReqAck: asn_TYPE_descriptor_t;
}
pub type E_RABFailedtoSetupListHOReqAck_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABFailedtoSetupListHOReqAck: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedtoSetupListHOReqAck_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const PagingProbabilityInformation_PagingProbabilityInformation_p00:
    PagingProbabilityInformation = 0;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p05:
    PagingProbabilityInformation = 1;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p10:
    PagingProbabilityInformation = 2;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p15:
    PagingProbabilityInformation = 3;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p20:
    PagingProbabilityInformation = 4;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p25:
    PagingProbabilityInformation = 5;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p30:
    PagingProbabilityInformation = 6;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p35:
    PagingProbabilityInformation = 7;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p40:
    PagingProbabilityInformation = 8;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p45:
    PagingProbabilityInformation = 9;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p50:
    PagingProbabilityInformation = 10;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p55:
    PagingProbabilityInformation = 11;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p60:
    PagingProbabilityInformation = 12;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p65:
    PagingProbabilityInformation = 13;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p70:
    PagingProbabilityInformation = 14;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p75:
    PagingProbabilityInformation = 15;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p80:
    PagingProbabilityInformation = 16;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p85:
    PagingProbabilityInformation = 17;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p90:
    PagingProbabilityInformation = 18;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p95:
    PagingProbabilityInformation = 19;
pub const PagingProbabilityInformation_PagingProbabilityInformation_p100:
    PagingProbabilityInformation = 20;
pub type PagingProbabilityInformation = ::std::os::raw::c_uint;
pub use self::PagingProbabilityInformation as e_PagingProbabilityInformation;
pub type PagingProbabilityInformation_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_PagingProbabilityInformation_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_PagingProbabilityInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_PagingProbabilityInformation_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingProbabilityInformation_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct WUS_Assistance_Information {
    pub pagingProbabilityInformation: PagingProbabilityInformation_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of WUS_Assistance_Information"]
        [::std::mem::size_of::<WUS_Assistance_Information>() - 40usize];
    ["Alignment of WUS_Assistance_Information"]
        [::std::mem::align_of::<WUS_Assistance_Information>() - 8usize];
    ["Offset of field: WUS_Assistance_Information::pagingProbabilityInformation"]
        [::std::mem::offset_of!(WUS_Assistance_Information, pagingProbabilityInformation) - 0usize];
    ["Offset of field: WUS_Assistance_Information::iE_Extensions"]
        [::std::mem::offset_of!(WUS_Assistance_Information, iE_Extensions) - 8usize];
    ["Offset of field: WUS_Assistance_Information::_asn_ctx"]
        [::std::mem::offset_of!(WUS_Assistance_Information, _asn_ctx) - 16usize];
};
pub type WUS_Assistance_Information_t = WUS_Assistance_Information;
unsafe extern "C" {
    pub static mut asn_DEF_WUS_Assistance_Information: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DL_CP_SecurityInformation {
    pub dl_NAS_MAC: DL_NAS_MAC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DL_CP_SecurityInformation"]
        [::std::mem::size_of::<DL_CP_SecurityInformation>() - 80usize];
    ["Alignment of DL_CP_SecurityInformation"]
        [::std::mem::align_of::<DL_CP_SecurityInformation>() - 8usize];
    ["Offset of field: DL_CP_SecurityInformation::dl_NAS_MAC"]
        [::std::mem::offset_of!(DL_CP_SecurityInformation, dl_NAS_MAC) - 0usize];
    ["Offset of field: DL_CP_SecurityInformation::iE_Extensions"]
        [::std::mem::offset_of!(DL_CP_SecurityInformation, iE_Extensions) - 48usize];
    ["Offset of field: DL_CP_SecurityInformation::_asn_ctx"]
        [::std::mem::offset_of!(DL_CP_SecurityInformation, _asn_ctx) - 56usize];
};
pub type DL_CP_SecurityInformation_t = DL_CP_SecurityInformation;
unsafe extern "C" {
    pub static mut asn_DEF_DL_CP_SecurityInformation: asn_TYPE_descriptor_t;
}
pub const ExpectedHOInterval_ExpectedHOInterval_sec15: ExpectedHOInterval = 0;
pub const ExpectedHOInterval_ExpectedHOInterval_sec30: ExpectedHOInterval = 1;
pub const ExpectedHOInterval_ExpectedHOInterval_sec60: ExpectedHOInterval = 2;
pub const ExpectedHOInterval_ExpectedHOInterval_sec90: ExpectedHOInterval = 3;
pub const ExpectedHOInterval_ExpectedHOInterval_sec120: ExpectedHOInterval = 4;
pub const ExpectedHOInterval_ExpectedHOInterval_sec180: ExpectedHOInterval = 5;
pub const ExpectedHOInterval_ExpectedHOInterval_long_time: ExpectedHOInterval = 6;
pub type ExpectedHOInterval = ::std::os::raw::c_uint;
pub use self::ExpectedHOInterval as e_ExpectedHOInterval;
pub type ExpectedHOInterval_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_ExpectedHOInterval_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_ExpectedHOInterval: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_ExpectedHOInterval_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExpectedHOInterval_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ExpectedUEBehaviour {
    pub expectedActivity: *mut ExpectedUEActivityBehaviour,
    pub expectedHOInterval: *mut ExpectedHOInterval_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ExpectedUEBehaviour"][::std::mem::size_of::<ExpectedUEBehaviour>() - 48usize];
    ["Alignment of ExpectedUEBehaviour"][::std::mem::align_of::<ExpectedUEBehaviour>() - 8usize];
    ["Offset of field: ExpectedUEBehaviour::expectedActivity"]
        [::std::mem::offset_of!(ExpectedUEBehaviour, expectedActivity) - 0usize];
    ["Offset of field: ExpectedUEBehaviour::expectedHOInterval"]
        [::std::mem::offset_of!(ExpectedUEBehaviour, expectedHOInterval) - 8usize];
    ["Offset of field: ExpectedUEBehaviour::iE_Extensions"]
        [::std::mem::offset_of!(ExpectedUEBehaviour, iE_Extensions) - 16usize];
    ["Offset of field: ExpectedUEBehaviour::_asn_ctx"]
        [::std::mem::offset_of!(ExpectedUEBehaviour, _asn_ctx) - 24usize];
};
pub type ExpectedUEBehaviour_t = ExpectedUEBehaviour;
unsafe extern "C" {
    pub static mut asn_DEF_ExpectedUEBehaviour: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UESidelinkAggregateMaximumBitrate {
    pub uESidelinkAggregateMaximumBitRate: BitRate_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UESidelinkAggregateMaximumBitrate"]
        [::std::mem::size_of::<UESidelinkAggregateMaximumBitrate>() - 48usize];
    ["Alignment of UESidelinkAggregateMaximumBitrate"]
        [::std::mem::align_of::<UESidelinkAggregateMaximumBitrate>() - 8usize];
    ["Offset of field: UESidelinkAggregateMaximumBitrate::uESidelinkAggregateMaximumBitRate"][::std::mem::offset_of!(
        UESidelinkAggregateMaximumBitrate,
        uESidelinkAggregateMaximumBitRate
    )
        - 0usize];
    ["Offset of field: UESidelinkAggregateMaximumBitrate::iE_Extensions"]
        [::std::mem::offset_of!(UESidelinkAggregateMaximumBitrate, iE_Extensions) - 16usize];
    ["Offset of field: UESidelinkAggregateMaximumBitrate::_asn_ctx"]
        [::std::mem::offset_of!(UESidelinkAggregateMaximumBitrate, _asn_ctx) - 24usize];
};
pub type UESidelinkAggregateMaximumBitrate_t = UESidelinkAggregateMaximumBitrate;
unsafe extern "C" {
    pub static mut asn_DEF_UESidelinkAggregateMaximumBitrate: asn_TYPE_descriptor_t;
}
pub const Cdma2000HORequiredIndication_Cdma2000HORequiredIndication_true:
    Cdma2000HORequiredIndication = 0;
pub type Cdma2000HORequiredIndication = ::std::os::raw::c_uint;
pub use self::Cdma2000HORequiredIndication as e_Cdma2000HORequiredIndication;
pub type Cdma2000HORequiredIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000HORequiredIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000HORequiredIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type ExtendedBitRate_t = INTEGER_t;
unsafe extern "C" {
    pub static mut asn_DEF_ExtendedBitRate: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ExtendedBitRate_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ExtendedBitRate_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListForRestart {
    pub list: TAIListForRestart__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIListForRestart__bindgen_ty_1 {
    pub array: *mut *mut TAI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut TAI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListForRestart__bindgen_ty_1"]
        [::std::mem::size_of::<TAIListForRestart__bindgen_ty_1>() - 24usize];
    ["Alignment of TAIListForRestart__bindgen_ty_1"]
        [::std::mem::align_of::<TAIListForRestart__bindgen_ty_1>() - 8usize];
    ["Offset of field: TAIListForRestart__bindgen_ty_1::array"]
        [::std::mem::offset_of!(TAIListForRestart__bindgen_ty_1, array) - 0usize];
    ["Offset of field: TAIListForRestart__bindgen_ty_1::count"]
        [::std::mem::offset_of!(TAIListForRestart__bindgen_ty_1, count) - 8usize];
    ["Offset of field: TAIListForRestart__bindgen_ty_1::size"]
        [::std::mem::offset_of!(TAIListForRestart__bindgen_ty_1, size) - 12usize];
    ["Offset of field: TAIListForRestart__bindgen_ty_1::free"]
        [::std::mem::offset_of!(TAIListForRestart__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIListForRestart"][::std::mem::size_of::<TAIListForRestart>() - 48usize];
    ["Alignment of TAIListForRestart"][::std::mem::align_of::<TAIListForRestart>() - 8usize];
    ["Offset of field: TAIListForRestart::list"]
        [::std::mem::offset_of!(TAIListForRestart, list) - 0usize];
    ["Offset of field: TAIListForRestart::_asn_ctx"]
        [::std::mem::offset_of!(TAIListForRestart, _asn_ctx) - 24usize];
};
pub type TAIListForRestart_t = TAIListForRestart;
unsafe extern "C" {
    pub static mut asn_DEF_TAIListForRestart: asn_TYPE_descriptor_t;
}
pub const Cdma2000RATType_Cdma2000RATType_hRPD: Cdma2000RATType = 0;
pub const Cdma2000RATType_Cdma2000RATType_onexRTT: Cdma2000RATType = 1;
pub type Cdma2000RATType = ::std::os::raw::c_uint;
pub use self::Cdma2000RATType as e_Cdma2000RATType;
pub type Cdma2000RATType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000RATType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000RATType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000RATType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SRVCCOperationPossible_SRVCCOperationPossible_possible: SRVCCOperationPossible = 0;
pub type SRVCCOperationPossible = ::std::os::raw::c_uint;
pub use self::SRVCCOperationPossible as e_SRVCCOperationPossible;
pub type SRVCCOperationPossible_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_SRVCCOperationPossible: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationPossible_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type MDT_ConfigurationNR_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_MDT_ConfigurationNR: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MDT_ConfigurationNR_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Ethernet_Type_Ethernet_Type_true: Ethernet_Type = 0;
pub type Ethernet_Type = ::std::os::raw::c_uint;
pub use self::Ethernet_Type as e_Ethernet_Type;
pub type Ethernet_Type_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Ethernet_Type: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Ethernet_Type_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Ethernet_Type_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Ethernet_Type_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Ethernet_Type_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRUESidelinkAggregateMaximumBitrate {
    pub uEaggregateMaximumBitRate: BitRate_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NRUESidelinkAggregateMaximumBitrate"]
        [::std::mem::size_of::<NRUESidelinkAggregateMaximumBitrate>() - 48usize];
    ["Alignment of NRUESidelinkAggregateMaximumBitrate"]
        [::std::mem::align_of::<NRUESidelinkAggregateMaximumBitrate>() - 8usize];
    ["Offset of field: NRUESidelinkAggregateMaximumBitrate::uEaggregateMaximumBitRate"][::std::mem::offset_of!(
        NRUESidelinkAggregateMaximumBitrate,
        uEaggregateMaximumBitRate
    ) - 0usize];
    ["Offset of field: NRUESidelinkAggregateMaximumBitrate::iE_Extensions"]
        [::std::mem::offset_of!(NRUESidelinkAggregateMaximumBitrate, iE_Extensions) - 16usize];
    ["Offset of field: NRUESidelinkAggregateMaximumBitrate::_asn_ctx"]
        [::std::mem::offset_of!(NRUESidelinkAggregateMaximumBitrate, _asn_ctx) - 24usize];
};
pub type NRUESidelinkAggregateMaximumBitrate_t = NRUESidelinkAggregateMaximumBitrate;
unsafe extern "C" {
    pub static mut asn_DEF_NRUESidelinkAggregateMaximumBitrate: asn_TYPE_descriptor_t;
}
pub const GUMMEIType_GUMMEIType_native: GUMMEIType = 0;
pub const GUMMEIType_GUMMEIType_mapped: GUMMEIType = 1;
pub const GUMMEIType_GUMMEIType_mappedFrom5G: GUMMEIType = 2;
pub type GUMMEIType = ::std::os::raw::c_uint;
pub use self::GUMMEIType as e_GUMMEIType;
pub type GUMMEIType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_GUMMEIType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn GUMMEIType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GUMMEIType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn GUMMEIType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn GUMMEIType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AssistanceDataForPaging {
    pub assistanceDataForRecommendedCells: *mut AssistanceDataForRecommendedCells,
    pub assistanceDataForCECapableUEs: *mut AssistanceDataForCECapableUEs,
    pub pagingAttemptInformation: *mut PagingAttemptInformation,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AssistanceDataForPaging"][::std::mem::size_of::<AssistanceDataForPaging>() - 56usize];
    ["Alignment of AssistanceDataForPaging"]
        [::std::mem::align_of::<AssistanceDataForPaging>() - 8usize];
    ["Offset of field: AssistanceDataForPaging::assistanceDataForRecommendedCells"][::std::mem::offset_of!(
        AssistanceDataForPaging,
        assistanceDataForRecommendedCells
    ) - 0usize];
    ["Offset of field: AssistanceDataForPaging::assistanceDataForCECapableUEs"]
        [::std::mem::offset_of!(AssistanceDataForPaging, assistanceDataForCECapableUEs) - 8usize];
    ["Offset of field: AssistanceDataForPaging::pagingAttemptInformation"]
        [::std::mem::offset_of!(AssistanceDataForPaging, pagingAttemptInformation) - 16usize];
    ["Offset of field: AssistanceDataForPaging::iE_Extensions"]
        [::std::mem::offset_of!(AssistanceDataForPaging, iE_Extensions) - 24usize];
    ["Offset of field: AssistanceDataForPaging::_asn_ctx"]
        [::std::mem::offset_of!(AssistanceDataForPaging, _asn_ctx) - 32usize];
};
pub type AssistanceDataForPaging_t = AssistanceDataForPaging;
unsafe extern "C" {
    pub static mut asn_DEF_AssistanceDataForPaging: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct AssistanceDataForRecommendedCells {
    pub recommendedCellsForPaging: RecommendedCellsForPaging_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AssistanceDataForRecommendedCells"]
        [::std::mem::size_of::<AssistanceDataForRecommendedCells>() - 112usize];
    ["Alignment of AssistanceDataForRecommendedCells"]
        [::std::mem::align_of::<AssistanceDataForRecommendedCells>() - 8usize];
    ["Offset of field: AssistanceDataForRecommendedCells::recommendedCellsForPaging"][::std::mem::offset_of!(
        AssistanceDataForRecommendedCells,
        recommendedCellsForPaging
    ) - 0usize];
    ["Offset of field: AssistanceDataForRecommendedCells::iE_Extensions"]
        [::std::mem::offset_of!(AssistanceDataForRecommendedCells, iE_Extensions) - 80usize];
    ["Offset of field: AssistanceDataForRecommendedCells::_asn_ctx"]
        [::std::mem::offset_of!(AssistanceDataForRecommendedCells, _asn_ctx) - 88usize];
};
pub type AssistanceDataForRecommendedCells_t = AssistanceDataForRecommendedCells;
unsafe extern "C" {
    pub static mut asn_DEF_AssistanceDataForRecommendedCells: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_AssistanceDataForRecommendedCells_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_AssistanceDataForRecommendedCells_1: [asn_TYPE_member_t; 2usize];
}
pub type IntendedNumberOfPagingAttempts_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_IntendedNumberOfPagingAttempts_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_IntendedNumberOfPagingAttempts: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntendedNumberOfPagingAttempts_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PagingAttemptInformation {
    pub pagingAttemptCount: PagingAttemptCount_t,
    pub intendedNumberOfPagingAttempts: IntendedNumberOfPagingAttempts_t,
    pub nextPagingAreaScope: *mut NextPagingAreaScope_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PagingAttemptInformation"]
        [::std::mem::size_of::<PagingAttemptInformation>() - 56usize];
    ["Alignment of PagingAttemptInformation"]
        [::std::mem::align_of::<PagingAttemptInformation>() - 8usize];
    ["Offset of field: PagingAttemptInformation::pagingAttemptCount"]
        [::std::mem::offset_of!(PagingAttemptInformation, pagingAttemptCount) - 0usize];
    ["Offset of field: PagingAttemptInformation::intendedNumberOfPagingAttempts"]
        [::std::mem::offset_of!(PagingAttemptInformation, intendedNumberOfPagingAttempts) - 8usize];
    ["Offset of field: PagingAttemptInformation::nextPagingAreaScope"]
        [::std::mem::offset_of!(PagingAttemptInformation, nextPagingAreaScope) - 16usize];
    ["Offset of field: PagingAttemptInformation::iE_Extensions"]
        [::std::mem::offset_of!(PagingAttemptInformation, iE_Extensions) - 24usize];
    ["Offset of field: PagingAttemptInformation::_asn_ctx"]
        [::std::mem::offset_of!(PagingAttemptInformation, _asn_ctx) - 32usize];
};
pub type PagingAttemptInformation_t = PagingAttemptInformation;
unsafe extern "C" {
    pub static mut asn_DEF_PagingAttemptInformation: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PagingAttemptInformation_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PagingAttemptInformation_1: [asn_TYPE_member_t; 4usize];
}
pub type E_RABNotToBeModifiedListBearerModInd_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABNotToBeModifiedListBearerModInd: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABNotToBeModifiedListBearerModInd_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type IntegrityProtectionAlgorithms_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_IntegrityProtectionAlgorithms_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_IntegrityProtectionAlgorithms: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntegrityProtectionAlgorithms_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UESecurityCapabilities {
    pub encryptionAlgorithms: EncryptionAlgorithms_t,
    pub integrityProtectionAlgorithms: IntegrityProtectionAlgorithms_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UESecurityCapabilities"][::std::mem::size_of::<UESecurityCapabilities>() - 128usize];
    ["Alignment of UESecurityCapabilities"]
        [::std::mem::align_of::<UESecurityCapabilities>() - 8usize];
    ["Offset of field: UESecurityCapabilities::encryptionAlgorithms"]
        [::std::mem::offset_of!(UESecurityCapabilities, encryptionAlgorithms) - 0usize];
    ["Offset of field: UESecurityCapabilities::integrityProtectionAlgorithms"]
        [::std::mem::offset_of!(UESecurityCapabilities, integrityProtectionAlgorithms) - 48usize];
    ["Offset of field: UESecurityCapabilities::iE_Extensions"]
        [::std::mem::offset_of!(UESecurityCapabilities, iE_Extensions) - 96usize];
    ["Offset of field: UESecurityCapabilities::_asn_ctx"]
        [::std::mem::offset_of!(UESecurityCapabilities, _asn_ctx) - 104usize];
};
pub type UESecurityCapabilities_t = UESecurityCapabilities;
unsafe extern "C" {
    pub static mut asn_DEF_UESecurityCapabilities: asn_TYPE_descriptor_t;
}
pub const NB_IoT_PagingDRX_NB_IoT_PagingDRX_v32: NB_IoT_PagingDRX = 0;
pub const NB_IoT_PagingDRX_NB_IoT_PagingDRX_v64: NB_IoT_PagingDRX = 1;
pub const NB_IoT_PagingDRX_NB_IoT_PagingDRX_v128: NB_IoT_PagingDRX = 2;
pub const NB_IoT_PagingDRX_NB_IoT_PagingDRX_v256: NB_IoT_PagingDRX = 3;
pub const NB_IoT_PagingDRX_NB_IoT_PagingDRX_v512: NB_IoT_PagingDRX = 4;
pub const NB_IoT_PagingDRX_NB_IoT_PagingDRX_v1024: NB_IoT_PagingDRX = 5;
pub type NB_IoT_PagingDRX = ::std::os::raw::c_uint;
pub use self::NB_IoT_PagingDRX as e_NB_IoT_PagingDRX;
pub type NB_IoT_PagingDRX_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_NB_IoT_PagingDRX: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NB_IoT_PagingDRX_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct LoggedMBSFNMDT {
    pub loggingInterval: LoggingInterval_t,
    pub loggingDuration: LoggingDuration_t,
    pub mBSFN_ResultToLog: *mut MBSFN_ResultToLog,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LoggedMBSFNMDT"][::std::mem::size_of::<LoggedMBSFNMDT>() - 56usize];
    ["Alignment of LoggedMBSFNMDT"][::std::mem::align_of::<LoggedMBSFNMDT>() - 8usize];
    ["Offset of field: LoggedMBSFNMDT::loggingInterval"]
        [::std::mem::offset_of!(LoggedMBSFNMDT, loggingInterval) - 0usize];
    ["Offset of field: LoggedMBSFNMDT::loggingDuration"]
        [::std::mem::offset_of!(LoggedMBSFNMDT, loggingDuration) - 8usize];
    ["Offset of field: LoggedMBSFNMDT::mBSFN_ResultToLog"]
        [::std::mem::offset_of!(LoggedMBSFNMDT, mBSFN_ResultToLog) - 16usize];
    ["Offset of field: LoggedMBSFNMDT::iE_Extensions"]
        [::std::mem::offset_of!(LoggedMBSFNMDT, iE_Extensions) - 24usize];
    ["Offset of field: LoggedMBSFNMDT::_asn_ctx"]
        [::std::mem::offset_of!(LoggedMBSFNMDT, _asn_ctx) - 32usize];
};
pub type LoggedMBSFNMDT_t = LoggedMBSFNMDT;
unsafe extern "C" {
    pub static mut asn_DEF_LoggedMBSFNMDT: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn uper_open_type_get(
        opt_codec_ctx: *const asn_codec_ctx_t,
        td: *const asn_TYPE_descriptor_t,
        constraints: *const asn_per_constraints_t,
        sptr: *mut *mut ::std::os::raw::c_void,
        pd: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn uper_open_type_skip(
        opt_codec_ctx: *const asn_codec_ctx_t,
        pd: *mut asn_per_data_t,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn uper_open_type_put(
        td: *const asn_TYPE_descriptor_t,
        constraints: *const asn_per_constraints_t,
        sptr: *const ::std::os::raw::c_void,
        po: *mut asn_per_outp_t,
    ) -> ::std::os::raw::c_int;
}
pub const SynchronisationStatus_SynchronisationStatus_synchronous: SynchronisationStatus = 0;
pub const SynchronisationStatus_SynchronisationStatus_asynchronous: SynchronisationStatus = 1;
pub type SynchronisationStatus = ::std::os::raw::c_uint;
pub use self::SynchronisationStatus as e_SynchronisationStatus;
pub type SynchronisationStatus_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_PER_type_SynchronisationStatus_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_SynchronisationStatus: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static asn_SPC_SynchronisationStatus_specs_1: asn_INTEGER_specifics_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SynchronisationStatus_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SynchronisationStatus_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TimeSynchronisationInfo {
    pub stratumLevel: StratumLevel_t,
    pub synchronisationStatus: SynchronisationStatus_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TimeSynchronisationInfo"][::std::mem::size_of::<TimeSynchronisationInfo>() - 48usize];
    ["Alignment of TimeSynchronisationInfo"]
        [::std::mem::align_of::<TimeSynchronisationInfo>() - 8usize];
    ["Offset of field: TimeSynchronisationInfo::stratumLevel"]
        [::std::mem::offset_of!(TimeSynchronisationInfo, stratumLevel) - 0usize];
    ["Offset of field: TimeSynchronisationInfo::synchronisationStatus"]
        [::std::mem::offset_of!(TimeSynchronisationInfo, synchronisationStatus) - 8usize];
    ["Offset of field: TimeSynchronisationInfo::iE_Extensions"]
        [::std::mem::offset_of!(TimeSynchronisationInfo, iE_Extensions) - 16usize];
    ["Offset of field: TimeSynchronisationInfo::_asn_ctx"]
        [::std::mem::offset_of!(TimeSynchronisationInfo, _asn_ctx) - 24usize];
};
pub type TimeSynchronisationInfo_t = TimeSynchronisationInfo;
unsafe extern "C" {
    pub static mut asn_DEF_TimeSynchronisationInfo: asn_TYPE_descriptor_t;
}
pub const PagingPriority_PagingPriority_priolevel1: PagingPriority = 0;
pub const PagingPriority_PagingPriority_priolevel2: PagingPriority = 1;
pub const PagingPriority_PagingPriority_priolevel3: PagingPriority = 2;
pub const PagingPriority_PagingPriority_priolevel4: PagingPriority = 3;
pub const PagingPriority_PagingPriority_priolevel5: PagingPriority = 4;
pub const PagingPriority_PagingPriority_priolevel6: PagingPriority = 5;
pub const PagingPriority_PagingPriority_priolevel7: PagingPriority = 6;
pub const PagingPriority_PagingPriority_priolevel8: PagingPriority = 7;
pub type PagingPriority = ::std::os::raw::c_uint;
pub use self::PagingPriority as e_PagingPriority;
pub type PagingPriority_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_PagingPriority: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PagingPriority_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PagingPriority_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingPriority_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingPriority_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingPriority_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingPriority_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingPriority_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingPriority_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingPriority_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingPriority_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingPriority_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type DataCodingScheme_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_DataCodingScheme: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn DataCodingScheme_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DataCodingScheme_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DataCodingScheme_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DataCodingScheme_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABToBeUpdatedList_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeUpdatedList: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABToBeUpdatedList_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type RepetitionPeriod_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_RepetitionPeriod: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RepetitionPeriod_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RepetitionPeriod_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSecurityResultItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub securityResult: SecurityResult_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSecurityResultItem"][::std::mem::size_of::<E_RABSecurityResultItem>() - 80usize];
    ["Alignment of E_RABSecurityResultItem"]
        [::std::mem::align_of::<E_RABSecurityResultItem>() - 8usize];
    ["Offset of field: E_RABSecurityResultItem::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABSecurityResultItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABSecurityResultItem::securityResult"]
        [::std::mem::offset_of!(E_RABSecurityResultItem, securityResult) - 8usize];
    ["Offset of field: E_RABSecurityResultItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABSecurityResultItem, iE_Extensions) - 48usize];
    ["Offset of field: E_RABSecurityResultItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSecurityResultItem, _asn_ctx) - 56usize];
};
pub type E_RABSecurityResultItem_t = E_RABSecurityResultItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSecurityResultItem: asn_TYPE_descriptor_t;
}
pub const ServiceType_ServiceType_qMC_for_streaming_service: ServiceType = 0;
pub const ServiceType_ServiceType_qMC_for_MTSI_service: ServiceType = 1;
pub type ServiceType = ::std::os::raw::c_uint;
pub use self::ServiceType as e_ServiceType;
pub type ServiceType_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_ServiceType: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ServiceType_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ServiceType_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ServiceType_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ServiceType_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ServiceType_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ServiceType_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ServiceType_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ServiceType_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ServiceType_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ServiceType_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ServiceType_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const DAPSRequestInfo__dAPSIndicator_DAPSRequestInfo__dAPSIndicator_dAPS_HO_required:
    DAPSRequestInfo__dAPSIndicator = 0;
pub type DAPSRequestInfo__dAPSIndicator = ::std::os::raw::c_uint;
pub use self::DAPSRequestInfo__dAPSIndicator as e_DAPSRequestInfo__dAPSIndicator;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAPSRequestInfo {
    pub dAPSIndicator: ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DAPSRequestInfo"][::std::mem::size_of::<DAPSRequestInfo>() - 40usize];
    ["Alignment of DAPSRequestInfo"][::std::mem::align_of::<DAPSRequestInfo>() - 8usize];
    ["Offset of field: DAPSRequestInfo::dAPSIndicator"]
        [::std::mem::offset_of!(DAPSRequestInfo, dAPSIndicator) - 0usize];
    ["Offset of field: DAPSRequestInfo::iE_Extensions"]
        [::std::mem::offset_of!(DAPSRequestInfo, iE_Extensions) - 8usize];
    ["Offset of field: DAPSRequestInfo::_asn_ctx"]
        [::std::mem::offset_of!(DAPSRequestInfo, _asn_ctx) - 16usize];
};
pub type DAPSRequestInfo_t = DAPSRequestInfo;
unsafe extern "C" {
    pub static mut asn_DEF_DAPSRequestInfo: asn_TYPE_descriptor_t;
}
pub const TimeToWait_TimeToWait_v1s: TimeToWait = 0;
pub const TimeToWait_TimeToWait_v2s: TimeToWait = 1;
pub const TimeToWait_TimeToWait_v5s: TimeToWait = 2;
pub const TimeToWait_TimeToWait_v10s: TimeToWait = 3;
pub const TimeToWait_TimeToWait_v20s: TimeToWait = 4;
pub const TimeToWait_TimeToWait_v60s: TimeToWait = 5;
pub type TimeToWait = ::std::os::raw::c_uint;
pub use self::TimeToWait as e_TimeToWait;
pub type TimeToWait_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_TimeToWait: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TimeToWait_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TimeToWait_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TimeToWait_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TimeToWait_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToWait_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeToWait_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToWait_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeToWait_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToWait_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeToWait_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeToWait_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECGI_List {
    pub list: ECGI_List__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ECGI_List__bindgen_ty_1 {
    pub array: *mut *mut EUTRAN_CGI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut EUTRAN_CGI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ECGI_List__bindgen_ty_1"][::std::mem::size_of::<ECGI_List__bindgen_ty_1>() - 24usize];
    ["Alignment of ECGI_List__bindgen_ty_1"]
        [::std::mem::align_of::<ECGI_List__bindgen_ty_1>() - 8usize];
    ["Offset of field: ECGI_List__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ECGI_List__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ECGI_List__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ECGI_List__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ECGI_List__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ECGI_List__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ECGI_List__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ECGI_List__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ECGI_List"][::std::mem::size_of::<ECGI_List>() - 48usize];
    ["Alignment of ECGI_List"][::std::mem::align_of::<ECGI_List>() - 8usize];
    ["Offset of field: ECGI_List::list"][::std::mem::offset_of!(ECGI_List, list) - 0usize];
    ["Offset of field: ECGI_List::_asn_ctx"][::std::mem::offset_of!(ECGI_List, _asn_ctx) - 24usize];
};
pub type ECGI_List_t = ECGI_List;
unsafe extern "C" {
    pub static mut asn_DEF_ECGI_List: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ECGI_List_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ECGI_List_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_ECGI_List_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct CellBasedQMC {
    pub cellIdListforQMC: CellIdListforQMC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of CellBasedQMC"][::std::mem::size_of::<CellBasedQMC>() - 80usize];
    ["Alignment of CellBasedQMC"][::std::mem::align_of::<CellBasedQMC>() - 8usize];
    ["Offset of field: CellBasedQMC::cellIdListforQMC"]
        [::std::mem::offset_of!(CellBasedQMC, cellIdListforQMC) - 0usize];
    ["Offset of field: CellBasedQMC::iE_Extensions"]
        [::std::mem::offset_of!(CellBasedQMC, iE_Extensions) - 48usize];
    ["Offset of field: CellBasedQMC::_asn_ctx"]
        [::std::mem::offset_of!(CellBasedQMC, _asn_ctx) - 56usize];
};
pub type CellBasedQMC_t = CellBasedQMC;
unsafe extern "C" {
    pub static mut asn_DEF_CellBasedQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_CellBasedQMC_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_CellBasedQMC_1: [asn_TYPE_member_t; 2usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PLMNListforQMC {
    pub list: PLMNListforQMC__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PLMNListforQMC__bindgen_ty_1 {
    pub array: *mut *mut PLMNidentity_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLMNidentity_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PLMNListforQMC__bindgen_ty_1"]
        [::std::mem::size_of::<PLMNListforQMC__bindgen_ty_1>() - 24usize];
    ["Alignment of PLMNListforQMC__bindgen_ty_1"]
        [::std::mem::align_of::<PLMNListforQMC__bindgen_ty_1>() - 8usize];
    ["Offset of field: PLMNListforQMC__bindgen_ty_1::array"]
        [::std::mem::offset_of!(PLMNListforQMC__bindgen_ty_1, array) - 0usize];
    ["Offset of field: PLMNListforQMC__bindgen_ty_1::count"]
        [::std::mem::offset_of!(PLMNListforQMC__bindgen_ty_1, count) - 8usize];
    ["Offset of field: PLMNListforQMC__bindgen_ty_1::size"]
        [::std::mem::offset_of!(PLMNListforQMC__bindgen_ty_1, size) - 12usize];
    ["Offset of field: PLMNListforQMC__bindgen_ty_1::free"]
        [::std::mem::offset_of!(PLMNListforQMC__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PLMNListforQMC"][::std::mem::size_of::<PLMNListforQMC>() - 48usize];
    ["Alignment of PLMNListforQMC"][::std::mem::align_of::<PLMNListforQMC>() - 8usize];
    ["Offset of field: PLMNListforQMC::list"]
        [::std::mem::offset_of!(PLMNListforQMC, list) - 0usize];
    ["Offset of field: PLMNListforQMC::_asn_ctx"]
        [::std::mem::offset_of!(PLMNListforQMC, _asn_ctx) - 24usize];
};
pub type PLMNListforQMC_t = PLMNListforQMC;
unsafe extern "C" {
    pub static mut asn_DEF_PLMNListforQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PLMNListforQMC_specs_1: asn_SET_OF_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PLMNListforQMC_1: [asn_TYPE_member_t; 1usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_PLMNListforQMC_constr_1: asn_per_constraints_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct PLMNAreaBasedQMC {
    pub plmnListforQMC: PLMNListforQMC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of PLMNAreaBasedQMC"][::std::mem::size_of::<PLMNAreaBasedQMC>() - 80usize];
    ["Alignment of PLMNAreaBasedQMC"][::std::mem::align_of::<PLMNAreaBasedQMC>() - 8usize];
    ["Offset of field: PLMNAreaBasedQMC::plmnListforQMC"]
        [::std::mem::offset_of!(PLMNAreaBasedQMC, plmnListforQMC) - 0usize];
    ["Offset of field: PLMNAreaBasedQMC::iE_Extensions"]
        [::std::mem::offset_of!(PLMNAreaBasedQMC, iE_Extensions) - 48usize];
    ["Offset of field: PLMNAreaBasedQMC::_asn_ctx"]
        [::std::mem::offset_of!(PLMNAreaBasedQMC, _asn_ctx) - 56usize];
};
pub type PLMNAreaBasedQMC_t = PLMNAreaBasedQMC;
unsafe extern "C" {
    pub static mut asn_DEF_PLMNAreaBasedQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_PLMNAreaBasedQMC_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_PLMNAreaBasedQMC_1: [asn_TYPE_member_t; 2usize];
}
pub const AreaScopeOfQMC_PR_AreaScopeOfQMC_PR_NOTHING: AreaScopeOfQMC_PR = 0;
pub const AreaScopeOfQMC_PR_AreaScopeOfQMC_PR_cellBased: AreaScopeOfQMC_PR = 1;
pub const AreaScopeOfQMC_PR_AreaScopeOfQMC_PR_tABased: AreaScopeOfQMC_PR = 2;
pub const AreaScopeOfQMC_PR_AreaScopeOfQMC_PR_tAIBased: AreaScopeOfQMC_PR = 3;
pub const AreaScopeOfQMC_PR_AreaScopeOfQMC_PR_pLMNAreaBased: AreaScopeOfQMC_PR = 4;
pub type AreaScopeOfQMC_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct AreaScopeOfQMC {
    pub present: AreaScopeOfQMC_PR,
    pub choice: AreaScopeOfQMC_AreaScopeOfQMC_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union AreaScopeOfQMC_AreaScopeOfQMC_u {
    pub cellBased: CellBasedQMC_t,
    pub tABased: TABasedQMC_t,
    pub tAIBased: TAIBasedQMC_t,
    pub pLMNAreaBased: PLMNAreaBasedQMC_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AreaScopeOfQMC_AreaScopeOfQMC_u"]
        [::std::mem::size_of::<AreaScopeOfQMC_AreaScopeOfQMC_u>() - 80usize];
    ["Alignment of AreaScopeOfQMC_AreaScopeOfQMC_u"]
        [::std::mem::align_of::<AreaScopeOfQMC_AreaScopeOfQMC_u>() - 8usize];
    ["Offset of field: AreaScopeOfQMC_AreaScopeOfQMC_u::cellBased"]
        [::std::mem::offset_of!(AreaScopeOfQMC_AreaScopeOfQMC_u, cellBased) - 0usize];
    ["Offset of field: AreaScopeOfQMC_AreaScopeOfQMC_u::tABased"]
        [::std::mem::offset_of!(AreaScopeOfQMC_AreaScopeOfQMC_u, tABased) - 0usize];
    ["Offset of field: AreaScopeOfQMC_AreaScopeOfQMC_u::tAIBased"]
        [::std::mem::offset_of!(AreaScopeOfQMC_AreaScopeOfQMC_u, tAIBased) - 0usize];
    ["Offset of field: AreaScopeOfQMC_AreaScopeOfQMC_u::pLMNAreaBased"]
        [::std::mem::offset_of!(AreaScopeOfQMC_AreaScopeOfQMC_u, pLMNAreaBased) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of AreaScopeOfQMC"][::std::mem::size_of::<AreaScopeOfQMC>() - 112usize];
    ["Alignment of AreaScopeOfQMC"][::std::mem::align_of::<AreaScopeOfQMC>() - 8usize];
    ["Offset of field: AreaScopeOfQMC::present"]
        [::std::mem::offset_of!(AreaScopeOfQMC, present) - 0usize];
    ["Offset of field: AreaScopeOfQMC::choice"]
        [::std::mem::offset_of!(AreaScopeOfQMC, choice) - 8usize];
    ["Offset of field: AreaScopeOfQMC::_asn_ctx"]
        [::std::mem::offset_of!(AreaScopeOfQMC, _asn_ctx) - 88usize];
};
pub type AreaScopeOfQMC_t = AreaScopeOfQMC;
unsafe extern "C" {
    pub static mut asn_DEF_AreaScopeOfQMC: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_AreaScopeOfQMC_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_AreaScopeOfQMC_1: [asn_TYPE_member_t; 4usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_AreaScopeOfQMC_constr_1: asn_per_constraints_t;
}
pub type TimeSinceSecondaryNodeRelease_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_TimeSinceSecondaryNodeRelease: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TimeSinceSecondaryNodeRelease_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GUMMEIList {
    pub list: GUMMEIList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct GUMMEIList__bindgen_ty_1 {
    pub array: *mut *mut GUMMEI,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut GUMMEI)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GUMMEIList__bindgen_ty_1"]
        [::std::mem::size_of::<GUMMEIList__bindgen_ty_1>() - 24usize];
    ["Alignment of GUMMEIList__bindgen_ty_1"]
        [::std::mem::align_of::<GUMMEIList__bindgen_ty_1>() - 8usize];
    ["Offset of field: GUMMEIList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(GUMMEIList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: GUMMEIList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(GUMMEIList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: GUMMEIList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(GUMMEIList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: GUMMEIList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(GUMMEIList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of GUMMEIList"][::std::mem::size_of::<GUMMEIList>() - 48usize];
    ["Alignment of GUMMEIList"][::std::mem::align_of::<GUMMEIList>() - 8usize];
    ["Offset of field: GUMMEIList::list"][::std::mem::offset_of!(GUMMEIList, list) - 0usize];
    ["Offset of field: GUMMEIList::_asn_ctx"]
        [::std::mem::offset_of!(GUMMEIList, _asn_ctx) - 24usize];
};
pub type GUMMEIList_t = GUMMEIList;
unsafe extern "C" {
    pub static mut asn_DEF_GUMMEIList: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABList {
    pub list: E_RABList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABList__bindgen_ty_1"][::std::mem::size_of::<E_RABList__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABList__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABList__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABList"][::std::mem::size_of::<E_RABList>() - 48usize];
    ["Alignment of E_RABList"][::std::mem::align_of::<E_RABList>() - 8usize];
    ["Offset of field: E_RABList::list"][::std::mem::offset_of!(E_RABList, list) - 0usize];
    ["Offset of field: E_RABList::_asn_ctx"][::std::mem::offset_of!(E_RABList, _asn_ctx) - 24usize];
};
pub type E_RABList_t = E_RABList;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABList: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SourceNgRanNode_ID {
    pub global_RAN_NODE_ID: Global_RAN_NODE_ID_t,
    pub selected_TAI: FiveGSTAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SourceNgRanNode_ID"][::std::mem::size_of::<SourceNgRanNode_ID>() - 360usize];
    ["Alignment of SourceNgRanNode_ID"][::std::mem::align_of::<SourceNgRanNode_ID>() - 8usize];
    ["Offset of field: SourceNgRanNode_ID::global_RAN_NODE_ID"]
        [::std::mem::offset_of!(SourceNgRanNode_ID, global_RAN_NODE_ID) - 0usize];
    ["Offset of field: SourceNgRanNode_ID::selected_TAI"]
        [::std::mem::offset_of!(SourceNgRanNode_ID, selected_TAI) - 216usize];
    ["Offset of field: SourceNgRanNode_ID::iE_Extensions"]
        [::std::mem::offset_of!(SourceNgRanNode_ID, iE_Extensions) - 328usize];
    ["Offset of field: SourceNgRanNode_ID::_asn_ctx"]
        [::std::mem::offset_of!(SourceNgRanNode_ID, _asn_ctx) - 336usize];
};
pub type SourceNgRanNode_ID_t = SourceNgRanNode_ID;
unsafe extern "C" {
    pub static mut asn_DEF_SourceNgRanNode_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SourceNgRanNode_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SourceNgRanNode_ID_1: [asn_TYPE_member_t; 3usize];
}
pub type AdditionalRRMPriorityIndex_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_AdditionalRRMPriorityIndex: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn AdditionalRRMPriorityIndex_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type NASSecurityParameterstoE_UTRAN_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_NASSecurityParameterstoE_UTRAN: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NASSecurityParameterstoE_UTRAN_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDTPLMNList {
    pub list: MDTPLMNList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct MDTPLMNList__bindgen_ty_1 {
    pub array: *mut *mut PLMNidentity_t,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut PLMNidentity_t)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MDTPLMNList__bindgen_ty_1"]
        [::std::mem::size_of::<MDTPLMNList__bindgen_ty_1>() - 24usize];
    ["Alignment of MDTPLMNList__bindgen_ty_1"]
        [::std::mem::align_of::<MDTPLMNList__bindgen_ty_1>() - 8usize];
    ["Offset of field: MDTPLMNList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(MDTPLMNList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: MDTPLMNList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(MDTPLMNList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: MDTPLMNList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(MDTPLMNList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: MDTPLMNList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(MDTPLMNList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MDTPLMNList"][::std::mem::size_of::<MDTPLMNList>() - 48usize];
    ["Alignment of MDTPLMNList"][::std::mem::align_of::<MDTPLMNList>() - 8usize];
    ["Offset of field: MDTPLMNList::list"][::std::mem::offset_of!(MDTPLMNList, list) - 0usize];
    ["Offset of field: MDTPLMNList::_asn_ctx"]
        [::std::mem::offset_of!(MDTPLMNList, _asn_ctx) - 24usize];
};
pub type MDTPLMNList_t = MDTPLMNList;
unsafe extern "C" {
    pub static mut asn_DEF_MDTPLMNList: asn_TYPE_descriptor_t;
}
pub const MMERelaySupportIndicator_MMERelaySupportIndicator_true: MMERelaySupportIndicator = 0;
pub type MMERelaySupportIndicator = ::std::os::raw::c_uint;
pub use self::MMERelaySupportIndicator as e_MMERelaySupportIndicator;
pub type MMERelaySupportIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_MMERelaySupportIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn MMERelaySupportIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const PrivacyIndicator_PrivacyIndicator_immediate_MDT: PrivacyIndicator = 0;
pub const PrivacyIndicator_PrivacyIndicator_logged_MDT: PrivacyIndicator = 1;
pub type PrivacyIndicator = ::std::os::raw::c_uint;
pub use self::PrivacyIndicator as e_PrivacyIndicator;
pub type PrivacyIndicator_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_PrivacyIndicator: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PrivacyIndicator_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PrivacyIndicator_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type OldBSS_ToNewBSS_Information_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_OldBSS_ToNewBSS_Information: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn OldBSS_ToNewBSS_Information_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_emergency: RRC_Establishment_Cause = 0;
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_highPriorityAccess:
    RRC_Establishment_Cause = 1;
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_mt_Access: RRC_Establishment_Cause = 2;
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_mo_Signalling: RRC_Establishment_Cause =
    3;
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_mo_Data: RRC_Establishment_Cause = 4;
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_delay_TolerantAccess:
    RRC_Establishment_Cause = 5;
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_mo_VoiceCall: RRC_Establishment_Cause = 6;
pub const RRC_Establishment_Cause_RRC_Establishment_Cause_mo_ExceptionData:
    RRC_Establishment_Cause = 7;
pub type RRC_Establishment_Cause = ::std::os::raw::c_uint;
pub use self::RRC_Establishment_Cause as e_RRC_Establishment_Cause;
pub type RRC_Establishment_Cause_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_RRC_Establishment_Cause: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RRC_Establishment_Cause_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ManagementBasedMDTAllowed_ManagementBasedMDTAllowed_allowed: ManagementBasedMDTAllowed =
    0;
pub type ManagementBasedMDTAllowed = ::std::os::raw::c_uint;
pub use self::ManagementBasedMDTAllowed as e_ManagementBasedMDTAllowed;
pub type ManagementBasedMDTAllowed_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_ManagementBasedMDTAllowed: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ManagementBasedMDTAllowed_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyItemBearerModRes {
    pub e_RAB_ID: E_RAB_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyItemBearerModRes"]
        [::std::mem::size_of::<E_RABModifyItemBearerModRes>() - 40usize];
    ["Alignment of E_RABModifyItemBearerModRes"]
        [::std::mem::align_of::<E_RABModifyItemBearerModRes>() - 8usize];
    ["Offset of field: E_RABModifyItemBearerModRes::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABModifyItemBearerModRes, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABModifyItemBearerModRes::iE_Extensions"]
        [::std::mem::offset_of!(E_RABModifyItemBearerModRes, iE_Extensions) - 8usize];
    ["Offset of field: E_RABModifyItemBearerModRes::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModifyItemBearerModRes, _asn_ctx) - 16usize];
};
pub type E_RABModifyItemBearerModRes_t = E_RABModifyItemBearerModRes;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModifyItemBearerModRes: asn_TYPE_descriptor_t;
}
pub type Port_Number_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_Port_Number_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_Port_Number: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Port_Number_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Port_Number_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Port_Number_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Port_Number_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Port_Number_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Port_Number_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Port_Number_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Port_Number_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Port_Number_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Port_Number_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Port_Number_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TunnelInformation {
    pub transportLayerAddress: TransportLayerAddress_t,
    pub uDP_Port_Number: *mut Port_Number_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TunnelInformation"][::std::mem::size_of::<TunnelInformation>() - 88usize];
    ["Alignment of TunnelInformation"][::std::mem::align_of::<TunnelInformation>() - 8usize];
    ["Offset of field: TunnelInformation::transportLayerAddress"]
        [::std::mem::offset_of!(TunnelInformation, transportLayerAddress) - 0usize];
    ["Offset of field: TunnelInformation::uDP_Port_Number"]
        [::std::mem::offset_of!(TunnelInformation, uDP_Port_Number) - 48usize];
    ["Offset of field: TunnelInformation::iE_Extensions"]
        [::std::mem::offset_of!(TunnelInformation, iE_Extensions) - 56usize];
    ["Offset of field: TunnelInformation::_asn_ctx"]
        [::std::mem::offset_of!(TunnelInformation, _asn_ctx) - 64usize];
};
pub type TunnelInformation_t = TunnelInformation;
unsafe extern "C" {
    pub static mut asn_DEF_TunnelInformation: asn_TYPE_descriptor_t;
}
pub type Cdma2000OneXRAND_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000OneXRAND: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000OneXRAND_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABFailedToResumeListResumeReq_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABFailedToResumeListResumeReq: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeReq_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const ListeningSubframePattern__pattern_period_ListeningSubframePattern__pattern_period_ms1280 : ListeningSubframePattern__pattern_period = 0 ;
pub const ListeningSubframePattern__pattern_period_ListeningSubframePattern__pattern_period_ms2560 : ListeningSubframePattern__pattern_period = 1 ;
pub const ListeningSubframePattern__pattern_period_ListeningSubframePattern__pattern_period_ms5120 : ListeningSubframePattern__pattern_period = 2 ;
pub const ListeningSubframePattern__pattern_period_ListeningSubframePattern__pattern_period_ms10240 : ListeningSubframePattern__pattern_period = 3 ;
pub type ListeningSubframePattern__pattern_period = ::std::os::raw::c_uint;
pub use self::ListeningSubframePattern__pattern_period as e_ListeningSubframePattern__pattern_period;
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ListeningSubframePattern {
    pub pattern_period: ::std::os::raw::c_long,
    pub pattern_offset: ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ListeningSubframePattern"]
        [::std::mem::size_of::<ListeningSubframePattern>() - 48usize];
    ["Alignment of ListeningSubframePattern"]
        [::std::mem::align_of::<ListeningSubframePattern>() - 8usize];
    ["Offset of field: ListeningSubframePattern::pattern_period"]
        [::std::mem::offset_of!(ListeningSubframePattern, pattern_period) - 0usize];
    ["Offset of field: ListeningSubframePattern::pattern_offset"]
        [::std::mem::offset_of!(ListeningSubframePattern, pattern_offset) - 8usize];
    ["Offset of field: ListeningSubframePattern::iE_Extensions"]
        [::std::mem::offset_of!(ListeningSubframePattern, iE_Extensions) - 16usize];
    ["Offset of field: ListeningSubframePattern::_asn_ctx"]
        [::std::mem::offset_of!(ListeningSubframePattern, _asn_ctx) - 24usize];
};
pub type ListeningSubframePattern_t = ListeningSubframePattern;
unsafe extern "C" {
    pub static mut asn_DEF_ListeningSubframePattern: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_ListeningSubframePattern_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_ListeningSubframePattern_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct RecommendedCellItem {
    pub eUTRAN_CGI: EUTRAN_CGI_t,
    pub timeStayedInCell: *mut ::std::os::raw::c_long,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedCellItem"][::std::mem::size_of::<RecommendedCellItem>() - 160usize];
    ["Alignment of RecommendedCellItem"][::std::mem::align_of::<RecommendedCellItem>() - 8usize];
    ["Offset of field: RecommendedCellItem::eUTRAN_CGI"]
        [::std::mem::offset_of!(RecommendedCellItem, eUTRAN_CGI) - 0usize];
    ["Offset of field: RecommendedCellItem::timeStayedInCell"]
        [::std::mem::offset_of!(RecommendedCellItem, timeStayedInCell) - 120usize];
    ["Offset of field: RecommendedCellItem::iE_Extensions"]
        [::std::mem::offset_of!(RecommendedCellItem, iE_Extensions) - 128usize];
    ["Offset of field: RecommendedCellItem::_asn_ctx"]
        [::std::mem::offset_of!(RecommendedCellItem, _asn_ctx) - 136usize];
};
pub type RecommendedCellItem_t = RecommendedCellItem;
unsafe extern "C" {
    pub static mut asn_DEF_RecommendedCellItem: asn_TYPE_descriptor_t;
}
pub type SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_SourceNgRanNode_ToTargetNgRanNode_TransparentContainer:
        asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNgRanNode_ToTargetNgRanNode_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const DLNASPDUDeliveryAckRequest_DLNASPDUDeliveryAckRequest_requested:
    DLNASPDUDeliveryAckRequest = 0;
pub type DLNASPDUDeliveryAckRequest = ::std::os::raw::c_uint;
pub use self::DLNASPDUDeliveryAckRequest as e_DLNASPDUDeliveryAckRequest;
pub type DLNASPDUDeliveryAckRequest_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_DLNASPDUDeliveryAckRequest: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn DLNASPDUDeliveryAckRequest_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TargeteNB_ID {
    pub global_ENB_ID: Global_ENB_ID_t,
    pub selected_TAI: TAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TargeteNB_ID"][::std::mem::size_of::<TargeteNB_ID>() - 296usize];
    ["Alignment of TargeteNB_ID"][::std::mem::align_of::<TargeteNB_ID>() - 8usize];
    ["Offset of field: TargeteNB_ID::global_ENB_ID"]
        [::std::mem::offset_of!(TargeteNB_ID, global_ENB_ID) - 0usize];
    ["Offset of field: TargeteNB_ID::selected_TAI"]
        [::std::mem::offset_of!(TargeteNB_ID, selected_TAI) - 152usize];
    ["Offset of field: TargeteNB_ID::iE_Extensions"]
        [::std::mem::offset_of!(TargeteNB_ID, iE_Extensions) - 264usize];
    ["Offset of field: TargeteNB_ID::_asn_ctx"]
        [::std::mem::offset_of!(TargeteNB_ID, _asn_ctx) - 272usize];
};
pub type TargeteNB_ID_t = TargeteNB_ID;
unsafe extern "C" {
    pub static mut asn_DEF_TargeteNB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_TargeteNB_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_TargeteNB_ID_1: [asn_TYPE_member_t; 3usize];
}
pub const EndIndication_EndIndication_no_further_data: EndIndication = 0;
pub const EndIndication_EndIndication_further_data_exists: EndIndication = 1;
pub type EndIndication = ::std::os::raw::c_uint;
pub use self::EndIndication as e_EndIndication;
pub type EndIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_EndIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn EndIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn EndIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EndIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn EndIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EndIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EndIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EndIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EndIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EndIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn EndIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn EndIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type E_RABFailedToResumeListResumeRes_t = E_RAB_IE_ContainerList_1280P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABFailedToResumeListResumeRes: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn E_RABFailedToResumeListResumeRes_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const IAB_Node_Indication_IAB_Node_Indication_true: IAB_Node_Indication = 0;
pub type IAB_Node_Indication = ::std::os::raw::c_uint;
pub use self::IAB_Node_Indication as e_IAB_Node_Indication;
pub type IAB_Node_Indication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_IAB_Node_Indication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IAB_Node_Indication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct UEAppLayerMeasConfig {
    pub containerForAppLayerMeasConfig: OCTET_STRING_t,
    pub areaScopeOfQMC: AreaScopeOfQMC_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UEAppLayerMeasConfig"][::std::mem::size_of::<UEAppLayerMeasConfig>() - 184usize];
    ["Alignment of UEAppLayerMeasConfig"][::std::mem::align_of::<UEAppLayerMeasConfig>() - 8usize];
    ["Offset of field: UEAppLayerMeasConfig::containerForAppLayerMeasConfig"]
        [::std::mem::offset_of!(UEAppLayerMeasConfig, containerForAppLayerMeasConfig) - 0usize];
    ["Offset of field: UEAppLayerMeasConfig::areaScopeOfQMC"]
        [::std::mem::offset_of!(UEAppLayerMeasConfig, areaScopeOfQMC) - 40usize];
    ["Offset of field: UEAppLayerMeasConfig::iE_Extensions"]
        [::std::mem::offset_of!(UEAppLayerMeasConfig, iE_Extensions) - 152usize];
    ["Offset of field: UEAppLayerMeasConfig::_asn_ctx"]
        [::std::mem::offset_of!(UEAppLayerMeasConfig, _asn_ctx) - 160usize];
};
pub type UEAppLayerMeasConfig_t = UEAppLayerMeasConfig;
unsafe extern "C" {
    pub static mut asn_DEF_UEAppLayerMeasConfig: asn_TYPE_descriptor_t;
}
pub type SourceNodeID_Extension_t = ProtocolIE_SingleContainer_8146P0_t;
unsafe extern "C" {
    pub static mut asn_DEF_SourceNodeID_Extension: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SourceNodeID_Extension_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct SynchronisationInformation {
    pub sourceStratumLevel: *mut StratumLevel_t,
    pub listeningSubframePattern: *mut ListeningSubframePattern,
    pub aggressoreCGI_List: *mut ECGI_List,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SynchronisationInformation"]
        [::std::mem::size_of::<SynchronisationInformation>() - 56usize];
    ["Alignment of SynchronisationInformation"]
        [::std::mem::align_of::<SynchronisationInformation>() - 8usize];
    ["Offset of field: SynchronisationInformation::sourceStratumLevel"]
        [::std::mem::offset_of!(SynchronisationInformation, sourceStratumLevel) - 0usize];
    ["Offset of field: SynchronisationInformation::listeningSubframePattern"]
        [::std::mem::offset_of!(SynchronisationInformation, listeningSubframePattern) - 8usize];
    ["Offset of field: SynchronisationInformation::aggressoreCGI_List"]
        [::std::mem::offset_of!(SynchronisationInformation, aggressoreCGI_List) - 16usize];
    ["Offset of field: SynchronisationInformation::iE_Extensions"]
        [::std::mem::offset_of!(SynchronisationInformation, iE_Extensions) - 24usize];
    ["Offset of field: SynchronisationInformation::_asn_ctx"]
        [::std::mem::offset_of!(SynchronisationInformation, _asn_ctx) - 32usize];
};
pub type SynchronisationInformation_t = SynchronisationInformation;
unsafe extern "C" {
    pub static mut asn_DEF_SynchronisationInformation: asn_TYPE_descriptor_t;
}
pub const PagingCause_PagingCause_voice: PagingCause = 0;
pub type PagingCause = ::std::os::raw::c_uint;
pub use self::PagingCause as e_PagingCause;
pub type PagingCause_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_PagingCause: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn PagingCause_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn PagingCause_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingCause_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn PagingCause_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingCause_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingCause_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingCause_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingCause_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingCause_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn PagingCause_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn PagingCause_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const MMEPagingTarget_PR_MMEPagingTarget_PR_NOTHING: MMEPagingTarget_PR = 0;
pub const MMEPagingTarget_PR_MMEPagingTarget_PR_global_ENB_ID: MMEPagingTarget_PR = 1;
pub const MMEPagingTarget_PR_MMEPagingTarget_PR_tAI: MMEPagingTarget_PR = 2;
pub type MMEPagingTarget_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct MMEPagingTarget {
    pub present: MMEPagingTarget_PR,
    pub choice: MMEPagingTarget_MMEPagingTarget_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union MMEPagingTarget_MMEPagingTarget_u {
    pub global_ENB_ID: Global_ENB_ID_t,
    pub tAI: TAI_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEPagingTarget_MMEPagingTarget_u"]
        [::std::mem::size_of::<MMEPagingTarget_MMEPagingTarget_u>() - 152usize];
    ["Alignment of MMEPagingTarget_MMEPagingTarget_u"]
        [::std::mem::align_of::<MMEPagingTarget_MMEPagingTarget_u>() - 8usize];
    ["Offset of field: MMEPagingTarget_MMEPagingTarget_u::global_ENB_ID"]
        [::std::mem::offset_of!(MMEPagingTarget_MMEPagingTarget_u, global_ENB_ID) - 0usize];
    ["Offset of field: MMEPagingTarget_MMEPagingTarget_u::tAI"]
        [::std::mem::offset_of!(MMEPagingTarget_MMEPagingTarget_u, tAI) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of MMEPagingTarget"][::std::mem::size_of::<MMEPagingTarget>() - 184usize];
    ["Alignment of MMEPagingTarget"][::std::mem::align_of::<MMEPagingTarget>() - 8usize];
    ["Offset of field: MMEPagingTarget::present"]
        [::std::mem::offset_of!(MMEPagingTarget, present) - 0usize];
    ["Offset of field: MMEPagingTarget::choice"]
        [::std::mem::offset_of!(MMEPagingTarget, choice) - 8usize];
    ["Offset of field: MMEPagingTarget::_asn_ctx"]
        [::std::mem::offset_of!(MMEPagingTarget, _asn_ctx) - 160usize];
};
pub type MMEPagingTarget_t = MMEPagingTarget;
unsafe extern "C" {
    pub static mut asn_DEF_MMEPagingTarget: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_MMEPagingTarget_specs_1: asn_CHOICE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_MMEPagingTarget_1: [asn_TYPE_member_t; 2usize];
}
unsafe extern "C" {
    pub static mut asn_PER_type_MMEPagingTarget_constr_1: asn_per_constraints_t;
}
pub type IntersystemSONConfigurationTransfer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_IntersystemSONConfigurationTransfer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn IntersystemSONConfigurationTransfer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type Target_ToSource_TransparentContainer_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Target_ToSource_TransparentContainer: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Target_ToSource_TransparentContainer_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const TargetID_PR_TargetID_PR_NOTHING: TargetID_PR = 0;
pub const TargetID_PR_TargetID_PR_targeteNB_ID: TargetID_PR = 1;
pub const TargetID_PR_TargetID_PR_targetRNC_ID: TargetID_PR = 2;
pub const TargetID_PR_TargetID_PR_cGI: TargetID_PR = 3;
pub const TargetID_PR_TargetID_PR_targetgNgRanNode_ID: TargetID_PR = 4;
pub type TargetID_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct TargetID {
    pub present: TargetID_PR,
    pub choice: TargetID_TargetID_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union TargetID_TargetID_u {
    pub targeteNB_ID: TargeteNB_ID_t,
    pub targetRNC_ID: TargetRNC_ID_t,
    pub cGI: CGI_t,
    pub targetgNgRanNode_ID: TargetNgRanNode_ID_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TargetID_TargetID_u"][::std::mem::size_of::<TargetID_TargetID_u>() - 360usize];
    ["Alignment of TargetID_TargetID_u"][::std::mem::align_of::<TargetID_TargetID_u>() - 8usize];
    ["Offset of field: TargetID_TargetID_u::targeteNB_ID"]
        [::std::mem::offset_of!(TargetID_TargetID_u, targeteNB_ID) - 0usize];
    ["Offset of field: TargetID_TargetID_u::targetRNC_ID"]
        [::std::mem::offset_of!(TargetID_TargetID_u, targetRNC_ID) - 0usize];
    ["Offset of field: TargetID_TargetID_u::cGI"]
        [::std::mem::offset_of!(TargetID_TargetID_u, cGI) - 0usize];
    ["Offset of field: TargetID_TargetID_u::targetgNgRanNode_ID"]
        [::std::mem::offset_of!(TargetID_TargetID_u, targetgNgRanNode_ID) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TargetID"][::std::mem::size_of::<TargetID>() - 392usize];
    ["Alignment of TargetID"][::std::mem::align_of::<TargetID>() - 8usize];
    ["Offset of field: TargetID::present"][::std::mem::offset_of!(TargetID, present) - 0usize];
    ["Offset of field: TargetID::choice"][::std::mem::offset_of!(TargetID, choice) - 8usize];
    ["Offset of field: TargetID::_asn_ctx"][::std::mem::offset_of!(TargetID, _asn_ctx) - 368usize];
};
pub type TargetID_t = TargetID;
unsafe extern "C" {
    pub static mut asn_DEF_TargetID: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct RecommendedENBItem {
    pub mMEPagingTarget: MMEPagingTarget_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of RecommendedENBItem"][::std::mem::size_of::<RecommendedENBItem>() - 216usize];
    ["Alignment of RecommendedENBItem"][::std::mem::align_of::<RecommendedENBItem>() - 8usize];
    ["Offset of field: RecommendedENBItem::mMEPagingTarget"]
        [::std::mem::offset_of!(RecommendedENBItem, mMEPagingTarget) - 0usize];
    ["Offset of field: RecommendedENBItem::iE_Extensions"]
        [::std::mem::offset_of!(RecommendedENBItem, iE_Extensions) - 184usize];
    ["Offset of field: RecommendedENBItem::_asn_ctx"]
        [::std::mem::offset_of!(RecommendedENBItem, _asn_ctx) - 192usize];
};
pub type RecommendedENBItem_t = RecommendedENBItem;
unsafe extern "C" {
    pub static mut asn_DEF_RecommendedENBItem: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyListBearerModRes {
    pub list: E_RABModifyListBearerModRes__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABModifyListBearerModRes__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyListBearerModRes__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABModifyListBearerModRes__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABModifyListBearerModRes__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABModifyListBearerModRes__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABModifyListBearerModRes__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABModifyListBearerModRes__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABModifyListBearerModRes__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABModifyListBearerModRes__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABModifyListBearerModRes__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABModifyListBearerModRes__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABModifyListBearerModRes__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABModifyListBearerModRes__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABModifyListBearerModRes"]
        [::std::mem::size_of::<E_RABModifyListBearerModRes>() - 48usize];
    ["Alignment of E_RABModifyListBearerModRes"]
        [::std::mem::align_of::<E_RABModifyListBearerModRes>() - 8usize];
    ["Offset of field: E_RABModifyListBearerModRes::list"]
        [::std::mem::offset_of!(E_RABModifyListBearerModRes, list) - 0usize];
    ["Offset of field: E_RABModifyListBearerModRes::_asn_ctx"]
        [::std::mem::offset_of!(E_RABModifyListBearerModRes, _asn_ctx) - 24usize];
};
pub type E_RABModifyListBearerModRes_t = E_RABModifyListBearerModRes;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABModifyListBearerModRes: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct M7Configuration {
    pub m7period: M7period_t,
    pub m7_links_to_log: Links_to_log_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of M7Configuration"][::std::mem::size_of::<M7Configuration>() - 48usize];
    ["Alignment of M7Configuration"][::std::mem::align_of::<M7Configuration>() - 8usize];
    ["Offset of field: M7Configuration::m7period"]
        [::std::mem::offset_of!(M7Configuration, m7period) - 0usize];
    ["Offset of field: M7Configuration::m7_links_to_log"]
        [::std::mem::offset_of!(M7Configuration, m7_links_to_log) - 8usize];
    ["Offset of field: M7Configuration::iE_Extensions"]
        [::std::mem::offset_of!(M7Configuration, iE_Extensions) - 16usize];
    ["Offset of field: M7Configuration::_asn_ctx"]
        [::std::mem::offset_of!(M7Configuration, _asn_ctx) - 24usize];
};
pub type M7Configuration_t = M7Configuration;
unsafe extern "C" {
    pub static mut asn_DEF_M7Configuration: asn_TYPE_descriptor_t;
}
pub type ReceiveStatusOfULPDCPSDUsExtended_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_ReceiveStatusOfULPDCPSDUsExtended: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn ReceiveStatusOfULPDCPSDUsExtended_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const RequestTypeAdditionalInfo_RequestTypeAdditionalInfo_includePSCell:
    RequestTypeAdditionalInfo = 0;
pub type RequestTypeAdditionalInfo = ::std::os::raw::c_uint;
pub use self::RequestTypeAdditionalInfo as e_RequestTypeAdditionalInfo;
pub type RequestTypeAdditionalInfo_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_RequestTypeAdditionalInfo: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn RequestTypeAdditionalInfo_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type NRintegrityProtectionAlgorithms_t = BIT_STRING_t;
unsafe extern "C" {
    pub static mut asn_PER_type_NRintegrityProtectionAlgorithms_constr_1: asn_per_constraints_t;
}
unsafe extern "C" {
    pub static mut asn_DEF_NRintegrityProtectionAlgorithms: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn NRintegrityProtectionAlgorithms_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub type Cdma2000PDU_t = OCTET_STRING_t;
unsafe extern "C" {
    pub static mut asn_DEF_Cdma2000PDU: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Cdma2000PDU_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Cdma2000PDU_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const SRVCCOperationNotPossible_SRVCCOperationNotPossible_notPossible:
    SRVCCOperationNotPossible = 0;
pub type SRVCCOperationNotPossible = ::std::os::raw::c_uint;
pub use self::SRVCCOperationNotPossible as e_SRVCCOperationNotPossible;
pub type SRVCCOperationNotPossible_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_SRVCCOperationNotPossible: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn SRVCCOperationNotPossible_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct DAPSResponseInfoItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub dAPSResponseInfo: DAPSResponseInfo_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of DAPSResponseInfoItem"][::std::mem::size_of::<DAPSResponseInfoItem>() - 80usize];
    ["Alignment of DAPSResponseInfoItem"][::std::mem::align_of::<DAPSResponseInfoItem>() - 8usize];
    ["Offset of field: DAPSResponseInfoItem::e_RAB_ID"]
        [::std::mem::offset_of!(DAPSResponseInfoItem, e_RAB_ID) - 0usize];
    ["Offset of field: DAPSResponseInfoItem::dAPSResponseInfo"]
        [::std::mem::offset_of!(DAPSResponseInfoItem, dAPSResponseInfo) - 8usize];
    ["Offset of field: DAPSResponseInfoItem::iE_Extensions"]
        [::std::mem::offset_of!(DAPSResponseInfoItem, iE_Extensions) - 48usize];
    ["Offset of field: DAPSResponseInfoItem::_asn_ctx"]
        [::std::mem::offset_of!(DAPSResponseInfoItem, _asn_ctx) - 56usize];
};
pub type DAPSResponseInfoItem_t = DAPSResponseInfoItem;
unsafe extern "C" {
    pub static mut asn_DEF_DAPSResponseInfoItem: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSecurityResultList {
    pub list: E_RABSecurityResultList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSecurityResultList__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSecurityResultList__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABSecurityResultList__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABSecurityResultList__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABSecurityResultList__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABSecurityResultList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABSecurityResultList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABSecurityResultList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABSecurityResultList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABSecurityResultList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABSecurityResultList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABSecurityResultList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABSecurityResultList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSecurityResultList"][::std::mem::size_of::<E_RABSecurityResultList>() - 48usize];
    ["Alignment of E_RABSecurityResultList"]
        [::std::mem::align_of::<E_RABSecurityResultList>() - 8usize];
    ["Offset of field: E_RABSecurityResultList::list"]
        [::std::mem::offset_of!(E_RABSecurityResultList, list) - 0usize];
    ["Offset of field: E_RABSecurityResultList::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSecurityResultList, _asn_ctx) - 24usize];
};
pub type E_RABSecurityResultList_t = E_RABSecurityResultList;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSecurityResultList: asn_TYPE_descriptor_t;
}
pub type Packet_LossRate_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Packet_LossRate: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Packet_LossRate_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Packet_LossRate_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Packet_LossRate_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Packet_LossRate_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABToBeSwitchedDLItem {
    pub e_RAB_ID: E_RAB_ID_t,
    pub transportLayerAddress: TransportLayerAddress_t,
    pub gTP_TEID: GTP_TEID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABToBeSwitchedDLItem"]
        [::std::mem::size_of::<E_RABToBeSwitchedDLItem>() - 128usize];
    ["Alignment of E_RABToBeSwitchedDLItem"]
        [::std::mem::align_of::<E_RABToBeSwitchedDLItem>() - 8usize];
    ["Offset of field: E_RABToBeSwitchedDLItem::e_RAB_ID"]
        [::std::mem::offset_of!(E_RABToBeSwitchedDLItem, e_RAB_ID) - 0usize];
    ["Offset of field: E_RABToBeSwitchedDLItem::transportLayerAddress"]
        [::std::mem::offset_of!(E_RABToBeSwitchedDLItem, transportLayerAddress) - 8usize];
    ["Offset of field: E_RABToBeSwitchedDLItem::gTP_TEID"]
        [::std::mem::offset_of!(E_RABToBeSwitchedDLItem, gTP_TEID) - 56usize];
    ["Offset of field: E_RABToBeSwitchedDLItem::iE_Extensions"]
        [::std::mem::offset_of!(E_RABToBeSwitchedDLItem, iE_Extensions) - 96usize];
    ["Offset of field: E_RABToBeSwitchedDLItem::_asn_ctx"]
        [::std::mem::offset_of!(E_RABToBeSwitchedDLItem, _asn_ctx) - 104usize];
};
pub type E_RABToBeSwitchedDLItem_t = E_RABToBeSwitchedDLItem;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABToBeSwitchedDLItem: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConnectedengNBList {
    pub list: ConnectedengNBList__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct ConnectedengNBList__bindgen_ty_1 {
    pub array: *mut *mut ConnectedengNBItem,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ConnectedengNBItem)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ConnectedengNBList__bindgen_ty_1"]
        [::std::mem::size_of::<ConnectedengNBList__bindgen_ty_1>() - 24usize];
    ["Alignment of ConnectedengNBList__bindgen_ty_1"]
        [::std::mem::align_of::<ConnectedengNBList__bindgen_ty_1>() - 8usize];
    ["Offset of field: ConnectedengNBList__bindgen_ty_1::array"]
        [::std::mem::offset_of!(ConnectedengNBList__bindgen_ty_1, array) - 0usize];
    ["Offset of field: ConnectedengNBList__bindgen_ty_1::count"]
        [::std::mem::offset_of!(ConnectedengNBList__bindgen_ty_1, count) - 8usize];
    ["Offset of field: ConnectedengNBList__bindgen_ty_1::size"]
        [::std::mem::offset_of!(ConnectedengNBList__bindgen_ty_1, size) - 12usize];
    ["Offset of field: ConnectedengNBList__bindgen_ty_1::free"]
        [::std::mem::offset_of!(ConnectedengNBList__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of ConnectedengNBList"][::std::mem::size_of::<ConnectedengNBList>() - 48usize];
    ["Alignment of ConnectedengNBList"][::std::mem::align_of::<ConnectedengNBList>() - 8usize];
    ["Offset of field: ConnectedengNBList::list"]
        [::std::mem::offset_of!(ConnectedengNBList, list) - 0usize];
    ["Offset of field: ConnectedengNBList::_asn_ctx"]
        [::std::mem::offset_of!(ConnectedengNBList, _asn_ctx) - 24usize];
};
pub type ConnectedengNBList_t = ConnectedengNBList;
unsafe extern "C" {
    pub static mut asn_DEF_ConnectedengNBList: asn_TYPE_descriptor_t;
}
pub const LoggedMDTTrigger_PR_LoggedMDTTrigger_PR_NOTHING: LoggedMDTTrigger_PR = 0;
pub const LoggedMDTTrigger_PR_LoggedMDTTrigger_PR_periodical: LoggedMDTTrigger_PR = 1;
pub const LoggedMDTTrigger_PR_LoggedMDTTrigger_PR_eventTrigger: LoggedMDTTrigger_PR = 2;
pub type LoggedMDTTrigger_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct LoggedMDTTrigger {
    pub present: LoggedMDTTrigger_PR,
    pub choice: LoggedMDTTrigger_LoggedMDTTrigger_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union LoggedMDTTrigger_LoggedMDTTrigger_u {
    pub periodical: NULL_t,
    pub eventTrigger: EventTrigger_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LoggedMDTTrigger_LoggedMDTTrigger_u"]
        [::std::mem::size_of::<LoggedMDTTrigger_LoggedMDTTrigger_u>() - 184usize];
    ["Alignment of LoggedMDTTrigger_LoggedMDTTrigger_u"]
        [::std::mem::align_of::<LoggedMDTTrigger_LoggedMDTTrigger_u>() - 8usize];
    ["Offset of field: LoggedMDTTrigger_LoggedMDTTrigger_u::periodical"]
        [::std::mem::offset_of!(LoggedMDTTrigger_LoggedMDTTrigger_u, periodical) - 0usize];
    ["Offset of field: LoggedMDTTrigger_LoggedMDTTrigger_u::eventTrigger"]
        [::std::mem::offset_of!(LoggedMDTTrigger_LoggedMDTTrigger_u, eventTrigger) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of LoggedMDTTrigger"][::std::mem::size_of::<LoggedMDTTrigger>() - 216usize];
    ["Alignment of LoggedMDTTrigger"][::std::mem::align_of::<LoggedMDTTrigger>() - 8usize];
    ["Offset of field: LoggedMDTTrigger::present"]
        [::std::mem::offset_of!(LoggedMDTTrigger, present) - 0usize];
    ["Offset of field: LoggedMDTTrigger::choice"]
        [::std::mem::offset_of!(LoggedMDTTrigger, choice) - 8usize];
    ["Offset of field: LoggedMDTTrigger::_asn_ctx"]
        [::std::mem::offset_of!(LoggedMDTTrigger, _asn_ctx) - 192usize];
};
pub type LoggedMDTTrigger_t = LoggedMDTTrigger;
unsafe extern "C" {
    pub static mut asn_DEF_LoggedMDTTrigger: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TargeteNB_ToSourceeNB_TransparentContainer {
    pub rRC_Container: RRC_Container_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TargeteNB_ToSourceeNB_TransparentContainer"]
        [::std::mem::size_of::<TargeteNB_ToSourceeNB_TransparentContainer>() - 72usize];
    ["Alignment of TargeteNB_ToSourceeNB_TransparentContainer"]
        [::std::mem::align_of::<TargeteNB_ToSourceeNB_TransparentContainer>() - 8usize];
    ["Offset of field: TargeteNB_ToSourceeNB_TransparentContainer::rRC_Container"][::std::mem::offset_of!(
        TargeteNB_ToSourceeNB_TransparentContainer,
        rRC_Container
    ) - 0usize];
    ["Offset of field: TargeteNB_ToSourceeNB_TransparentContainer::iE_Extensions"][::std::mem::offset_of!(
        TargeteNB_ToSourceeNB_TransparentContainer,
        iE_Extensions
    ) - 40usize];
    ["Offset of field: TargeteNB_ToSourceeNB_TransparentContainer::_asn_ctx"]
        [::std::mem::offset_of!(TargeteNB_ToSourceeNB_TransparentContainer, _asn_ctx) - 48usize];
};
pub type TargeteNB_ToSourceeNB_TransparentContainer_t = TargeteNB_ToSourceeNB_TransparentContainer;
unsafe extern "C" {
    pub static mut asn_DEF_TargeteNB_ToSourceeNB_TransparentContainer: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SourceeNB_ID {
    pub global_ENB_ID: Global_ENB_ID_t,
    pub selected_TAI: TAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SourceeNB_ID"][::std::mem::size_of::<SourceeNB_ID>() - 296usize];
    ["Alignment of SourceeNB_ID"][::std::mem::align_of::<SourceeNB_ID>() - 8usize];
    ["Offset of field: SourceeNB_ID::global_ENB_ID"]
        [::std::mem::offset_of!(SourceeNB_ID, global_ENB_ID) - 0usize];
    ["Offset of field: SourceeNB_ID::selected_TAI"]
        [::std::mem::offset_of!(SourceeNB_ID, selected_TAI) - 152usize];
    ["Offset of field: SourceeNB_ID::iE_Extensions"]
        [::std::mem::offset_of!(SourceeNB_ID, iE_Extensions) - 264usize];
    ["Offset of field: SourceeNB_ID::_asn_ctx"]
        [::std::mem::offset_of!(SourceeNB_ID, _asn_ctx) - 272usize];
};
pub type SourceeNB_ID_t = SourceeNB_ID;
unsafe extern "C" {
    pub static mut asn_DEF_SourceeNB_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub static mut asn_SPC_SourceeNB_ID_specs_1: asn_SEQUENCE_specifics_t;
}
unsafe extern "C" {
    pub static mut asn_MBR_SourceeNB_ID_1: [asn_TYPE_member_t; 3usize];
}
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SONConfigurationTransfer {
    pub targeteNB_ID: TargeteNB_ID_t,
    pub sourceeNB_ID: SourceeNB_ID_t,
    pub sONInformation: SONInformation_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SONConfigurationTransfer"]
        [::std::mem::size_of::<SONConfigurationTransfer>() - 728usize];
    ["Alignment of SONConfigurationTransfer"]
        [::std::mem::align_of::<SONConfigurationTransfer>() - 8usize];
    ["Offset of field: SONConfigurationTransfer::targeteNB_ID"]
        [::std::mem::offset_of!(SONConfigurationTransfer, targeteNB_ID) - 0usize];
    ["Offset of field: SONConfigurationTransfer::sourceeNB_ID"]
        [::std::mem::offset_of!(SONConfigurationTransfer, sourceeNB_ID) - 296usize];
    ["Offset of field: SONConfigurationTransfer::sONInformation"]
        [::std::mem::offset_of!(SONConfigurationTransfer, sONInformation) - 592usize];
    ["Offset of field: SONConfigurationTransfer::iE_Extensions"]
        [::std::mem::offset_of!(SONConfigurationTransfer, iE_Extensions) - 696usize];
    ["Offset of field: SONConfigurationTransfer::_asn_ctx"]
        [::std::mem::offset_of!(SONConfigurationTransfer, _asn_ctx) - 704usize];
};
pub type SONConfigurationTransfer_t = SONConfigurationTransfer;
unsafe extern "C" {
    pub static mut asn_DEF_SONConfigurationTransfer: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TraceActivation {
    pub e_UTRAN_Trace_ID: E_UTRAN_Trace_ID_t,
    pub interfacesToTrace: InterfacesToTrace_t,
    pub traceDepth: TraceDepth_t,
    pub traceCollectionEntityIPAddress: TransportLayerAddress_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TraceActivation"][::std::mem::size_of::<TraceActivation>() - 176usize];
    ["Alignment of TraceActivation"][::std::mem::align_of::<TraceActivation>() - 8usize];
    ["Offset of field: TraceActivation::e_UTRAN_Trace_ID"]
        [::std::mem::offset_of!(TraceActivation, e_UTRAN_Trace_ID) - 0usize];
    ["Offset of field: TraceActivation::interfacesToTrace"]
        [::std::mem::offset_of!(TraceActivation, interfacesToTrace) - 40usize];
    ["Offset of field: TraceActivation::traceDepth"]
        [::std::mem::offset_of!(TraceActivation, traceDepth) - 88usize];
    ["Offset of field: TraceActivation::traceCollectionEntityIPAddress"]
        [::std::mem::offset_of!(TraceActivation, traceCollectionEntityIPAddress) - 96usize];
    ["Offset of field: TraceActivation::iE_Extensions"]
        [::std::mem::offset_of!(TraceActivation, iE_Extensions) - 144usize];
    ["Offset of field: TraceActivation::_asn_ctx"]
        [::std::mem::offset_of!(TraceActivation, _asn_ctx) - 152usize];
};
pub type TraceActivation_t = TraceActivation;
unsafe extern "C" {
    pub static mut asn_DEF_TraceActivation: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct TAIItem {
    pub tAI: TAI_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of TAIItem"][::std::mem::size_of::<TAIItem>() - 144usize];
    ["Alignment of TAIItem"][::std::mem::align_of::<TAIItem>() - 8usize];
    ["Offset of field: TAIItem::tAI"][::std::mem::offset_of!(TAIItem, tAI) - 0usize];
    ["Offset of field: TAIItem::iE_Extensions"]
        [::std::mem::offset_of!(TAIItem, iE_Extensions) - 112usize];
    ["Offset of field: TAIItem::_asn_ctx"][::std::mem::offset_of!(TAIItem, _asn_ctx) - 120usize];
};
pub type TAIItem_t = TAIItem;
unsafe extern "C" {
    pub static mut asn_DEF_TAIItem: asn_TYPE_descriptor_t;
}
pub const SourceNodeID_PR_SourceNodeID_PR_NOTHING: SourceNodeID_PR = 0;
pub const SourceNodeID_PR_SourceNodeID_PR_sourceNgRanNode_ID: SourceNodeID_PR = 1;
pub const SourceNodeID_PR_SourceNodeID_PR_sourceNodeID_Extension: SourceNodeID_PR = 2;
pub type SourceNodeID_PR = ::std::os::raw::c_uint;
#[repr(C)]
#[derive(Copy, Clone)]
pub struct SourceNodeID {
    pub present: SourceNodeID_PR,
    pub choice: SourceNodeID_SourceNodeID_u,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Copy, Clone)]
pub union SourceNodeID_SourceNodeID_u {
    pub sourceNgRanNode_ID: SourceNgRanNode_ID_t,
    pub sourceNodeID_Extension: SourceNodeID_Extension_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SourceNodeID_SourceNodeID_u"]
        [::std::mem::size_of::<SourceNodeID_SourceNodeID_u>() - 360usize];
    ["Alignment of SourceNodeID_SourceNodeID_u"]
        [::std::mem::align_of::<SourceNodeID_SourceNodeID_u>() - 8usize];
    ["Offset of field: SourceNodeID_SourceNodeID_u::sourceNgRanNode_ID"]
        [::std::mem::offset_of!(SourceNodeID_SourceNodeID_u, sourceNgRanNode_ID) - 0usize];
    ["Offset of field: SourceNodeID_SourceNodeID_u::sourceNodeID_Extension"]
        [::std::mem::offset_of!(SourceNodeID_SourceNodeID_u, sourceNodeID_Extension) - 0usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of SourceNodeID"][::std::mem::size_of::<SourceNodeID>() - 392usize];
    ["Alignment of SourceNodeID"][::std::mem::align_of::<SourceNodeID>() - 8usize];
    ["Offset of field: SourceNodeID::present"]
        [::std::mem::offset_of!(SourceNodeID, present) - 0usize];
    ["Offset of field: SourceNodeID::choice"]
        [::std::mem::offset_of!(SourceNodeID, choice) - 8usize];
    ["Offset of field: SourceNodeID::_asn_ctx"]
        [::std::mem::offset_of!(SourceNodeID, _asn_ctx) - 368usize];
};
pub type SourceNodeID_t = SourceNodeID;
unsafe extern "C" {
    pub static mut asn_DEF_SourceNodeID: asn_TYPE_descriptor_t;
}
pub type TrafficLoadReductionIndication_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_TrafficLoadReductionIndication: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn TrafficLoadReductionIndication_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupListBearerSURes {
    pub list: E_RABSetupListBearerSURes__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct E_RABSetupListBearerSURes__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupListBearerSURes__bindgen_ty_1"]
        [::std::mem::size_of::<E_RABSetupListBearerSURes__bindgen_ty_1>() - 24usize];
    ["Alignment of E_RABSetupListBearerSURes__bindgen_ty_1"]
        [::std::mem::align_of::<E_RABSetupListBearerSURes__bindgen_ty_1>() - 8usize];
    ["Offset of field: E_RABSetupListBearerSURes__bindgen_ty_1::array"]
        [::std::mem::offset_of!(E_RABSetupListBearerSURes__bindgen_ty_1, array) - 0usize];
    ["Offset of field: E_RABSetupListBearerSURes__bindgen_ty_1::count"]
        [::std::mem::offset_of!(E_RABSetupListBearerSURes__bindgen_ty_1, count) - 8usize];
    ["Offset of field: E_RABSetupListBearerSURes__bindgen_ty_1::size"]
        [::std::mem::offset_of!(E_RABSetupListBearerSURes__bindgen_ty_1, size) - 12usize];
    ["Offset of field: E_RABSetupListBearerSURes__bindgen_ty_1::free"]
        [::std::mem::offset_of!(E_RABSetupListBearerSURes__bindgen_ty_1, free) - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of E_RABSetupListBearerSURes"]
        [::std::mem::size_of::<E_RABSetupListBearerSURes>() - 48usize];
    ["Alignment of E_RABSetupListBearerSURes"]
        [::std::mem::align_of::<E_RABSetupListBearerSURes>() - 8usize];
    ["Offset of field: E_RABSetupListBearerSURes::list"]
        [::std::mem::offset_of!(E_RABSetupListBearerSURes, list) - 0usize];
    ["Offset of field: E_RABSetupListBearerSURes::_asn_ctx"]
        [::std::mem::offset_of!(E_RABSetupListBearerSURes, _asn_ctx) - 24usize];
};
pub type E_RABSetupListBearerSURes_t = E_RABSetupListBearerSURes;
unsafe extern "C" {
    pub static mut asn_DEF_E_RABSetupListBearerSURes: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct NRUESecurityCapabilities {
    pub nRencryptionAlgorithms: NRencryptionAlgorithms_t,
    pub nRintegrityProtectionAlgorithms: NRintegrityProtectionAlgorithms_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of NRUESecurityCapabilities"]
        [::std::mem::size_of::<NRUESecurityCapabilities>() - 128usize];
    ["Alignment of NRUESecurityCapabilities"]
        [::std::mem::align_of::<NRUESecurityCapabilities>() - 8usize];
    ["Offset of field: NRUESecurityCapabilities::nRencryptionAlgorithms"]
        [::std::mem::offset_of!(NRUESecurityCapabilities, nRencryptionAlgorithms) - 0usize];
    ["Offset of field: NRUESecurityCapabilities::nRintegrityProtectionAlgorithms"][::std::mem::offset_of!(
        NRUESecurityCapabilities,
        nRintegrityProtectionAlgorithms
    ) - 48usize];
    ["Offset of field: NRUESecurityCapabilities::iE_Extensions"]
        [::std::mem::offset_of!(NRUESecurityCapabilities, iE_Extensions) - 96usize];
    ["Offset of field: NRUESecurityCapabilities::_asn_ctx"]
        [::std::mem::offset_of!(NRUESecurityCapabilities, _asn_ctx) - 104usize];
};
pub type NRUESecurityCapabilities_t = NRUESecurityCapabilities;
unsafe extern "C" {
    pub static mut asn_DEF_NRUESecurityCapabilities: asn_TYPE_descriptor_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_associatedLogicalS1_ConnectionListResAck {
    pub list: UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1 {
    pub array: *mut *mut ProtocolIE_SingleContainer,
    pub count: ::std::os::raw::c_int,
    pub size: ::std::os::raw::c_int,
    pub free: ::std::option::Option<unsafe extern "C" fn(arg1: *mut ProtocolIE_SingleContainer)>,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1"][::std::mem::size_of::<
        UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1,
    >() - 24usize];
    ["Alignment of UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1"][::std::mem::align_of::<
        UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1,
    >() - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1::array"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1,
        array
    )
        - 0usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1::count"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1,
        count
    )
        - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1::size"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1,
        size
    )
        - 12usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1::free"][::std::mem::offset_of!(
        UE_associatedLogicalS1_ConnectionListResAck__bindgen_ty_1,
        free
    )
        - 16usize];
};
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_associatedLogicalS1_ConnectionListResAck"]
        [::std::mem::size_of::<UE_associatedLogicalS1_ConnectionListResAck>() - 48usize];
    ["Alignment of UE_associatedLogicalS1_ConnectionListResAck"]
        [::std::mem::align_of::<UE_associatedLogicalS1_ConnectionListResAck>() - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListResAck::list"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionListResAck, list) - 0usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionListResAck::_asn_ctx"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionListResAck, _asn_ctx) - 24usize];
};
pub type UE_associatedLogicalS1_ConnectionListResAck_t =
    UE_associatedLogicalS1_ConnectionListResAck;
unsafe extern "C" {
    pub static mut asn_DEF_UE_associatedLogicalS1_ConnectionListResAck: asn_TYPE_descriptor_t;
}
pub type Routing_ID_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Routing_ID: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Routing_ID_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Routing_ID_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Routing_ID_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Routing_ID_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Routing_ID_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Routing_ID_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Routing_ID_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Routing_ID_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Routing_ID_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Routing_ID_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Routing_ID_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
pub const Direct_Forwarding_Path_Availability_Direct_Forwarding_Path_Availability_directPathAvailable : Direct_Forwarding_Path_Availability = 0 ;
pub type Direct_Forwarding_Path_Availability = ::std::os::raw::c_uint;
pub use self::Direct_Forwarding_Path_Availability as e_Direct_Forwarding_Path_Availability;
pub type Direct_Forwarding_Path_Availability_t = ::std::os::raw::c_long;
unsafe extern "C" {
    pub static mut asn_DEF_Direct_Forwarding_Path_Availability: asn_TYPE_descriptor_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_free(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut ::std::os::raw::c_void,
        arg1: asn_struct_free_method,
    );
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_print(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        level: ::std::os::raw::c_int,
        callback: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_constraint(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        optional_callback: asn_app_constraint_failed_f,
        optional_app_key: *mut ::std::os::raw::c_void,
    ) -> ::std::os::raw::c_int;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_decode_ber(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
        tag_mode: ::std::os::raw::c_int,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_encode_der(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        tag_mode: ::std::os::raw::c_int,
        tag: ber_tlv_tag_t,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_decode_xer(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        opt_mname: *const ::std::os::raw::c_char,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_encode_xer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        struct_ptr: *const ::std::os::raw::c_void,
        ilevel: ::std::os::raw::c_int,
        xer_flags: xer_encoder_flags_e,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_decode_oer(
        opt_codec_ctx: *const asn_codec_ctx_s,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        buf_ptr: *const ::std::os::raw::c_void,
        size: usize,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_encode_oer(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_oer_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        consume_bytes_cb: asn_app_consume_bytes_f,
        app_key: *mut ::std::os::raw::c_void,
    ) -> asn_enc_rval_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_decode_uper(
        opt_codec_ctx: *const asn_codec_ctx_t,
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *mut *mut ::std::os::raw::c_void,
        per_data: *mut asn_per_data_t,
    ) -> asn_dec_rval_t;
}
unsafe extern "C" {
    pub fn Direct_Forwarding_Path_Availability_encode_uper(
        type_descriptor: *const asn_TYPE_descriptor_s,
        constraints: *const asn_per_constraints_t,
        struct_ptr: *const ::std::os::raw::c_void,
        per_output: *mut asn_per_outp_t,
    ) -> asn_enc_rval_t;
}
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct UE_associatedLogicalS1_ConnectionItem {
    pub mME_UE_S1AP_ID: *mut MME_UE_S1AP_ID_t,
    pub eNB_UE_S1AP_ID: *mut ENB_UE_S1AP_ID_t,
    pub iE_Extensions: *mut ProtocolExtensionContainer,
    pub _asn_ctx: asn_struct_ctx_t,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of UE_associatedLogicalS1_ConnectionItem"]
        [::std::mem::size_of::<UE_associatedLogicalS1_ConnectionItem>() - 48usize];
    ["Alignment of UE_associatedLogicalS1_ConnectionItem"]
        [::std::mem::align_of::<UE_associatedLogicalS1_ConnectionItem>() - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionItem::mME_UE_S1AP_ID"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionItem, mME_UE_S1AP_ID) - 0usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionItem::eNB_UE_S1AP_ID"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionItem, eNB_UE_S1AP_ID) - 8usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionItem::iE_Extensions"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionItem, iE_Extensions) - 16usize];
    ["Offset of field: UE_associatedLogicalS1_ConnectionItem::_asn_ctx"]
        [::std::mem::offset_of!(UE_associatedLogicalS1_ConnectionItem, _asn_ctx) - 24usize];
};
pub type UE_associatedLogicalS1_ConnectionItem_t = UE_associatedLogicalS1_ConnectionItem;
unsafe extern "C" {
    pub static mut asn_DEF_UE_associatedLogicalS1_ConnectionItem: asn_TYPE_descriptor_t;
}
pub type __builtin_va_list = [__va_list_tag; 1usize];
#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __va_list_tag {
    pub gp_offset: ::std::os::raw::c_uint,
    pub fp_offset: ::std::os::raw::c_uint,
    pub overflow_arg_area: *mut ::std::os::raw::c_void,
    pub reg_save_area: *mut ::std::os::raw::c_void,
}
#[allow(clippy::unnecessary_operation, clippy::identity_op)]
const _: () = {
    ["Size of __va_list_tag"][::std::mem::size_of::<__va_list_tag>() - 24usize];
    ["Alignment of __va_list_tag"][::std::mem::align_of::<__va_list_tag>() - 8usize];
    ["Offset of field: __va_list_tag::gp_offset"]
        [::std::mem::offset_of!(__va_list_tag, gp_offset) - 0usize];
    ["Offset of field: __va_list_tag::fp_offset"]
        [::std::mem::offset_of!(__va_list_tag, fp_offset) - 4usize];
    ["Offset of field: __va_list_tag::overflow_arg_area"]
        [::std::mem::offset_of!(__va_list_tag, overflow_arg_area) - 8usize];
    ["Offset of field: __va_list_tag::reg_save_area"]
        [::std::mem::offset_of!(__va_list_tag, reg_save_area) - 16usize];
};




#[repr(C)]
#[derive(Debug, Copy, Clone)]
pub struct __locale_data {
    pub _address: u8,
}

pub trait ASN1GenType {
    unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t;
}

    impl ASN1GenType for ProtocolIE_Container_8143P0{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ProtocolIE_Container_8143P0
        }
    }

    impl ASN1GenType for OCTET_STRING{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_OCTET_STRING
        }
    }

    impl ASN1GenType for ANY{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ANY
        }
    }

    impl ASN1GenType for ProtocolIE_Field_8149P0{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ProtocolIE_Field_8149P0
        }
    }

    impl ASN1GenType for UplinkS1cdma2000tunnelling{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UplinkS1cdma2000tunnelling
        }
    }

    impl ASN1GenType for ErrorIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ErrorIndication
        }
    }

    impl ASN1GenType for ENBConfigurationTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBConfigurationTransfer
        }
    }

    impl ASN1GenType for ENBStatusTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBStatusTransfer
        }
    }

    impl ASN1GenType for HandoverRequestAcknowledge{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverRequestAcknowledge
        }
    }

    impl ASN1GenType for CGI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CGI
        }
    }

    impl ASN1GenType for ProtocolExtensionContainer_8194P0{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ProtocolExtensionContainer_8194P0
        }
    }

    impl ASN1GenType for ProtocolExtensionField_8197P0{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ProtocolExtensionField_8197P0
        }
    }

    impl ASN1GenType for NR_CGI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NR_CGI
        }
    }

    impl ASN1GenType for TACList_In_LTE_NTN{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TACList_In_LTE_NTN
        }
    }

    impl ASN1GenType for SecurityIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SecurityIndication
        }
    }

    impl ASN1GenType for UERadioCapabilityIDMappingRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UERadioCapabilityIDMappingRequest
        }
    }

    impl ASN1GenType for Cause{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Cause
        }
    }

    impl ASN1GenType for E_RABModificationIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModificationIndication
        }
    }

    impl ASN1GenType for ScheduledCommunicationTime{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ScheduledCommunicationTime
        }
    }

    impl ASN1GenType for E_RABSetupItemCtxtSURes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSetupItemCtxtSURes
        }
    }

    impl ASN1GenType for E_RABDataForwardingItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABDataForwardingItem
        }
    }

    impl ASN1GenType for HandoverRequired{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverRequired
        }
    }

    impl ASN1GenType for HandoverCommand{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverCommand
        }
    }

    impl ASN1GenType for HandoverPreparationFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverPreparationFailure
        }
    }

    impl ASN1GenType for HandoverRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverRequest
        }
    }

    impl ASN1GenType for HandoverFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverFailure
        }
    }

    impl ASN1GenType for PathSwitchRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PathSwitchRequest
        }
    }

    impl ASN1GenType for PathSwitchRequestAcknowledge{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PathSwitchRequestAcknowledge
        }
    }

    impl ASN1GenType for PathSwitchRequestFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PathSwitchRequestFailure
        }
    }

    impl ASN1GenType for E_RABSetupRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSetupRequest
        }
    }

    impl ASN1GenType for E_RABSetupResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSetupResponse
        }
    }

    impl ASN1GenType for E_RABModifyRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModifyRequest
        }
    }

    impl ASN1GenType for E_RABModifyResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModifyResponse
        }
    }

    impl ASN1GenType for E_RABReleaseCommand{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABReleaseCommand
        }
    }

    impl ASN1GenType for E_RABReleaseResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABReleaseResponse
        }
    }

    impl ASN1GenType for InitialContextSetupRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InitialContextSetupRequest
        }
    }

    impl ASN1GenType for InitialContextSetupResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InitialContextSetupResponse
        }
    }

    impl ASN1GenType for InitialContextSetupFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InitialContextSetupFailure
        }
    }

    impl ASN1GenType for HandoverCancel{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverCancel
        }
    }

    impl ASN1GenType for HandoverCancelAcknowledge{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverCancelAcknowledge
        }
    }

    impl ASN1GenType for KillRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_KillRequest
        }
    }

    impl ASN1GenType for KillResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_KillResponse
        }
    }

    impl ASN1GenType for Reset{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Reset
        }
    }

    impl ASN1GenType for ResetAcknowledge{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ResetAcknowledge
        }
    }

    impl ASN1GenType for S1SetupRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_S1SetupRequest
        }
    }

    impl ASN1GenType for S1SetupResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_S1SetupResponse
        }
    }

    impl ASN1GenType for S1SetupFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_S1SetupFailure
        }
    }

    impl ASN1GenType for UEContextModificationRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextModificationRequest
        }
    }

    impl ASN1GenType for UEContextModificationResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextModificationResponse
        }
    }

    impl ASN1GenType for UEContextModificationFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextModificationFailure
        }
    }

    impl ASN1GenType for UEContextReleaseCommand{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextReleaseCommand
        }
    }

    impl ASN1GenType for UEContextReleaseComplete{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextReleaseComplete
        }
    }

    impl ASN1GenType for ENBConfigurationUpdate{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBConfigurationUpdate
        }
    }

    impl ASN1GenType for ENBConfigurationUpdateAcknowledge{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBConfigurationUpdateAcknowledge
        }
    }

    impl ASN1GenType for ENBConfigurationUpdateFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBConfigurationUpdateFailure
        }
    }

    impl ASN1GenType for MMEConfigurationUpdate{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEConfigurationUpdate
        }
    }

    impl ASN1GenType for MMEConfigurationUpdateAcknowledge{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEConfigurationUpdateAcknowledge
        }
    }

    impl ASN1GenType for MMEConfigurationUpdateFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEConfigurationUpdateFailure
        }
    }

    impl ASN1GenType for WriteReplaceWarningRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_WriteReplaceWarningRequest
        }
    }

    impl ASN1GenType for WriteReplaceWarningResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_WriteReplaceWarningResponse
        }
    }

    impl ASN1GenType for UERadioCapabilityMatchRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UERadioCapabilityMatchRequest
        }
    }

    impl ASN1GenType for UERadioCapabilityMatchResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UERadioCapabilityMatchResponse
        }
    }

    impl ASN1GenType for E_RABModificationConfirm{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModificationConfirm
        }
    }

    impl ASN1GenType for UEContextModificationIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextModificationIndication
        }
    }

    impl ASN1GenType for UEContextModificationConfirm{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextModificationConfirm
        }
    }

    impl ASN1GenType for UEContextSuspendRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextSuspendRequest
        }
    }

    impl ASN1GenType for UEContextSuspendResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextSuspendResponse
        }
    }

    impl ASN1GenType for UEContextResumeRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextResumeRequest
        }
    }

    impl ASN1GenType for UEContextResumeResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextResumeResponse
        }
    }

    impl ASN1GenType for UEContextResumeFailure{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextResumeFailure
        }
    }

    impl ASN1GenType for UERadioCapabilityIDMappingResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UERadioCapabilityIDMappingResponse
        }
    }

    impl ASN1GenType for HandoverNotify{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverNotify
        }
    }

    impl ASN1GenType for E_RABReleaseIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABReleaseIndication
        }
    }

    impl ASN1GenType for Paging{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Paging
        }
    }

    impl ASN1GenType for DownlinkNASTransport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DownlinkNASTransport
        }
    }

    impl ASN1GenType for InitialUEMessage{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InitialUEMessage
        }
    }

    impl ASN1GenType for UplinkNASTransport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UplinkNASTransport
        }
    }

    impl ASN1GenType for NASNonDeliveryIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NASNonDeliveryIndication
        }
    }

    impl ASN1GenType for UEContextReleaseRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEContextReleaseRequest
        }
    }

    impl ASN1GenType for DownlinkS1cdma2000tunnelling{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DownlinkS1cdma2000tunnelling
        }
    }

    impl ASN1GenType for UECapabilityInfoIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UECapabilityInfoIndication
        }
    }

    impl ASN1GenType for MMEStatusTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEStatusTransfer
        }
    }

    impl ASN1GenType for DeactivateTrace{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DeactivateTrace
        }
    }

    impl ASN1GenType for TraceStart{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TraceStart
        }
    }

    impl ASN1GenType for TraceFailureIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TraceFailureIndication
        }
    }

    impl ASN1GenType for CellTrafficTrace{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellTrafficTrace
        }
    }

    impl ASN1GenType for LocationReportingControl{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LocationReportingControl
        }
    }

    impl ASN1GenType for LocationReportingFailureIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LocationReportingFailureIndication
        }
    }

    impl ASN1GenType for LocationReport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LocationReport
        }
    }

    impl ASN1GenType for OverloadStart{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_OverloadStart
        }
    }

    impl ASN1GenType for OverloadStop{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_OverloadStop
        }
    }

    impl ASN1GenType for ENBDirectInformationTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBDirectInformationTransfer
        }
    }

    impl ASN1GenType for MMEDirectInformationTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEDirectInformationTransfer
        }
    }

    impl ASN1GenType for MMEConfigurationTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEConfigurationTransfer
        }
    }

    impl ASN1GenType for PrivateIE_Container_8210P0{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PrivateIE_Container_8210P0
        }
    }

    impl ASN1GenType for PrivateIE_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PrivateIE_ID
        }
    }

    impl ASN1GenType for PrivateIE_Field_8213P0{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PrivateIE_Field_8213P0
        }
    }

    impl ASN1GenType for PrivateMessage{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PrivateMessage
        }
    }

    impl ASN1GenType for DownlinkUEAssociatedLPPaTransport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DownlinkUEAssociatedLPPaTransport
        }
    }

    impl ASN1GenType for UplinkUEAssociatedLPPaTransport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UplinkUEAssociatedLPPaTransport
        }
    }

    impl ASN1GenType for DownlinkNonUEAssociatedLPPaTransport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DownlinkNonUEAssociatedLPPaTransport
        }
    }

    impl ASN1GenType for UplinkNonUEAssociatedLPPaTransport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UplinkNonUEAssociatedLPPaTransport
        }
    }

    impl ASN1GenType for PWSRestartIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PWSRestartIndication
        }
    }

    impl ASN1GenType for RerouteNASRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RerouteNASRequest
        }
    }

    impl ASN1GenType for PWSFailureIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PWSFailureIndication
        }
    }

    impl ASN1GenType for ConnectionEstablishmentIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ConnectionEstablishmentIndication
        }
    }

    impl ASN1GenType for NASDeliveryIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NASDeliveryIndication
        }
    }

    impl ASN1GenType for RetrieveUEInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RetrieveUEInformation
        }
    }

    impl ASN1GenType for UEInformationTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEInformationTransfer
        }
    }

    impl ASN1GenType for ENBCPRelocationIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBCPRelocationIndication
        }
    }

    impl ASN1GenType for MMECPRelocationIndication{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMECPRelocationIndication
        }
    }

    impl ASN1GenType for SecondaryRATDataUsageReport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SecondaryRATDataUsageReport
        }
    }

    impl ASN1GenType for HandoverSuccess{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverSuccess
        }
    }

    impl ASN1GenType for ENBEarlyStatusTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBEarlyStatusTransfer
        }
    }

    impl ASN1GenType for MMEEarlyStatusTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEEarlyStatusTransfer
        }
    }

    impl ASN1GenType for InitiatingMessage{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InitiatingMessage
        }
    }

    impl ASN1GenType for SuccessfulOutcome{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SuccessfulOutcome
        }
    }

    impl ASN1GenType for UnsuccessfulOutcome{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UnsuccessfulOutcome
        }
    }

    impl ASN1GenType for S1AP_PDU{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_S1AP_PDU
        }
    }

    impl ASN1GenType for E_RABToBeSetupListBearerSUReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeSetupListBearerSUReq
        }
    }

    impl ASN1GenType for S_TMSI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_S_TMSI
        }
    }

    impl ASN1GenType for UEPagingID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEPagingID
        }
    }

    impl ASN1GenType for RecommendedENBList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RecommendedENBList
        }
    }

    impl ASN1GenType for CompletedCellinTAI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CompletedCellinTAI
        }
    }

    impl ASN1GenType for EUTRAN_CGI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EUTRAN_CGI
        }
    }

    impl ASN1GenType for CompletedCellinTAI_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CompletedCellinTAI_Item
        }
    }

    impl ASN1GenType for ProtocolIE_ContainerList_8180P0{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ProtocolIE_ContainerList_8180P0
        }
    }

    impl ASN1GenType for LoggedMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LoggedMDT
        }
    }

    impl ASN1GenType for E_RABUsageReportItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABUsageReportItem
        }
    }

    impl ASN1GenType for E_RABUsageReportList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABUsageReportList
        }
    }

    impl ASN1GenType for SecondaryRATDataUsageReportItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SecondaryRATDataUsageReportItem
        }
    }

    impl ASN1GenType for SensorMeasurementConfiguration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SensorMeasurementConfiguration
        }
    }

    impl ASN1GenType for SensorMeasConfigNameList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SensorMeasConfigNameList
        }
    }

    impl ASN1GenType for SensorNameConfig{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SensorNameConfig
        }
    }

    impl ASN1GenType for SensorMeasConfigNameItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SensorMeasConfigNameItem
        }
    }

    impl ASN1GenType for RecommendedENBsForPaging{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RecommendedENBsForPaging
        }
    }

    impl ASN1GenType for E_RABToBeModifiedListBearerModReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeModifiedListBearerModReq
        }
    }

    impl ASN1GenType for ENB_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENB_ID
        }
    }

    impl ASN1GenType for Global_ENB_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Global_ENB_ID
        }
    }

    impl ASN1GenType for TAI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAI
        }
    }

    impl ASN1GenType for EN_DCSONeNBIdentification{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EN_DCSONeNBIdentification
        }
    }

    impl ASN1GenType for Global_en_gNB_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Global_en_gNB_ID
        }
    }

    impl ASN1GenType for EN_DCSONengNBIdentification{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EN_DCSONengNBIdentification
        }
    }

    impl ASN1GenType for EN_DCTransferTypeRequest{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EN_DCTransferTypeRequest
        }
    }

    impl ASN1GenType for FiveGSTAI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_FiveGSTAI
        }
    }

    impl ASN1GenType for EN_DCTransferTypeReply{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EN_DCTransferTypeReply
        }
    }

    impl ASN1GenType for EN_DCSONTransferType{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EN_DCSONTransferType
        }
    }

    impl ASN1GenType for SONInformationReply{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SONInformationReply
        }
    }

    impl ASN1GenType for ENBX2TLAs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBX2TLAs
        }
    }

    impl ASN1GenType for X2TNLConfigurationInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_X2TNLConfigurationInfo
        }
    }

    impl ASN1GenType for SONInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SONInformation
        }
    }

    impl ASN1GenType for EN_DCSONConfigurationTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EN_DCSONConfigurationTransfer
        }
    }

    impl ASN1GenType for Bearers_SubjectToStatusTransferList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Bearers_SubjectToStatusTransferList
        }
    }

    impl ASN1GenType for LastVisitedGERANCellInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LastVisitedGERANCellInformation
        }
    }

    impl ASN1GenType for ECGIListForRestart{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ECGIListForRestart
        }
    }

    impl ASN1GenType for CellID_Cancelled{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellID_Cancelled
        }
    }

    impl ASN1GenType for CellID_Cancelled_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellID_Cancelled_Item
        }
    }

    impl ASN1GenType for MBSFN_ResultToLog{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MBSFN_ResultToLog
        }
    }

    impl ASN1GenType for MBSFN_ResultToLogInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MBSFN_ResultToLogInfo
        }
    }

    impl ASN1GenType for ECGIList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ECGIList
        }
    }

    impl ASN1GenType for TAIListforWarning{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIListforWarning
        }
    }

    impl ASN1GenType for EmergencyAreaIDList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EmergencyAreaIDList
        }
    }

    impl ASN1GenType for WarningAreaList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_WarningAreaList
        }
    }

    impl ASN1GenType for RecommendedCellList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RecommendedCellList
        }
    }

    impl ASN1GenType for RecommendedCellsForPaging{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RecommendedCellsForPaging
        }
    }

    impl ASN1GenType for InformationOnRecommendedCellsAndENBsForPaging{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InformationOnRecommendedCellsAndENBsForPaging
        }
    }

    impl ASN1GenType for AllocationAndRetentionPriority{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_AllocationAndRetentionPriority
        }
    }

    impl ASN1GenType for E_RABLevelQoSParameters{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABLevelQoSParameters
        }
    }

    impl ASN1GenType for GBR_QosInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_GBR_QosInformation
        }
    }

    impl ASN1GenType for E_RABToBeModifiedItemBearerModReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeModifiedItemBearerModReq
        }
    }

    impl ASN1GenType for TAListforQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAListforQMC
        }
    }

    impl ASN1GenType for TABasedQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TABasedQMC
        }
    }

    impl ASN1GenType for CellIdentifierAndCELevelForCECapableUEs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellIdentifierAndCELevelForCECapableUEs
        }
    }

    impl ASN1GenType for TAI_Cancelled{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAI_Cancelled
        }
    }

    impl ASN1GenType for CancelledCellinTAI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CancelledCellinTAI
        }
    }

    impl ASN1GenType for CancelledCellinTAI_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CancelledCellinTAI_Item
        }
    }

    impl ASN1GenType for TAI_Cancelled_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAI_Cancelled_Item
        }
    }

    impl ASN1GenType for EmergencyAreaID_Cancelled{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EmergencyAreaID_Cancelled
        }
    }

    impl ASN1GenType for CancelledCellinEAI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CancelledCellinEAI
        }
    }

    impl ASN1GenType for CancelledCellinEAI_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CancelledCellinEAI_Item
        }
    }

    impl ASN1GenType for EmergencyAreaID_Cancelled_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EmergencyAreaID_Cancelled_Item
        }
    }

    impl ASN1GenType for BroadcastCancelledAreaList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_BroadcastCancelledAreaList
        }
    }

    impl ASN1GenType for E_RABFailedToResumeItemResumeReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABFailedToResumeItemResumeReq
        }
    }

    impl ASN1GenType for E_RABNotToBeModifiedItemBearerModInd{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABNotToBeModifiedItemBearerModInd
        }
    }

    impl ASN1GenType for E_RABReleaseItemBearerRelComp{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABReleaseItemBearerRelComp
        }
    }

    impl ASN1GenType for E_RABModifyItemBearerModConf{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModifyItemBearerModConf
        }
    }

    impl ASN1GenType for TAListforMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAListforMDT
        }
    }

    impl ASN1GenType for TABasedMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TABasedMDT
        }
    }

    impl ASN1GenType for M1PeriodicReporting{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_M1PeriodicReporting
        }
    }

    impl ASN1GenType for GNB_Identity{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_GNB_Identity
        }
    }

    impl ASN1GenType for Global_GNB_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Global_GNB_ID
        }
    }

    impl ASN1GenType for GNB{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_GNB
        }
    }

    impl ASN1GenType for NG_eNB{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NG_eNB
        }
    }

    impl ASN1GenType for Global_RAN_NODE_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Global_RAN_NODE_ID
        }
    }

    impl ASN1GenType for ContextatSource{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ContextatSource
        }
    }

    impl ASN1GenType for CellIdListforQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellIdListforQMC
        }
    }

    impl ASN1GenType for CellID_Broadcast_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellID_Broadcast_Item
        }
    }

    impl ASN1GenType for UE_S1AP_ID_pair{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UE_S1AP_ID_pair
        }
    }

    impl ASN1GenType for UE_S1AP_IDs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UE_S1AP_IDs
        }
    }

    impl ASN1GenType for MeasurementThresholdL1LoggedMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MeasurementThresholdL1LoggedMDT
        }
    }

    impl ASN1GenType for EventL1LoggedMDTConfig{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EventL1LoggedMDTConfig
        }
    }

    impl ASN1GenType for EventTrigger{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EventTrigger
        }
    }

    impl ASN1GenType for ImmediateMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ImmediateMDT
        }
    }

    impl ASN1GenType for MeasurementThresholdA2{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MeasurementThresholdA2
        }
    }

    impl ASN1GenType for M1ThresholdEventA2{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_M1ThresholdEventA2
        }
    }

    impl ASN1GenType for MDTMode{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MDTMode
        }
    }

    impl ASN1GenType for ENBIndirectX2TransportLayerAddresses{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBIndirectX2TransportLayerAddresses
        }
    }

    impl ASN1GenType for BluetoothMeasConfigNameList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_BluetoothMeasConfigNameList
        }
    }

    impl ASN1GenType for COUNTvaluePDCP_SNlength18{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_COUNTvaluePDCP_SNlength18
        }
    }

    impl ASN1GenType for UserLocationInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UserLocationInformation
        }
    }

    impl ASN1GenType for ForbiddenLACs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ForbiddenLACs
        }
    }

    impl ASN1GenType for ForbiddenLAs_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ForbiddenLAs_Item
        }
    }

    impl ASN1GenType for E_RABReleaseListBearerRelComp{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABReleaseListBearerRelComp
        }
    }

    impl ASN1GenType for ExpectedUEActivityBehaviour{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ExpectedUEActivityBehaviour
        }
    }

    impl ASN1GenType for ServedGUMMEIs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ServedGUMMEIs
        }
    }

    impl ASN1GenType for ServedPLMNs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ServedPLMNs
        }
    }

    impl ASN1GenType for ServedGroupIDs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ServedGroupIDs
        }
    }

    impl ASN1GenType for ServedMMECs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ServedMMECs
        }
    }

    impl ASN1GenType for ServedGUMMEIsItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ServedGUMMEIsItem
        }
    }

    impl ASN1GenType for TAIListforMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIListforMDT
        }
    }

    impl ASN1GenType for TAIBasedMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIBasedMDT
        }
    }

    impl ASN1GenType for E_RABToBeModifiedItemBearerModInd{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeModifiedItemBearerModInd
        }
    }

    impl ASN1GenType for TAI_Broadcast{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAI_Broadcast
        }
    }

    impl ASN1GenType for TAI_Broadcast_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAI_Broadcast_Item
        }
    }

    impl ASN1GenType for PC5FlowBitRates{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PC5FlowBitRates
        }
    }

    impl ASN1GenType for ProSeAuthorized{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ProSeAuthorized
        }
    }

    impl ASN1GenType for PWSfailedECGIList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PWSfailedECGIList
        }
    }

    impl ASN1GenType for CriticalityDiagnostics_IE_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CriticalityDiagnostics_IE_Item
        }
    }

    impl ASN1GenType for E_RABFailedToResumeItemResumeRes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABFailedToResumeItemResumeRes
        }
    }

    impl ASN1GenType for LastVisitedPSCellList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LastVisitedPSCellList
        }
    }

    impl ASN1GenType for LastVisitedPSCellInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LastVisitedPSCellInformation
        }
    }

    impl ASN1GenType for PSCellInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PSCellInformation
        }
    }

    impl ASN1GenType for M5Configuration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_M5Configuration
        }
    }

    impl ASN1GenType for BluetoothMeasurementConfiguration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_BluetoothMeasurementConfiguration
        }
    }

    impl ASN1GenType for GUMMEI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_GUMMEI
        }
    }

    impl ASN1GenType for COUNTvalue{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_COUNTvalue
        }
    }

    impl ASN1GenType for COUNTValueExtended{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_COUNTValueExtended
        }
    }

    impl ASN1GenType for DLCOUNT_PDCP_SNlength{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DLCOUNT_PDCP_SNlength
        }
    }

    impl ASN1GenType for Bearers_SubjectToEarlyStatusTransfer_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Bearers_SubjectToEarlyStatusTransfer_Item
        }
    }

    impl ASN1GenType for SecurityResult{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SecurityResult
        }
    }

    impl ASN1GenType for SupportedTAs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SupportedTAs
        }
    }

    impl ASN1GenType for BPLMNs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_BPLMNs
        }
    }

    impl ASN1GenType for SupportedTAs_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SupportedTAs_Item
        }
    }

    impl ASN1GenType for ConnectedengNBItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ConnectedengNBItem
        }
    }

    impl ASN1GenType for InterSystemMeasurementList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InterSystemMeasurementList
        }
    }

    impl ASN1GenType for InterSystemMeasurementItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InterSystemMeasurementItem
        }
    }

    impl ASN1GenType for E_RABToBeSetupItemHOReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeSetupItemHOReq
        }
    }

    impl ASN1GenType for AssistanceDataForCECapableUEs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_AssistanceDataForCECapableUEs
        }
    }

    impl ASN1GenType for Bearers_SubjectToEarlyStatusTransferList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Bearers_SubjectToEarlyStatusTransferList
        }
    }

    impl ASN1GenType for ENB_EarlyStatusTransfer_TransparentContainer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENB_EarlyStatusTransfer_TransparentContainer
        }
    }

    impl ASN1GenType for SecondaryRATDataUsageReportList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SecondaryRATDataUsageReportList
        }
    }

    impl ASN1GenType for E_RABToBeSetupItemCtxtSUReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeSetupItemCtxtSUReq
        }
    }

    impl ASN1GenType for DAPSResponseInfoList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DAPSResponseInfoList
        }
    }

    impl ASN1GenType for E_RABModifyListBearerModConf{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModifyListBearerModConf
        }
    }

    impl ASN1GenType for CellIdListforMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellIdListforMDT
        }
    }

    impl ASN1GenType for CellBasedMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellBasedMDT
        }
    }

    impl ASN1GenType for AreaScopeOfMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_AreaScopeOfMDT
        }
    }

    impl ASN1GenType for MDT_Configuration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MDT_Configuration
        }
    }

    impl ASN1GenType for HandoverRestrictionList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_HandoverRestrictionList
        }
    }

    impl ASN1GenType for EPLMNs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EPLMNs
        }
    }

    impl ASN1GenType for ForbiddenTAs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ForbiddenTAs
        }
    }

    impl ASN1GenType for ForbiddenTACs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ForbiddenTACs
        }
    }

    impl ASN1GenType for ForbiddenTAs_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ForbiddenTAs_Item
        }
    }

    impl ASN1GenType for ForbiddenLAs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ForbiddenLAs
        }
    }

    impl ASN1GenType for EmergencyAreaID_Broadcast{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EmergencyAreaID_Broadcast
        }
    }

    impl ASN1GenType for CompletedCellinEAI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CompletedCellinEAI
        }
    }

    impl ASN1GenType for CompletedCellinEAI_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CompletedCellinEAI_Item
        }
    }

    impl ASN1GenType for EmergencyAreaID_Broadcast_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EmergencyAreaID_Broadcast_Item
        }
    }

    impl ASN1GenType for M6Configuration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_M6Configuration
        }
    }

    impl ASN1GenType for Subscription_Based_UE_DifferentiationInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Subscription_Based_UE_DifferentiationInfo
        }
    }

    impl ASN1GenType for CellID_Broadcast{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellID_Broadcast
        }
    }

    impl ASN1GenType for ServedDCNsItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ServedDCNsItem
        }
    }

    impl ASN1GenType for E_RABSetupItemBearerSURes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSetupItemBearerSURes
        }
    }

    impl ASN1GenType for ENB_StatusTransfer_TransparentContainer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENB_StatusTransfer_TransparentContainer
        }
    }

    impl ASN1GenType for UE_associatedLogicalS1_ConnectionListRes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UE_associatedLogicalS1_ConnectionListRes
        }
    }

    impl ASN1GenType for E_RABToBeSetupListCtxtSUReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeSetupListCtxtSUReq
        }
    }

    impl ASN1GenType for CSG_IdList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CSG_IdList
        }
    }

    impl ASN1GenType for CSG_IdList_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CSG_IdList_Item
        }
    }

    impl ASN1GenType for ResetType{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ResetType
        }
    }

    impl ASN1GenType for Paging_eDRXInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Paging_eDRXInformation
        }
    }

    impl ASN1GenType for TAIList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIList
        }
    }

    impl ASN1GenType for E_RABToBeSwitchedULItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeSwitchedULItem
        }
    }

    impl ASN1GenType for TAIListforQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIListforQMC
        }
    }

    impl ASN1GenType for TAIBasedQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIBasedQMC
        }
    }

    impl ASN1GenType for E_RABSetupListCtxtSURes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSetupListCtxtSURes
        }
    }

    impl ASN1GenType for ENBX2ExtTLAs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBX2ExtTLAs
        }
    }

    impl ASN1GenType for ENBX2ExtTLA{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBX2ExtTLA
        }
    }

    impl ASN1GenType for ENBX2GTPTLAs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ENBX2GTPTLAs
        }
    }

    impl ASN1GenType for LTE_NTN_TAI_Information{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LTE_NTN_TAI_Information
        }
    }

    impl ASN1GenType for CriticalityDiagnostics_IE_List{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CriticalityDiagnostics_IE_List
        }
    }

    impl ASN1GenType for Cdma2000OneXSRVCCInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Cdma2000OneXSRVCCInfo
        }
    }

    impl ASN1GenType for CNTypeRestrictions{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CNTypeRestrictions
        }
    }

    impl ASN1GenType for CNTypeRestrictions_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CNTypeRestrictions_Item
        }
    }

    impl ASN1GenType for Bearers_SubjectToStatusTransfer_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Bearers_SubjectToStatusTransfer_Item
        }
    }

    impl ASN1GenType for UL_CP_SecurityInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UL_CP_SecurityInformation
        }
    }

    impl ASN1GenType for UEAggregateMaximumBitrate{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEAggregateMaximumBitrate
        }
    }

    impl ASN1GenType for UE_HistoryInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UE_HistoryInformation
        }
    }

    impl ASN1GenType for CellType{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellType
        }
    }

    impl ASN1GenType for LastVisitedEUTRANCellInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LastVisitedEUTRANCellInformation
        }
    }

    impl ASN1GenType for LastVisitedCell_Item{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LastVisitedCell_Item
        }
    }

    impl ASN1GenType for SourceeNB_ToTargeteNB_TransparentContainer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SourceeNB_ToTargeteNB_TransparentContainer
        }
    }

    impl ASN1GenType for E_RABInformationList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABInformationList
        }
    }

    impl ASN1GenType for M4Configuration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_M4Configuration
        }
    }

    impl ASN1GenType for SecurityContext{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SecurityContext
        }
    }

    impl ASN1GenType for M3Configuration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_M3Configuration
        }
    }

    impl ASN1GenType for MutingPatternInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MutingPatternInformation
        }
    }

    impl ASN1GenType for CSGMembershipInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CSGMembershipInfo
        }
    }

    impl ASN1GenType for RequestType{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RequestType
        }
    }

    impl ASN1GenType for WLANMeasurementConfiguration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_WLANMeasurementConfiguration
        }
    }

    impl ASN1GenType for WLANMeasConfigNameList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_WLANMeasConfigNameList
        }
    }

    impl ASN1GenType for E_RABToBeUpdatedItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeUpdatedItem
        }
    }

    impl ASN1GenType for RIMTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RIMTransfer
        }
    }

    impl ASN1GenType for LAI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LAI
        }
    }

    impl ASN1GenType for GERAN_Cell_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_GERAN_Cell_ID
        }
    }

    impl ASN1GenType for TargetRNC_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TargetRNC_ID
        }
    }

    impl ASN1GenType for RIMRoutingAddress{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RIMRoutingAddress
        }
    }

    impl ASN1GenType for Inter_SystemInformationTransferType{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Inter_SystemInformationTransferType
        }
    }

    impl ASN1GenType for E_RABAdmittedItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABAdmittedItem
        }
    }

    impl ASN1GenType for BroadcastCompletedAreaList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_BroadcastCompletedAreaList
        }
    }

    impl ASN1GenType for EmergencyAreaIDListForRestart{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_EmergencyAreaIDListForRestart
        }
    }

    impl ASN1GenType for E_RABItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABItem
        }
    }

    impl ASN1GenType for TargetNgRanNode_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TargetNgRanNode_ID
        }
    }

    impl ASN1GenType for E_RABInformationListItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABInformationListItem
        }
    }

    impl ASN1GenType for NB_IoT_Paging_eDRXInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NB_IoT_Paging_eDRXInformation
        }
    }

    impl ASN1GenType for ServedDCNs{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ServedDCNs
        }
    }

    impl ASN1GenType for RLFReportInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RLFReportInformation
        }
    }

    impl ASN1GenType for SONInformationReport{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SONInformationReport
        }
    }

    impl ASN1GenType for RAT_Restrictions{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RAT_Restrictions
        }
    }

    impl ASN1GenType for RAT_RestrictionsItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RAT_RestrictionsItem
        }
    }

    impl ASN1GenType for PC5QoSFlowList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PC5QoSFlowList
        }
    }

    impl ASN1GenType for PC5QoSFlowItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PC5QoSFlowItem
        }
    }

    impl ASN1GenType for PC5QoSParameters{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PC5QoSParameters
        }
    }

    impl ASN1GenType for Additional_GUTI{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_Additional_GUTI
        }
    }

    impl ASN1GenType for CriticalityDiagnostics{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CriticalityDiagnostics
        }
    }

    impl ASN1GenType for InterSystemMeasurementParameters{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_InterSystemMeasurementParameters
        }
    }

    impl ASN1GenType for IntersystemMeasurementConfiguration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_IntersystemMeasurementConfiguration
        }
    }

    impl ASN1GenType for OverloadResponse{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_OverloadResponse
        }
    }

    impl ASN1GenType for NRV2XServicesAuthorized{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NRV2XServicesAuthorized
        }
    }

    impl ASN1GenType for V2XServicesAuthorized{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_V2XServicesAuthorized
        }
    }

    impl ASN1GenType for TransportInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TransportInformation
        }
    }

    impl ASN1GenType for DAPSResponseInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DAPSResponseInfo
        }
    }

    impl ASN1GenType for E_RABToBeSetupItemBearerSUReq{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeSetupItemBearerSUReq
        }
    }

    impl ASN1GenType for E_RABFailedToSetupItemHOReqAck{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABFailedToSetupItemHOReqAck
        }
    }

    impl ASN1GenType for WUS_Assistance_Information{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_WUS_Assistance_Information
        }
    }

    impl ASN1GenType for DL_CP_SecurityInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DL_CP_SecurityInformation
        }
    }

    impl ASN1GenType for ExpectedUEBehaviour{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ExpectedUEBehaviour
        }
    }

    impl ASN1GenType for UESidelinkAggregateMaximumBitrate{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UESidelinkAggregateMaximumBitrate
        }
    }

    impl ASN1GenType for TAIListForRestart{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIListForRestart
        }
    }

    impl ASN1GenType for NRUESidelinkAggregateMaximumBitrate{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NRUESidelinkAggregateMaximumBitrate
        }
    }

    impl ASN1GenType for AssistanceDataForPaging{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_AssistanceDataForPaging
        }
    }

    impl ASN1GenType for AssistanceDataForRecommendedCells{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_AssistanceDataForRecommendedCells
        }
    }

    impl ASN1GenType for PagingAttemptInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PagingAttemptInformation
        }
    }

    impl ASN1GenType for UESecurityCapabilities{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UESecurityCapabilities
        }
    }

    impl ASN1GenType for LoggedMBSFNMDT{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LoggedMBSFNMDT
        }
    }

    impl ASN1GenType for TimeSynchronisationInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TimeSynchronisationInfo
        }
    }

    impl ASN1GenType for E_RABSecurityResultItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSecurityResultItem
        }
    }

    impl ASN1GenType for DAPSRequestInfo{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DAPSRequestInfo
        }
    }

    impl ASN1GenType for ECGI_List{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ECGI_List
        }
    }

    impl ASN1GenType for CellBasedQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_CellBasedQMC
        }
    }

    impl ASN1GenType for PLMNListforQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PLMNListforQMC
        }
    }

    impl ASN1GenType for PLMNAreaBasedQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_PLMNAreaBasedQMC
        }
    }

    impl ASN1GenType for AreaScopeOfQMC{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_AreaScopeOfQMC
        }
    }

    impl ASN1GenType for GUMMEIList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_GUMMEIList
        }
    }

    impl ASN1GenType for E_RABList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABList
        }
    }

    impl ASN1GenType for SourceNgRanNode_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SourceNgRanNode_ID
        }
    }

    impl ASN1GenType for MDTPLMNList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MDTPLMNList
        }
    }

    impl ASN1GenType for E_RABModifyItemBearerModRes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModifyItemBearerModRes
        }
    }

    impl ASN1GenType for TunnelInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TunnelInformation
        }
    }

    impl ASN1GenType for ListeningSubframePattern{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ListeningSubframePattern
        }
    }

    impl ASN1GenType for RecommendedCellItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RecommendedCellItem
        }
    }

    impl ASN1GenType for TargeteNB_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TargeteNB_ID
        }
    }

    impl ASN1GenType for UEAppLayerMeasConfig{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UEAppLayerMeasConfig
        }
    }

    impl ASN1GenType for SynchronisationInformation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SynchronisationInformation
        }
    }

    impl ASN1GenType for MMEPagingTarget{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_MMEPagingTarget
        }
    }

    impl ASN1GenType for TargetID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TargetID
        }
    }

    impl ASN1GenType for RecommendedENBItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_RecommendedENBItem
        }
    }

    impl ASN1GenType for E_RABModifyListBearerModRes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABModifyListBearerModRes
        }
    }

    impl ASN1GenType for M7Configuration{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_M7Configuration
        }
    }

    impl ASN1GenType for DAPSResponseInfoItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_DAPSResponseInfoItem
        }
    }

    impl ASN1GenType for E_RABSecurityResultList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSecurityResultList
        }
    }

    impl ASN1GenType for E_RABToBeSwitchedDLItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABToBeSwitchedDLItem
        }
    }

    impl ASN1GenType for ConnectedengNBList{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_ConnectedengNBList
        }
    }

    impl ASN1GenType for LoggedMDTTrigger{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_LoggedMDTTrigger
        }
    }

    impl ASN1GenType for TargeteNB_ToSourceeNB_TransparentContainer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TargeteNB_ToSourceeNB_TransparentContainer
        }
    }

    impl ASN1GenType for SourceeNB_ID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SourceeNB_ID
        }
    }

    impl ASN1GenType for SONConfigurationTransfer{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SONConfigurationTransfer
        }
    }

    impl ASN1GenType for TraceActivation{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TraceActivation
        }
    }

    impl ASN1GenType for TAIItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_TAIItem
        }
    }

    impl ASN1GenType for SourceNodeID{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_SourceNodeID
        }
    }

    impl ASN1GenType for E_RABSetupListBearerSURes{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_E_RABSetupListBearerSURes
        }
    }

    impl ASN1GenType for NRUESecurityCapabilities{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_NRUESecurityCapabilities
        }
    }

    impl ASN1GenType for UE_associatedLogicalS1_ConnectionListResAck{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UE_associatedLogicalS1_ConnectionListResAck
        }
    }

    impl ASN1GenType for UE_associatedLogicalS1_ConnectionItem{
        unsafe fn get_descriptor() -> &'static asn_TYPE_descriptor_t {
            &asn_DEF_UE_associatedLogicalS1_ConnectionItem
        }
    }
